= Activiti User Guide
v 6.0.0
:lang: en

[[header]]
== Activiti User Guide

[#author .author]#v 6.0.0# +

[[toc]]
[[toctitle]]
Table of Contents

* link:#_introduction[1. Introduction]
** link:#license[1.1. License]
** link:#download[1.2. Download]
** link:#sources[1.3. Sources]
** link:#required.software[1.4. Required software]
*** link:#_jdk_7[1.4.1. JDK 7+]
*** link:#_ide[1.4.2. IDE]
** link:#reporting.problems[1.5. Reporting problems]
** link:#experimental[1.6. Experimental features]
** link:#internal[1.7. Internal implementation classes]
* link:#_getting_started[2. Getting Started]
** link:#demo.setup.one.minute.version[2.1. One minute version]
** link:#activiti.setup[2.2. Activiti setup]
** link:#activiti.setup.database[2.3. Activiti database setup]
** link:#getting.started.including.libs[2.4. Include the Activiti jar
and its dependencies]
** link:#getting.started.next.steps[2.5. Next steps]
* link:#_configuration[3. Configuration]
** link:#configuration[3.1. Creating a ProcessEngine]
** link:#configurationRoot[3.2. ProcessEngineConfiguration bean]
** link:#databaseConfiguration[3.3. Database configuration]
** link:#jndiDatasourceConfig[3.4. JNDI Datasource Configuration]
*** link:#jndi_configuration[3.4.1. Configuration]
*** link:#_jndi_properties[3.4.2. JNDI properties]
** link:#supporteddatabases[3.5. Supported databases]
** link:#creatingDatabaseTable[3.6. Creating the database tables]
** link:#database.tables.explained[3.7. Database table names explained]
** link:#databaseUpgrade[3.8. Database upgrade]
** link:#jobExecutorConfiguration[3.9. Job Executor (since version
6.0.0)]
** link:#_job_executor_activation[3.10. Job executor activation]
** link:#mailServerConfiguration[3.11. Mail server configuration]
** link:#historyConfiguration[3.12. History configuration]
** link:#exposingConfigurationBeans[3.13. Exposing configuration beans
in expressions and scripts]
** link:#processDefinitionCacheConfiguration[3.14. Deployment cache
configuration]
** link:#loggingConfiguration[3.15. Logging]
** link:#MDC[3.16. Mapped Diagnostic Contexts]
** link:#eventDispatcher[3.17. Event handlers]
*** link:#eventDispatcherListener[3.17.1. Event listener implementation]
*** link:#eventDispatcherConfiguration[3.17.2. Configuration and setup]
*** link:#eventDispatcherConfigurationRuntime[3.17.3. Adding listeners
at runtime]
*** link:#eventDispatcherConfigurationProcessDefinition[3.17.4. Adding
listeners to process definitions]
**** link:#_listeners_executing_user_defined_logic[Listeners executing
user-defined logic]
**** link:#_listeners_throwing_bpmn_events[Listeners throwing BPMN
events]
**** link:#_notes_on_listeners_on_a_process_definition[Notes on
listeners on a process-definition]
*** link:#eventDispatcherCustomEvents[3.17.5. Dispatching events through
API]
*** link:#eventDispatcherEventTypes[3.17.6. Supported event types]
*** link:#eventDispatcherRemarks[3.17.7. Additional remarks]
* link:#chapterApi[4. The Activiti API]
** link:#apiEngine[4.1. The Process Engine API and services]
** link:#_exception_strategy[4.2. Exception strategy]
** link:#api.services[4.3. Working with the Activiti services]
*** link:#api.services.deployment[4.3.1. Deploying the process]
*** link:#api.services.start.processinstance[4.3.2. Starting a process
instance]
*** link:#api.services.tasks[4.3.3. Completing tasks]
*** link:#api.services.suspend[4.3.4. Suspending and activating a
process]
*** link:#api.services[4.3.5. Further reading]
** link:#queryAPI[4.4. Query API]
** link:#apiVariables[4.5. Variables]
** link:#apiTransientVariables[4.6. Transient variables]
** link:#apiExpressions[4.7. Expressions]
** link:#apiUnitTesting[4.8. Unit testing]
** link:#apiDebuggingUnitTest[4.9. Debugging unit tests]
** link:#apiProcessEngineInWebApp[4.10. The process engine in a web
application]
* link:#springintegration[5. Spring integration]
** link:#_processenginefactorybean[5.1. ProcessEngineFactoryBean]
** link:#_transactions[5.2. Transactions]
** link:#springExpressions[5.3. Expressions]
** link:#_automatic_resource_deployment[5.4. Automatic resource
deployment]
** link:#springUnitTest[5.5. Unit testing]
** link:#_jpa_with_hibernate_4_2_x[5.6. JPA with Hibernate 4.2.x]
** link:#springSpringBoot[5.7. Spring Boot]
*** link:#_compatibility[5.7.1. Compatibility]
*** link:#_getting_started_2[5.7.2. Getting started]
*** link:#_changing_the_database_and_connection_pool[5.7.3. Changing the
database and connection pool]
*** link:#_rest_support[5.7.4. REST support]
*** link:#_jpa_support[5.7.5. JPA support]
*** link:#_further_reading[5.7.6. Further Reading]
* link:#chDeployment[6. Deployment]
** link:#_business_archives[6.1. Business archives]
*** link:#_deploying_programmatically[6.1.1. Deploying programmatically]
** link:#_external_resources[6.2. External resources]
*** link:#_java_classes[6.2.1. Java classes]
*** link:#_using_spring_beans_from_a_process[6.2.2. Using Spring beans
from a process]
*** link:#_creating_a_single_app[6.2.3. Creating a single app]
** link:#versioningOfProcessDefinitions[6.3. Versioning of process
definitions]
** link:#providingProcessDiagram[6.4. Providing a process diagram]
** link:#generatingProcessDiagram[6.5. Generating a process diagram]
** link:#deploymentCategory[6.6. Category]
* link:#bpmn20[7. BPMN 2.0 Introduction]
** link:#whatIsBpmn[7.1. What is BPMN?]
** link:#bpmnDefiningProcess[7.2. Defining a process]
** link:#_getting_started_10_minute_tutorial[7.3. Getting started: 10
minute tutorial]
*** link:#bpmn10MinuteTutorialPrerequisites[7.3.1. Prerequisites]
*** link:#bpmn10MinuteTutorialGoal[7.3.2. Goal]
*** link:#bpmnFirstExampleUseCase[7.3.3. Use case]
*** link:#bpmnFirstExampleDiagram[7.3.4. Process diagram]
*** link:#bpmnFirstExampleXml[7.3.5. XML representation]
*** link:#bpmnFirstExamplStartProcess[7.3.6. Starting a process
instance]
*** link:#bpmnFirstExampleCandidateList[7.3.7. Task lists]
*** link:#bpmnFirstExampleClaimTask[7.3.8. Claiming the task]
*** link:#bpmnFirstExampleCompleteTask[7.3.9. Completing the task]
*** link:#bpmnFirstExampleEndingProcess[7.3.10. Ending the process]
*** link:#bpmnFirstExampleCode[7.3.11. Code overview]
*** link:#bpmnFirstExampleFutureEnhancements[7.3.12. Future
enhancements]
* link:#bpmnConstructs[8. BPMN 2.0 Constructs]
** link:#bpmnCustomExtensions[8.1. Custom extensions]
** link:#bpmnEvents[8.2. Events]
*** link:#eventDefinitions[8.2.1. Event Definitions]
*** link:#timerEventDefinitions[8.2.2. Timer Event Definitions]
*** link:#bpmnErrorEventDefinition[8.2.3. Error Event Definitions]
*** link:#bpmnSignalEventDefinition[8.2.4. Signal Event Definitions]
**** link:#bpmnSignalEventDefinitionThrow[Throwing a Signal Event]
**** link:#bpmnSignalEventDefinitionCatch[Catching a Signal Event]
**** link:#bpmnSignalEventDefinitionQuery[Querying for Signal Event
subscriptions]
**** link:#bpmnSignalEventDefinitionScope[Signal event scope]
**** link:#bpmnSignalEventDefinitionExample[Signal Event example(s)]
*** link:#bpmnMessageEventDefinition[8.2.5. Message Event Definitions]
**** link:#bpmnMessageEventDefinitionThrow[Throwing a Message Event]
**** link:#bpmnMessageEventDefinitionQuery[Querying for Message Event
subscriptions]
**** link:#bpmnMessageEventDefinitionExample[Message Event example(s)]
*** link:#bpmnStartEvents[8.2.6. Start Events]
*** link:#bpmnNoneStartEvent[8.2.7. None Start Event]
**** link:#noneStartEventDescription[Description]
**** link:#noneStartEventGraphicalNotation[Graphical notation]
**** link:#noneStartEventXml[XML representation]
**** link:#noneStartEventCustomExtension[Custom extensions for the none
start event]
*** link:#bpmnTimerStartEvent[8.2.8. Timer Start Event]
**** link:#timerStartEventDescription[Description]
**** link:#timerStartEventGraphicalNotation[Graphical notation]
**** link:#timerStartEventXml[XML representation]
*** link:#bpmnMessageStartEvent[8.2.9. Message Start Event]
**** link:#messageStartEventDescription[Description]
**** link:#messageStartEventGraphicalNotation[Graphical notation]
**** link:#messageStartEventXml[XML representation]
*** link:#bpmnSignalStartEvent[8.2.10. Signal Start Event]
**** link:#bpmnSignalStartEventDescription[Description]
**** link:#signalStartEventGraphicalNotation[Graphical notation]
**** link:#signalStartEventXml[XML representation]
*** link:#bpmnErrorStartEvent[8.2.11. Error Start Event]
**** link:#errorStartEventDescription[Description]
**** link:#errorStartEventGraphicalNotation[Graphical notation]
**** link:#errorStartEventXml[XML representation]
*** link:#bpmnEndEvent[8.2.12. End Events]
*** link:#bpmnNoneEndEvent[8.2.13. None End Event]
**** link:#noneEndEventDescription[Description]
**** link:#bpmnNoneEndEventDescription[Graphical notation]
**** link:#bpmnNoneStartEventXml[XML representation]
*** link:#bpmnErrorEndEvent[8.2.14. Error End Event]
**** link:#bpmnErrorEndEventDescription[Description]
**** link:#bpmnErrorEndEventGraphicalNotation[Graphical notation]
**** link:#bpmnErrorEndEventXml[XML representation]
*** link:#bpmnCancelEndEvent[8.2.15. Terminate End Event]
**** link:#_description[Description]
**** link:#_graphical_notation[Graphical notation]
**** link:#_xml_representation[XML representation]
*** link:#_cancel_end_event[8.2.16. Cancel End Event]
**** link:#_description_2[Description]
**** link:#bpmnCancelEndEventGraphicalNotation[Graphical notation]
**** link:#bpmnCancelEndEventXml[XML representation]
*** link:#bpmnBoundaryEvent[8.2.17. Boundary Events]
*** link:#bpmnTimerBoundaryEvent[8.2.18. Timer Boundary Event]
**** link:#timerBoundaryEventDescription[Description]
**** link:#bpmnTimerBoundaryEventGraphicalNotation[Graphical Notation]
**** link:#bpmnTimerBoundaryEventXml[XML Representation]
**** link:#bpmnKnownIssueBoundaryEvent[Known issue with boundary events]
*** link:#bpmnBoundaryErrorEvent[8.2.19. Error Boundary Event]
**** link:#bpmnBoundaryErrorEventDescription[Description]
**** link:#bpmnBoundaryErrorEventgraphicalNotation[Graphical notation]
**** link:#bpmnBoundaryErrorEventXml[Xml representation]
**** link:#bpmnBoundaryErrorEventExample[Example]
*** link:#bpmnBoundarySignalEvent[8.2.20. Signal Boundary Event]
**** link:#bpmnBoundarySignalEventDescription[Description]
**** link:#bpmnBoundarySignalEventGraphicalNotation[Graphical notation]
**** link:#bpmnBoundarySignalEventXml[XML representation]
**** link:#bpmnBoundarySignalEventExample[Example]
*** link:#bpmnBoundaryMessageEvent[8.2.21. Message Boundary Event]
**** link:#bpmnBoundaryMessageEventDescription[Description]
**** link:#bpmnBoundaryMessageEventGraphicalNotation[Graphical notation]
**** link:#bpmnBoundaryMessageEventXml[XML representation]
**** link:#bpmnBoundaryMessageEventExample[Example]
*** link:#bpmnBoundaryCancelEvent[8.2.22. Cancel Boundary Event]
**** link:#_description_3[Description]
**** link:#bpmnBoundaryCancelEventGraphicalNotation[Graphical notation]
**** link:#bpmnBoundarySignalEventXml[XML representation]
*** link:#bpmnBoundaryCompensationEvent[8.2.23. Compensation Boundary
Event]
**** link:#_description_4[Description]
**** link:#bpmnBoundaryCompensationEventGraphicalNotation[Graphical
notation]
**** link:#bpmnBoundaryCompensationEventXml[XML representation]
*** link:#bpmnIntermediateCatchingEvent[8.2.24. Intermediate Catching
Events]
*** link:#bpmnTimerIntermediateEvent[8.2.25. Timer Intermediate Catching
Event]
**** link:#bpmnTimerIntermediateEventDescription[Description]
**** link:#bpmnTimerIntermediateEventGraphicalNotation[Graphical
Notation]
**** link:#bpmnTimerIntermediateEventXml[XML Representation]
*** link:#bpmnIntermediateSignalEvent[8.2.26. Signal Intermediate
Catching Event]
**** link:#bpmnIntermediateSignalEventDescription[Description]
**** link:#bpmnIntermediateSignalEventGraphicalNotation[Graphical
notation]
**** link:#bpmnIntermediateSignalEventXml[XML representation]
**** link:#bpmnIntermediateSignalEventExample[Example]
*** link:#bpmnIntermediateMessageEvent[8.2.27. Message Intermediate
Catching Event]
**** link:#bpmnIntermediateMessageEventDescription[Description]
**** link:#bpmnIntermediateMessageEventGraphicalNotation[Graphical
notation]
**** link:#bpmnIntermediateSignalEventXml[XML representation]
**** link:#bpmnIntermediateMessageEventExample[Example]
*** link:#bpmnIntermediateThrowEvent[8.2.28. Intermediate Throwing
Event]
*** link:#bpmnIntermediateThrowNoneEvent[8.2.29. Intermediate Throwing
None Event]
*** link:#bpmnIntermediateThrowSignalEvent[8.2.30. Signal Intermediate
Throwing Event]
**** link:#bpmnIntermediateThrowSignalEventDescription[Description]
**** link:#bpmnIntermediateThrowSignalEventGraphicalNotation[Graphical
notation]
**** link:#bpmnIntermediateThrowSignalEventXml[XML representation]
**** link:#bpmnIntermediateSignalEventExample[Example]
*** link:#bpmnIntermediateThrowCompensationEvent[8.2.31. Compensation
Intermediate Throwing Event]
**** link:#_description_5[Description]
**** link:#bpmnIntermediateThrowCompensationEventGraphicalNotation[Graphical
notation]
**** link:#bpmnIntermediateThrowSignalEventXml[Xml representation]
** link:#bpmnSequenceFlow[8.3. Sequence Flow]
*** link:#sequenceFlowDescription[8.3.1. Description]
*** link:#sequenceFlowGraphicalNotation[8.3.2. Graphical notation]
*** link:#sequenceFlowXml[8.3.3. XML representation]
*** link:#bpmnConditionalSequenceFlow[8.3.4. Conditional sequence flow]
**** link:#condSeqFlowDescription[Description]
**** link:#conditionalSequenceFlowGraphicalNotation[Graphical notation]
**** link:#conditionalSequenceFlowXml[XML representation]
*** link:#bpmnDefaultSequenceFlow[8.3.5. Default sequence flow]
**** link:#bpmnDefaultSequenceFlowDescription[Description]
**** link:#bpmnDefaultSequenceFlowGraphicalNotation[Graphical notation]
**** link:#bpmnDefaultSequenceFlowXmlRepresentation[XML representation]
** link:#bpmnGateways[8.4. Gateways]
*** link:#bpmnExclusiveGateway[8.4.1. Exclusive Gateway]
**** link:#exclusiveGatewayDescription[Description]
**** link:#exclusiveGatewayGraphNotation[Graphical notation]
**** link:#exclusiveGatewayXML[XML representation]
*** link:#bpmnParallelGateway[8.4.2. Parallel Gateway]
**** link:#bpmnParallelGatewayDescription[Description]
**** link:#bpmnParallelGatewayGraphicalNotation[Graphical Notation]
**** link:#bpmnParallelGatewayXML[XML representation]
*** link:#bpmnInclusiveGateway[8.4.3. Inclusive Gateway]
**** link:#bpmnInclusiveGatewayDescription[Description]
**** link:#bpmnInclusiveGatewayGraphicalNotation[Graphical Notation]
**** link:#bpmnInclusiveGatewayXML[XML representation]
*** link:#bpmnEventbasedGateway[8.4.4. Event-based Gateway]
**** link:#eventBasedGatewayDescription[Description]
**** link:#eventBasedGatewayGraphNotation[Graphical notation]
**** link:#eventBasedGatewayXML[XML representation]
**** link:#eventBasedGatewayExample[Example(s)]
** link:#bpmnTask[8.5. Tasks]
*** link:#bpmnUserTask[8.5.1. User Task]
**** link:#bpmnUserTaskDescription[Description]
**** link:#bpmnUserTaskGraphicalNotation[Graphical notation]
**** link:#bpmnUserTaskXml[XML representation]
**** link:#bpmnUserTaskDueDate[Due Date]
**** link:#bpmnUserTaskAssignment[User assignment]
**** link:#bpmnUserTaskUserAssignmentExtension[Activiti extensions for
task assignment]
**** link:#bpmnUserTaskUserCustomIdentityLinkAssignmentExtension[Custom
identity link types (Experimental)]
**** link:#bpmnUserTaskUserCustomAssignmentTaskListeners[Custom
Assignment via task listeners]
*** link:#bpmnScriptTask[8.5.2. Script Task]
**** link:#bpmnScriptTaskDescription[Description]
**** link:#bpmnScriptTaskGraphicalNotation[Graphical Notation]
**** link:#bpmnScriptTaskXml[XML representation]
**** link:#bpmnScriptTaskVariables[Variables in scripts]
**** link:#bpmnScriptTaskResultValue[Script results]
**** link:#_security[Security]
*** link:#bpmnJavaServiceTask[8.5.3. Java Service Task]
**** link:#bpmnJavaServiceTaskDescription[Description]
**** link:#bpmnJavaServiceTaskGraphicalNotation[Graphical Notation]
**** link:#bpmnJavaServiceTaskXML[XML representation]
**** link:#bpmnJavaServiceTaskImplementation[Implementation]
**** link:#serviceTaskFieldInjection[Field Injection]
**** link:#serviceTaskFieldInjectionThreadSafety[Field injection and
thread safety]
**** link:#serviceTaskResultValue[Service task results]
**** link:#serviceTaskExceptionHandling[Handling exceptions]
***** link:#serviceTaskBpmnErrors[Throwing BPMN Errors]
***** link:#exceptionMapping[Exception mapping]
***** link:#serviceTaskExceptionSequenceFlow[Exception Sequence Flow]
**** link:#serviceTaskCallActivitiService[Using an Activiti service from
within a JavaDelegate]
*** link:#bpmnWebserviceTask[8.5.4. Web Service Task]
**** link:#_description_6[Description]
**** link:#bpmnWebserviceTaskGraphicalNotation[Graphical Notation]
**** link:#bpmnWebserviceTaskXML[XML representation]
**** link:#bpmnWebserviceTaskIOSpecification[Web Service Task IO
Specification]
**** link:#bpmnWebserviceTaskDataInputAssociation[Web Service Task data
input associations]
**** link:#bpmnWebserviceTaskDataOutputAssociation[Web Service Task data
output associations]
*** link:#bpmnBusinessRuleTask[8.5.5. Business Rule Task]
**** link:#_description_7[Description]
**** link:#bpmnBusinessRuleTaskGraphicalNotation[Graphical Notation]
**** link:#bpmnBusinessRuleTaskXML[XML representation]
*** link:#bpmnEmailTask[8.5.6. Email Task]
**** link:#bpmnEmailTaskServerConfiguration[Mail server configuration]
**** link:#bpmnEmailTaskUsage[Defining an Email Task]
**** link:#bpmnEmailTaskExampleUsage[Example usage]
*** link:#bpmnMuleTask[8.5.7. Mule Task]
**** link:#bpmnMuleTaskUsage[Defining an Mule Task]
**** link:#bpmnMuleTaskExampleUsage[Example usage]
*** link:#bpmnCamelTask[8.5.8. Camel Task]
**** link:#bpmnCamelTaskUsage[Defining a Camel Task]
**** link:#bpmnCamelTaskSimpleCamelCall[Simple Camel Call example]
**** link:#bpmnCamelTaskPingPong[Ping Pong example]
**** link:#_returning_back_the_variables[Returning back the variables]
**** link:#bpmnCamelTaskAsyncPingPong[Asynchronous Ping Pong example]
**** link:#bpmnCamelTaskAsyncPingPong[Instantiate workflow from Camel
route]
*** link:#bpmnManualTask[8.5.9. Manual Task]
**** link:#bpmnManualTaskDescription[Description]
**** link:#bpmnManualTaskGraphicalNotation[Graphical Notation]
**** link:#bpmnManualTaskXml[XML representation]
*** link:#bpmnReceiveTask[8.5.10. Java Receive Task]
**** link:#bpmnReceiveTaskDescription[Description]
**** link:#_graphical_notation_2[Graphical notation]
**** link:#_xml_representation_2[XML representation]
*** link:#bpmnShellTask[8.5.11. Shell Task]
**** link:#bpmnShellTaskDescription[Description]
**** link:#bpmnShellTaskUsage[Defining a shell task]
**** link:#bpmnShellTaskExampleUsage[Example usage]
*** link:#executionListeners[8.5.12. Execution listener]
**** link:#executionListenerFieldInjection[Field injection on execution
listeners]
*** link:#taskListeners[8.5.13. Task listener]
*** link:#bpmnMultiInstance[8.5.14. Multi-instance (for each)]
**** link:#bpmnMultiInstanceDescription[Description]
**** link:#bpmnMultiInstanceGraphicalNotation[Graphical notation]
**** link:#bpmnMultiInstanceXml[Xml representation]
**** link:#bpmnMultiInstanceBoundaryEvent[Boundary events and
multi-instance]
**** link:#bpmnCompensationHandlers[Multi instance and execution
listeners]
*** link:#_compensation_handlers[8.5.15. Compensation Handlers]
**** link:#bpmnCompensationHandlerDescription[Description]
**** link:#bpmnCompensationHandlerGraphicalNotation[Graphical notation]
**** link:#bpmnCompensationHandlerXml[XML representation]
** link:#bpmnSubprocessAndCallActivity[8.6. Sub-Processes and Call
Activities]
*** link:#bpmnSubProcess[8.6.1. Sub-Process]
**** link:#bpmnSubProcessDescription[Description]
**** link:#bpmnSubProcessGraphicalNotation[Graphical Notation]
**** link:#bpmnSubProcessXML[XML representation]
*** link:#bpmnEventSubprocess[8.6.2. Event Sub-Process]
**** link:#bpmnEventSubprocessDescription[Description]
**** link:#bpmnEventSubprocessGraphicalNotation[Graphical Notation]
**** link:#bpmnEventSubprocessXMLRepresentation[XML representation]
**** link:#bpmnEventSubprocessExample[Example]
*** link:#bpmnTransactionSubprocess[8.6.3. Transaction subprocess]
**** link:#_description_8[Description]
**** link:#bpmnEventSubprocessGraphicalNotation[Graphical Notation]
**** link:#bpmnEventSubprocessXMLRepresentation[XML representation]
**** link:#bpmnEventSubprocessExample[Example]
*** link:#bpmnCallActivity[8.6.4. Call activity (subprocess)]
**** link:#bpmnCallActivityDescription[Description]
**** link:#bpmnCallActivityGraphicalNotation[Graphical Notation]
**** link:#bpmnCallActivityXMLRepresentation[XML representation]
**** link:#bpmnCallActivityPassVariables[Passing variables]
**** link:#bpmnCallActivityExample[Example]
** link:#bpmnConcurrencyAndTransactions[8.7. Transactions and
Concurrency]
*** link:#asyncContinuations[8.7.1. Asynchronous Continuations]
*** link:#failRetry[8.7.2. Fail Retry]
*** link:#exclusiveJobs[8.7.3. Exclusive Jobs]
**** link:#_why_exclusive_jobs[Why exclusive Jobs?]
**** link:#_what_are_exclusive_jobs[What are exclusive jobs?]
** link:#security[8.8. Process Initiation Authorization]
** link:#dataobjects[8.9. Data objects]
* link:#forms[9. Forms]
** link:#formProperties[9.1. Form properties]
** link:#externalFormRendering[9.2. External form rendering]
* link:#_jpa[10. JPA]
** link:#_requirements[10.1. Requirements]
** link:#jpaconfiguration[10.2. Configuration]
** link:#_usage[10.3. Usage]
*** link:#_simple_example[10.3.1. Simple Example]
*** link:#_query_jpa_process_variables[10.3.2. Query JPA process
variables]
*** link:#_advanced_example_using_spring_beans_and_jpa[10.3.3. Advanced
example using Spring beans and JPA]
* link:#history[11. History]
** link:#historyQuery[11.1. Querying history]
*** link:#historyQueryProcessInstance[11.1.1.
HistoricProcessInstanceQuery]
*** link:#historyQueryVariableInstance[11.1.2.
HistoricVariableInstanceQuery]
*** link:#historyQueryActivityInstance[11.1.3.
HistoricActivityInstanceQuery]
*** link:#historyQueryDetail[11.1.4. HistoricDetailQuery]
*** link:#historyQueryTaskInstance[11.1.5. HistoricTaskInstanceQuery]
** link:#historyConfig[11.2. History configuration]
** link:#historyFormAuditPurposes[11.3. History for audit purposes]
* link:#activitiDesigner[12. Eclipse Designer]
** link:#eclipseDesignerInstallation[12.1. Installation]
** link:#eclipseDesignerEditorFeatures[12.2. Activiti Designer editor
features]
** link:#eclipseDesignerBPMNFeatures[12.3. Activiti Designer BPMN
features]
** link:#eclipseDesignerDeployment[12.4. Activiti Designer deployment
features]
** link:#eclipseDesignerExtending[12.5. Extending Activiti Designer]
*** link:#eclipseDesignerCustomizingPalette[12.5.1. Customizing the
palette]
**** link:#_extension_setup_eclipse_maven[Extension setup
(Eclipse/Maven)]
**** link:#eclipseDesignerApplyingExtension[Applying your extension to
Activiti Designer]
**** link:#_adding_shapes_to_the_palette[Adding shapes to the palette]
***** link:#eclipseDesignerConfiguringRuntime[Configuring runtime
execution of Custom Service Tasks]
**** link:#eclipseDesignerPropertyTypes[Property types]
***** link:#_propertytype_text[PropertyType.TEXT]
***** link:#_propertytype_multiline_text[PropertyType.MULTILINE_TEXT]
***** link:#_propertytype_period[PropertyType.PERIOD]
***** link:#_propertytype_boolean_choice[PropertyType.BOOLEAN_CHOICE]
***** link:#_propertytype_radio_choice[PropertyType.RADIO_CHOICE]
***** link:#_propertytype_combobox_choice[PropertyType.COMBOBOX_CHOICE]
***** link:#_propertytype_date_picker[PropertyType.DATE_PICKER]
***** link:#_propertytype_data_grid[PropertyType.DATA_GRID]
**** link:#_disabling_default_shapes_in_the_palette[Disabling default
shapes in the palette]
*** link:#_validating_diagrams_and_exporting_to_custom_output_formats[12.5.2.
Validating diagrams and exporting to custom output formats]
**** link:#_creating_a_processvalidator_extension[Creating a
ProcessValidator extension]
**** link:#_creating_an_exportmarshaller_extension[Creating an
ExportMarshaller extension]
* link:#_rest_api[13. REST API]
** link:#_general_activiti_rest_principles[13.1. General Activiti REST
principles]
*** link:#_installation_and_authentication[13.1.1. Installation and
Authentication]
*** link:#_configuration_2[13.1.2. Configuration]
*** link:#restUsageInTomcat[13.1.3. Usage in Tomcat]
*** link:#_methods_and_return_codes[13.1.4. Methods and return-codes]
*** link:#_error_response_body[13.1.5. Error response body]
*** link:#_request_parameters[13.1.6. Request parameters]
**** link:#_url_fragments[URL fragments]
**** link:#_rest_url_query_parameters[Rest URL query parameters]
**** link:#restJsonBody[JSON body parameters]
**** link:#restPagingAndSort[Paging and sorting]
**** link:#restQueryVariable[JSON query variable format]
**** link:#restVariables[Variable representation]
** link:#_deployment[13.2. Deployment]
*** link:#_list_of_deployments[13.2.1. List of Deployments]
*** link:#_get_a_deployment[13.2.2. Get a deployment]
*** link:#_create_a_new_deployment[13.2.3. Create a new deployment]
*** link:#_delete_a_deployment[13.2.4. Delete a deployment]
*** link:#_list_resources_in_a_deployment[13.2.5. List resources in a
deployment]
*** link:#_get_a_deployment_resource[13.2.6. Get a deployment resource]
*** link:#_get_a_deployment_resource_content[13.2.7. Get a deployment
resource content]
** link:#_process_definitions[13.3. Process Definitions]
*** link:#_list_of_process_definitions[13.3.1. List of process
definitions]
*** link:#_get_a_process_definition[13.3.2. Get a process definition]
*** link:#_update_category_for_a_process_definition[13.3.3. Update
category for a process definition]
*** link:#_get_a_process_definition_resource_content[13.3.4. Get a
process definition resource content]
*** link:#_get_a_process_definition_bpmn_model[13.3.5. Get a process
definition BPMN model]
*** link:#_suspend_a_process_definition[13.3.6. Suspend a process
definition]
*** link:#_activate_a_process_definition[13.3.7. Activate a process
definition]
*** link:#_get_all_candidate_starters_for_a_process_definition[13.3.8.
Get all candidate starters for a process-definition]
*** link:#_add_a_candidate_starter_to_a_process_definition[13.3.9. Add a
candidate starter to a process definition]
*** link:#_delete_a_candidate_starter_from_a_process_definition[13.3.10.
Delete a candidate starter from a process definition]
*** link:#_get_a_candidate_starter_from_a_process_definition[13.3.11.
Get a candidate starter from a process definition]
** link:#_models[13.4. Models]
*** link:#_get_a_list_of_models[13.4.1. Get a list of models]
*** link:#_get_a_model[13.4.2. Get a model]
*** link:#_update_a_model[13.4.3. Update a model]
*** link:#_create_a_model[13.4.4. Create a model]
*** link:#_delete_a_model[13.4.5. Delete a model]
*** link:#_get_the_editor_source_for_a_model[13.4.6. Get the editor
source for a model]
*** link:#_set_the_editor_source_for_a_model[13.4.7. Set the editor
source for a model]
*** link:#_get_the_extra_editor_source_for_a_model[13.4.8. Get the extra
editor source for a model]
*** link:#_set_the_extra_editor_source_for_a_model[13.4.9. Set the extra
editor source for a model]
** link:#_process_instances[13.5. Process Instances]
*** link:#_get_a_process_instance[13.5.1. Get a process instance]
*** link:#_delete_a_process_instance[13.5.2. Delete a process instance]
*** link:#_activate_or_suspend_a_process_instance[13.5.3. Activate or
suspend a process instance]
*** link:#_start_a_process_instance[13.5.4. Start a process instance]
*** link:#restProcessInstancesGet[13.5.5. List of process instances]
*** link:#_query_process_instances[13.5.6. Query process instances]
*** link:#_get_diagram_for_a_process_instance[13.5.7. Get diagram for a
process instance]
*** link:#_get_involved_people_for_process_instance[13.5.8. Get involved
people for process instance]
*** link:#_add_an_involved_user_to_a_process_instance[13.5.9. Add an
involved user to a process instance]
*** link:#_remove_an_involved_user_to_from_process_instance[13.5.10.
Remove an involved user to from process instance]
*** link:#_list_of_variables_for_a_process_instance[13.5.11. List of
variables for a process instance]
*** link:#_get_a_variable_for_a_process_instance[13.5.12. Get a variable
for a process instance]
*** link:#_create_or_update_variables_on_a_process_instance[13.5.13.
Create (or update) variables on a process instance]
*** link:#_update_a_single_variable_on_a_process_instance[13.5.14.
Update a single variable on a process instance]
*** link:#_create_a_new_binary_variable_on_a_process_instance[13.5.15.
Create a new binary variable on a process-instance]
*** link:#_update_an_existing_binary_variable_on_a_process_instance[13.5.16.
Update an existing binary variable on a process-instance]
** link:#_executions[13.6. Executions]
*** link:#_get_an_execution[13.6.1. Get an execution]
*** link:#_execute_an_action_on_an_execution[13.6.2. Execute an action
on an execution]
*** link:#_get_active_activities_in_an_execution[13.6.3. Get active
activities in an execution]
*** link:#restExecutionsGet[13.6.4. List of executions]
*** link:#_query_executions[13.6.5. Query executions]
*** link:#_list_of_variables_for_an_execution[13.6.6. List of variables
for an execution]
*** link:#_get_a_variable_for_an_execution[13.6.7. Get a variable for an
execution]
*** link:#_create_or_update_variables_on_an_execution[13.6.8. Create (or
update) variables on an execution]
*** link:#_update_a_variable_on_an_execution[13.6.9. Update a variable
on an execution]
*** link:#_create_a_new_binary_variable_on_an_execution[13.6.10. Create
a new binary variable on an execution]
*** link:#_update_an_existing_binary_variable_on_a_process_instance_2[13.6.11.
Update an existing binary variable on a process-instance]
** link:#_tasks[13.7. Tasks]
*** link:#_get_a_task[13.7.1. Get a task]
*** link:#restTasksGet[13.7.2. List of tasks]
*** link:#_query_for_tasks[13.7.3. Query for tasks]
*** link:#_update_a_task[13.7.4. Update a task]
*** link:#_task_actions[13.7.5. Task actions]
*** link:#_delete_a_task[13.7.6. Delete a task]
*** link:#_get_all_variables_for_a_task[13.7.7. Get all variables for a
task]
*** link:#_get_a_variable_from_a_task[13.7.8. Get a variable from a
task]
*** link:#_get_the_binary_data_for_a_variable[13.7.9. Get the binary
data for a variable]
*** link:#_create_new_variables_on_a_task[13.7.10. Create new variables
on a task]
*** link:#_create_a_new_binary_variable_on_a_task[13.7.11. Create a new
binary variable on a task]
*** link:#_update_an_existing_variable_on_a_task[13.7.12. Update an
existing variable on a task]
*** link:#_updating_a_binary_variable_on_a_task[13.7.13. Updating a
binary variable on a task]
*** link:#_delete_a_variable_on_a_task[13.7.14. Delete a variable on a
task]
*** link:#_delete_all_local_variables_on_a_task[13.7.15. Delete all
local variables on a task]
*** link:#_get_all_identity_links_for_a_task[13.7.16. Get all identity
links for a task]
*** link:#_get_all_identitylinks_for_a_task_for_either_groups_or_users[13.7.17.
Get all identitylinks for a task for either groups or users]
*** link:#_get_a_single_identity_link_on_a_task[13.7.18. Get a single
identity link on a task]
*** link:#_create_an_identity_link_on_a_task[13.7.19. Create an identity
link on a task]
*** link:#_delete_an_identity_link_on_a_task[13.7.20. Delete an identity
link on a task]
*** link:#_create_a_new_comment_on_a_task[13.7.21. Create a new comment
on a task]
*** link:#_get_all_comments_on_a_task[13.7.22. Get all comments on a
task]
*** link:#_get_a_comment_on_a_task[13.7.23. Get a comment on a task]
*** link:#_delete_a_comment_on_a_task[13.7.24. Delete a comment on a
task]
*** link:#_get_all_events_for_a_task[13.7.25. Get all events for a task]
*** link:#_get_an_event_on_a_task[13.7.26. Get an event on a task]
*** link:#_create_a_new_attachment_on_a_task_containing_a_link_to_an_external_resource[13.7.27.
Create a new attachment on a task&#44; containing a link to an external
resource]
*** link:#_create_a_new_attachment_on_a_task_with_an_attached_file[13.7.28.
Create a new attachment on a task&#44; with an attached file]
*** link:#_get_all_attachments_on_a_task[13.7.29. Get all attachments on
a task]
*** link:#_get_an_attachment_on_a_task[13.7.30. Get an attachment on a
task]
*** link:#_get_the_content_for_an_attachment[13.7.31. Get the content
for an attachment]
*** link:#_delete_an_attachment_on_a_task[13.7.32. Delete an attachment
on a task]
** link:#_history[13.8. History]
*** link:#_get_a_historic_process_instance[13.8.1. Get a historic
process instance]
*** link:#restHistoricProcessInstancesGet[13.8.2. List of historic
process instances]
*** link:#_query_for_historic_process_instances[13.8.3. Query for
historic process instances]
*** link:#_delete_a_historic_process_instance[13.8.4. Delete a historic
process instance]
*** link:#_get_the_identity_links_of_a_historic_process_instance[13.8.5.
Get the identity links of a historic process instance]
*** link:#_get_the_binary_data_for_a_historic_process_instance_variable[13.8.6.
Get the binary data for a historic process instance variable]
*** link:#_create_a_new_comment_on_a_historic_process_instance[13.8.7.
Create a new comment on a historic process instance]
*** link:#_get_all_comments_on_a_historic_process_instance[13.8.8. Get
all comments on a historic process instance]
*** link:#_get_a_comment_on_a_historic_process_instance[13.8.9. Get a
comment on a historic process instance]
*** link:#_delete_a_comment_on_a_historic_process_instance[13.8.10.
Delete a comment on a historic process instance]
*** link:#_get_a_single_historic_task_instance[13.8.11. Get a single
historic task instance]
*** link:#restHistoricTaskInstancesGet[13.8.12. Get historic task
instances]
*** link:#_query_for_historic_task_instances[13.8.13. Query for historic
task instances]
*** link:#_delete_a_historic_task_instance[13.8.14. Delete a historic
task instance]
*** link:#_get_the_identity_links_of_a_historic_task_instance[13.8.15.
Get the identity links of a historic task instance]
*** link:#_get_the_binary_data_for_a_historic_task_instance_variable[13.8.16.
Get the binary data for a historic task instance variable]
*** link:#restHistoricActivityInstancesGet[13.8.17. Get historic
activity instances]
*** link:#_query_for_historic_activity_instances[13.8.18. Query for
historic activity instances]
*** link:#restHistoricVariableInstancesGet[13.8.19. List of historic
variable instances]
*** link:#_query_for_historic_variable_instances[13.8.20. Query for
historic variable instances]
*** link:#restHistoricDetailGet[13.8.21. Get historic detail]
*** link:#_query_for_historic_details[13.8.22. Query for historic
details]
*** link:#_get_the_binary_data_for_a_historic_detail_variable[13.8.23.
Get the binary data for a historic detail variable]
** link:#_forms[13.9. Forms]
*** link:#_get_form_data[13.9.1. Get form data]
*** link:#_submit_task_form_data[13.9.2. Submit task form data]
** link:#_database_tables[13.10. Database tables]
*** link:#_list_of_tables[13.10.1. List of tables]
*** link:#_get_a_single_table[13.10.2. Get a single table]
*** link:#_get_column_info_for_a_single_table[13.10.3. Get column info
for a single table]
*** link:#_get_row_data_for_a_single_table[13.10.4. Get row data for a
single table]
** link:#_engine[13.11. Engine]
*** link:#_get_engine_properties[13.11.1. Get engine properties]
*** link:#_get_engine_info[13.11.2. Get engine info]
** link:#_runtime[13.12. Runtime]
*** link:#_signal_event_received[13.12.1. Signal event received]
** link:#_jobs[13.13. Jobs]
*** link:#_get_a_single_job[13.13.1. Get a single job]
*** link:#_delete_a_job[13.13.2. Delete a job]
*** link:#_execute_a_single_job[13.13.3. Execute a single job]
*** link:#_get_the_exception_stacktrace_for_a_job[13.13.4. Get the
exception stacktrace for a job]
*** link:#_get_a_list_of_jobs[13.13.5. Get a list of jobs]
** link:#_users[13.14. Users]
*** link:#_get_a_single_user[13.14.1. Get a single user]
*** link:#_get_a_list_of_users[13.14.2. Get a list of users]
*** link:#_update_a_user[13.14.3. Update a user]
*** link:#_create_a_user[13.14.4. Create a user]
*** link:#_delete_a_user[13.14.5. Delete a user]
*** link:#_get_a_user_s_picture[13.14.6. Get a user’s picture]
*** link:#_updating_a_user_s_picture[13.14.7. Updating a user’s picture]
*** link:#_list_a_user_s_info[13.14.8. List a user’s info]
*** link:#_get_a_user_s_info[13.14.9. Get a user’s info]
*** link:#_update_a_user_s_info[13.14.10. Update a user’s info]
*** link:#_create_a_new_user_s_info_entry[13.14.11. Create a new user’s
info entry]
*** link:#_delete_a_user_s_info[13.14.12. Delete a user’s info]
** link:#_groups[13.15. Groups]
*** link:#_get_a_single_group[13.15.1. Get a single group]
*** link:#_get_a_list_of_groups[13.15.2. Get a list of groups]
*** link:#_update_a_group[13.15.3. Update a group]
*** link:#_create_a_group[13.15.4. Create a group]
*** link:#_delete_a_group[13.15.5. Delete a group]
*** link:#_get_members_in_a_group[13.15.6. Get members in a group]
*** link:#_add_a_member_to_a_group[13.15.7. Add a member to a group]
*** link:#_delete_a_member_from_a_group[13.15.8. Delete a member from a
group]
* link:#cdiintegration[14. CDI integration]
** link:#_setting_up_activiti_cdi[14.1. Setting up activiti-cdi]
*** link:#_looking_up_a_process_engine[14.1.1. Looking up a Process
Engine]
*** link:#_configuring_the_process_engine[14.1.2. Configuring the
Process Engine]
*** link:#_deploying_processes[14.1.3. Deploying Processes]
*** link:#_associating_a_conversation_with_a_process_instance[14.1.4.
Associating a Conversation with a Process Instance]
*** link:#_declaratively_controlling_the_process[14.1.5. Declaratively
controlling the Process]
*** link:#_referencing_beans_from_the_process[14.1.6. Referencing Beans
from the Process]
*** link:#_working_with_businessprocessscoped_beans[14.1.7. Working with
@BusinessProcessScoped beans]
*** link:#_injecting_process_variables[14.1.8. Injecting Process
Variables]
*** link:#_receiving_process_events[14.1.9. Receiving Process Events]
*** link:#_additional_features[14.1.10. Additional Features]
** link:#_known_limitations[14.2. Known Limitations]
* link:#chapter_ldap[15. LDAP integration]
** link:#ldap_usage[15.1. Usage]
** link:#ldap_usecases[15.2. Use cases]
** link:#ldap_configuration[15.3. Configuration]
** link:#ldap_properties[15.4. Properties]
* link:#_advanced[16. Advanced]
** link:#_async_executor[16.1. Async Executor]
*** link:#async_executor_design[16.1.1. Async Executor design]
*** link:#_async_executor_configuration[16.1.2. Async executor
configuration]
*** link:#_message_queue_based_async_executor[16.1.3. Message Queue
based Async Executor]
** link:#advanced_parseHandlers[16.2. Hooking into process parsing]
** link:#advanced.uuid.generator[16.3. UUID id generator for high
concurrency]
** link:#advanced.tenancy[16.4. Multitenancy]
** link:#advanced.custom.sql.queries[16.5. Execute custom SQL]
*** link:#_annotation_based_mapped_statements[16.5.1. Annotation based
Mapped Statements]
*** link:#_xml_based_mapped_statements[16.5.2. XML based Mapped
Statements]
** link:#advanced.process.engine.configurators[16.6. Advanced Process
Engine configuration with a ProcessEngineConfigurator]
** link:#advanced.task.query.switching[16.7. Advanced query API:
seamless switching between runtime and historic task querying]
** link:#advanced.custom.session.manager[16.8. Custom identity
management by overriding standard SessionFactory]
** link:#advanced.safe.bpmn.xml[16.9. Enable safe BPMN 2.0 xml]
** link:#advanced.event.logging[16.10. Event logging (Experimental)]
** link:#_disabling_bulk_inserts[16.11. Disabling bulk inserts]
** link:#advancedSecureScripting[16.12. Secure Scripting]
* link:#Tooling[17. Tooling]
** link:#JMX[17.1. JMX]
*** link:#jmxIntroduction[17.1.1. Introduction]
*** link:#jmxQuickStart[17.1.2. Quick Start]
*** link:#_attributes_and_operations[17.1.3. Attributes and operations]
*** link:#_configuration_3[17.1.4. Configuration]
*** link:#_jmx_service_url[17.1.5. JMX Service URL]
** link:#mavenArchetypes[17.2. Maven archetypes]
*** link:#_create_test_case[17.2.1. Create Test Case]

[[content]]
[[_introduction]]
== 1. Introduction

=== 1.1. License

Activiti is distributed under
http://www.apache.org/licenses/LICENSE-2.0.html[the Apache V2 license].

=== 1.2. Download

http://activiti.org/download.html[]http://activiti.org/download.html

=== 1.3. Sources

The distribution contains most of the sources as jar files. The source
code of Activiti can be found on
https://github.com/Activiti/Activiti[]https://github.com/Activiti/Activiti

[[required.software]]
=== 1.4. Required software

[[_jdk_7]]
==== 1.4.1. JDK 7+

Activiti runs on a JDK higher than or equal to version 7. Go to
http://www.oracle.com/technetwork/java/javase/downloads/index.html[Oracle
Java SE downloads] and click on button "Download JDK". There are
installation instructions on that page as well. To verify that your
installation was successful, run `java -version` on the command line.
That should print the installed version of your JDK.

[[_ide]]
==== 1.4.2. IDE

Activiti development can be done with the IDE of your choice. If you
would like to use the Activiti Designer then you need Eclipse Kepler or
Luna. Download the eclipse distribution of your choice from
http://www.eclipse.org/downloads/[the Eclipse download page]. Unzip the
downloaded file and then you should be able to start it with the eclipse
file in the directory `eclipse`. Further in this user guide, there is a
section on link:#eclipseDesignerInstallation[installing our eclipse
designer plugin].

[[reporting.problems]]
=== 1.5. Reporting problems

Every self-respecting developer should have read
http://www.catb.org/~esr/faqs/smart-questions.html[How to ask questions
the smart way].

After you’ve done that you can post questions and comments on
http://forums.activiti.org/en/viewforum.php?f=3[the Users forum] and
create issues in https://activiti.atlassian.net[our JIRA issue tracker].

[width="100%",cols="50%,50%",]
|===
|__ a|
Even though Activiti is hosted on GitHub, issues should not be reported
using GitHub’s issue system. If you wish to report an issue, do not
create a GitHub issue, but use https://activiti.atlassian.net[our JIRA].

|===

[[experimental]]
=== 1.6. Experimental features

Sections marked with *[EXPERIMENTAL]* should not be considered stable.

All classes that have `.impl.` in the package name are internal
implementation classes and cannot be considered stable. However, if the
user guide mentions those classes as configuration values, they are
supported and can be considered stable.

[[internal]]
=== 1.7. Internal implementation classes

In the jar file, all classes in packages that have `.impl.` (e.g.
`org.activiti.engine.impl.db`) in them are implementation classes and
should be considered internal. No stability guarantees are given on
classes or interfaces that are in implementation classes.

[[_getting_started]]
== 2. Getting Started

[[demo.setup.one.minute.version]]
=== 2.1. One minute version

After downloading the Activiti UI WAR file from the
http://www.activiti.org[Activiti website], follow these steps to get the
demo setup running with default settings. You’ll need a working
http://java.sun.com/javase/downloads/index.jsp[Java runtime] and
http://tomcat.apache.org/download-80.cgi[Apache Tomcat] installation
(actually, any web container would work since we only rely on the
servlet capability. But we test on Tomcat primarily).

* Copy the downloaded activiti-app.war to the webapps directory of
Tomcat.
* Start Tomcat by running the startup.bat or startup.sh scripts in the
bin folder of Tomcat
* When Tomcat is started open your browser and go to
http://localhost:8080/activiti-app[]http://localhost:8080/activiti-app.
Login with admin and password test.

That’s it! The Activiti UI application uses an in-memory H2 database by
default, if you want to use another database configuration please read
link:#activiti.setup[the longer version].

[[activiti.setup]]
=== 2.2. Activiti setup

To install Activiti you’ll need a working
http://java.sun.com/javase/downloads/index.jsp[Java runtime] and
http://tomcat.apache.org/download-70.cgi[Apache Tomcat] installation.
Also make sure that the _JAVA_HOME_ system variable is correctly set.
The way to do this depends on your operating system.

To get the Activiti UI and REST web applications running just copy the
WARs downloaded from the Activiti download page to the `webapps` folder
in your Tomcat installation directory. By default the UI application
runs with an in-memory database.

Demo user:

[width="100%",cols="34%,33%,33%",options="header",]
|===
|UserId |Password |Security roles
|admin |test |admin
|===

Now you can access following web application:

[width="100%",cols="34%,33%,33%",options="header",]
|===
|Webapp Name |URL |Description
|Activiti UI
|http://localhost:8080/activiti-app[]http://localhost:8080/activiti-app
|The process engine user console. Use this tool to start new processes,
assign tasks, view and claim tasks, etc.
|===

Note that the Activiti UI app demo setup is a way of showing the
capabilities and functionality of Activiti as easily and as fast as
possible. This does however, *not* mean that it is the only way of using
Activiti. As Activiti is _just a jar_, it can be embedded in any Java
environment: with swing or on a Tomcat, JBoss, WebSphere, etc. Or you
could very well choose to run Activiti as a typical, standalone BPM
server. If it is possible in Java, it is possible with Activiti!

[[activiti.setup.database]]
=== 2.3. Activiti database setup

As said in the one minute demo setup, the Activiti UI app runs an
in-memory H2 database by default. To run the Activiti UI app with a
standalone H2 or another database the activiti-app.properties in the
WEB-INF/classes/META-INF/activiti-app of the Activiti UI web application
should be changed.

[[getting.started.including.libs]]
=== 2.4. Include the Activiti jar and its dependencies

To include the Activiti jar and its dependent libraries, we advise using
http://maven.apache.org/[Maven] (or http://ant.apache.org/ivy/[Ivy]), as
it simplifies dependency management on both our and your side a lot.
Follow the instructions at
http://www.activiti.org/community.html#maven.repository to include the
necessary jars in your environment.

Alternatively, if you don’t want to use Maven you can include the jars
in your project yourself. The Activiti download zip contains a folder
`libs` which contain all the Activiti jars (and the source jars). The
dependencies are not shipped this way. The required dependencies of the
Activiti engine are (generated using `mvn dependency:tree`):

....
org.activiti:activiti-engine:jar:6.x
+- org.activiti:activiti-bpmn-converter:jar:6.x:compile
|  \- org.activiti:activiti-bpmn-model:jar:6.x:compile
|     +- com.fasterxml.jackson.core:jackson-core:jar:2.2.3:compile
|     \- com.fasterxml.jackson.core:jackson-databind:jar:2.2.3:compile
|        \- com.fasterxml.jackson.core:jackson-annotations:jar:2.2.3:compile
+- org.activiti:activiti-process-validation:jar:6.x:compile
+- org.activiti:activiti-image-generator:jar:6.x:compile
+- org.apache.commons:commons-email:jar:1.2:compile
|  +- javax.mail:mail:jar:1.4.1:compile
|  \- javax.activation:activation:jar:1.1:compile
+- org.apache.commons:commons-lang3:jar:3.3.2:compile
+- org.mybatis:mybatis:jar:3.3.0:compile
+- org.springframework:spring-beans:jar:4.1.6.RELEASE:compile
|  \- org.springframework:spring-core:jar:4.1.6.RELEASE:compile
+- joda-time:joda-time:jar:2.6:compile
+- org.slf4j:slf4j-api:jar:1.7.6:compile
+- org.slf4j:jcl-over-slf4j:jar:1.7.6:compile
....

Note: the mail jars are only needed if you are using the
link:#bpmnEmailTask[mail service task].

All the dependencies can easily be downloaded using
`mvn dependency:copy-dependencies` on a module of the
https://github.com/Activiti/Activiti[Activiti source code].

[[getting.started.next.steps]]
=== 2.5. Next steps

Playing around with the link:#activitiUI[Activiti UI] web application is
a good way to get familiar with the Activiti concepts and functionality.
However, the main purpose of Activiti is of course to enable powerful
BPM and workflow capabilities in your own application. The following
chapters will help you to get familiar with how to use Activiti
programmatically in your environment:

* link:#configuration[The chapter on configuration] will teach you how
to set up Activiti and how to obtain an instance of the `ProcessEngine`
class which is your central access point to all the engine functionality
of Activiti. *link:#chapterApi[The API chapter] will guide you through
the services which form Activiti’s API. These services offer the
Activiti engine functionality in a convenient yet powerful way and can
be used in any Java environment. *Interested in getting insight on BPMN
2.0, the format in which processes for the Activiti engine are written?
Then continue on to the link:#bpmn20[BPMN 2.0 section].

[[_configuration]]
== 3. Configuration

[[configuration]]
=== 3.1. Creating a ProcessEngine

The Activiti process engine is configured through an XML file called
`activiti.cfg.xml`. Note that this is *not* applicable if you’re using
link:#springintegration[the Spring style of building a process engine].

The easiest way to obtain a `ProcessEngine`, is to use the
`org.activiti.engine.ProcessEngines` class:

[source,pygments,highlight]
----
1
----

[.tok-n]#ProcessEngine# [.tok-n]#processEngine# [.tok-o]#=#
[.tok-n]#ProcessEngines#[.tok-o]#.#[.tok-na]#getDefaultProcessEngine#[.tok-o]#()#

This will look for an `activiti.cfg.xml` file on the classpath and
construct an engine based on the configuration in that file. The
following snippet shows an example configuration. The following sections
will give a detailed overview of the configuration properties.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
----

[.tok-nt]#<beans#
[.tok-na]#xmlns=#[.tok-s]#"http://www.springframework.org/schema/beans"#
[.tok-na]#xmlns:xsi=#[.tok-s]#"http://www.w3.org/2001/XMLSchema-instance"#
[.tok-na]#xsi:schemaLocation=#[.tok-s]#"http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd"#[.tok-nt]#>#
[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"processEngineConfiguration"#
[.tok-na]#class=#[.tok-s]#"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"#[.tok-nt]#>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"jdbcUrl"#
[.tok-na]#value=#[.tok-s]#"jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000"#
[.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"jdbcDriver"#
[.tok-na]#value=#[.tok-s]#"org.h2.Driver"# [.tok-nt]#/>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"jdbcUsername"#
[.tok-na]#value=#[.tok-s]#"sa"# [.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"jdbcPassword"# [.tok-na]#value=#[.tok-s]#""#
[.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"databaseSchemaUpdate"#
[.tok-na]#value=#[.tok-s]#"true"# [.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"asyncExecutorActivate"#
[.tok-na]#value=#[.tok-s]#"false"# [.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"mailServerHost"#
[.tok-na]#value=#[.tok-s]#"mail.my-corp.com"# [.tok-nt]#/>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"mailServerPort"#
[.tok-na]#value=#[.tok-s]#"5025"# [.tok-nt]#/># [.tok-nt]#</bean>#
[.tok-nt]#</beans>#

Note that the configuration XML is in fact a Spring configuration. *This
does not mean that Activiti can only be used in a Spring environment!*
We are simply leveraging the parsing and dependency injection
capabilities of Spring internally for building up the engine.

The ProcessEngineConfiguration object can also be created
programmatically using the configuration file. It is also possible to
use a different bean id (e.g. see line 3).

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-n]#ProcessEngineConfiguration#[.tok-o]#.#[.tok-na]#createProcessEngineConfigurationFromResourceDefault#[.tok-o]#();#
[.tok-n]#ProcessEngineConfiguration#[.tok-o]#.#[.tok-na]#createProcessEngineConfigurationFromResource#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#resource#[.tok-o]#);#
[.tok-n]#ProcessEngineConfiguration#[.tok-o]#.#[.tok-na]#createProcessEngineConfigurationFromResource#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#resource#[.tok-o]#,# [.tok-n]#String#
[.tok-n]#beanName#[.tok-o]#);#
[.tok-n]#ProcessEngineConfiguration#[.tok-o]#.#[.tok-na]#createProcessEngineConfigurationFromInputStream#[.tok-o]#(#[.tok-n]#InputStream#
[.tok-n]#inputStream#[.tok-o]#);#
[.tok-n]#ProcessEngineConfiguration#[.tok-o]#.#[.tok-na]#createProcessEngineConfigurationFromInputStream#[.tok-o]#(#[.tok-n]#InputStream#
[.tok-n]#inputStream#[.tok-o]#,# [.tok-n]#String#
[.tok-n]#beanName#[.tok-o]#);#

It is also possible not to use a configuration file, and create a
configuration based on defaults (see link:#configurationClasses[the
different supported classes] for more information).

[source,pygments,highlight]
----
1
2
----

[.tok-n]#ProcessEngineConfiguration#[.tok-o]#.#[.tok-na]#createStandaloneProcessEngineConfiguration#[.tok-o]#();#
[.tok-n]#ProcessEngineConfiguration#[.tok-o]#.#[.tok-na]#createStandaloneInMemProcessEngineConfiguration#[.tok-o]#();#

All these `ProcessEngineConfiguration.createXXX()` methods return a
`ProcessEngineConfiguration` that can further be tweaked if needed.
After calling the `buildProcessEngine()` operation, a `ProcessEngine` is
created:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-n]#ProcessEngine# [.tok-n]#processEngine# [.tok-o]#=#
[.tok-n]#ProcessEngineConfiguration#[.tok-o]#.#[.tok-na]#createStandaloneInMemProcessEngineConfiguration#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#setDatabaseSchemaUpdate#[.tok-o]#(#[.tok-n]#ProcessEngineConfiguration#[.tok-o]#.#[.tok-na]#DB_SCHEMA_UPDATE_FALSE#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#setJdbcUrl#[.tok-o]#(#[.tok-s]#"jdbc:h2:mem:my-own-db;DB_CLOSE_DELAY=1000"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#setAsyncExecutorActivate#[.tok-o]#(#[.tok-kc]#false#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#buildProcessEngine#[.tok-o]#();#

[[configurationRoot]]
== 3.2. ProcessEngineConfiguration bean

The `activiti.cfg.xml` must contain a bean that has the id
`'processEngineConfiguration'`.

[source,pygments,highlight]
----
1
----

[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"processEngineConfiguration"#
[.tok-na]#class=#[.tok-s]#"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"#[.tok-nt]#>#

This bean is then used to construct the `ProcessEngine`. There are
multiple classes available that can be used to define the
`processEngineConfiguration`. These classes represent different
environments, and set defaults accordingly. It’s a best practice to
select the class the matches (the most) your environment, to minimalise
the number of properties needed to configure the engine. The following
classes are currently available (more will follow in future releases):
[#configurationClasses]##

* *org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration*:
the process engine is used in a standalone way. Activiti will take care
of the transactions. By default, the database will only be checked when
the engine boots (and an exception is thrown if there is no Activiti
schema or the schema version is incorrect).
* *org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration*:
this is a convenience class for unit testing purposes. Activiti will
take care of the transactions. An H2 in-memory database is used by
default. The database will be created and dropped when the engine boots
and shuts down. When using this, probably no additional configuration is
needed (except when using for example the job executor or mail
capabilities).
* *org.activiti.spring.SpringProcessEngineConfiguration*: To be used
when the process engine is used in a Spring environment. See
link:#springintegration[the Spring integration section] for more
information.
* *org.activiti.engine.impl.cfg.JtaProcessEngineConfiguration*: To be
used when the engine runs in standalone mode, with JTA transactions.

[[databaseConfiguration]]
== 3.3. Database configuration

There are two ways to configure the database that the Activiti engine
will use. The first option is to define the JDBC properties of the
database:

* *jdbcUrl*: JDBC URL of the database.
* *jdbcDriver*: implementation of the driver for the specific database
type.
* *jdbcUsername*: username to connect to the database.
* *jdbcPassword*: password to connect to the database.

The data source that is constructed based on the provided JDBC
properties will have the default http://www.mybatis.org/[MyBatis]
connection pool settings. The following attributes can optionally be set
to tweak that connection pool (taken from the MyBatis documentation):

* *jdbcMaxActiveConnections*: The number of active connections that the
connection pool at maximum at any time can contain. Default is 10.
* *jdbcMaxIdleConnections*: The number of idle connections that the
connection pool at maximum at any time can contain.
* *jdbcMaxCheckoutTime*: The amount of time in milliseconds a connection
can be _checked out_ from the connection pool before it is forcefully
returned. Default is 20000 (20 seconds).
* *jdbcMaxWaitTime*: This is a low level setting that gives the pool a
chance to print a log status and re-attempt the acquisition of a
connection in the case that it is taking unusually long (to avoid
failing silently forever if the pool is misconfigured) Default is 20000
(20 seconds).

Example database configuration:

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"jdbcUrl"#
[.tok-na]#value=#[.tok-s]#"jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000"#
[.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"jdbcDriver"#
[.tok-na]#value=#[.tok-s]#"org.h2.Driver"# [.tok-nt]#/>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"jdbcUsername"#
[.tok-na]#value=#[.tok-s]#"sa"# [.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"jdbcPassword"# [.tok-na]#value=#[.tok-s]#""#
[.tok-nt]#/>#

Our benchmarks have shown that the MyBatis connection pool is not the
most efficient or resilient when dealing with a lot of concurrent
requests. As such, it is advised to us a `javax.sql.DataSource`
implementation and inject it into the process engine configuration (For
example DBCP, C3P0, Hikari, Tomcat Connection Pool, etc.):

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
----

[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"dataSource"#
[.tok-na]#class=#[.tok-s]#"org.apache.commons.dbcp.BasicDataSource"#
[.tok-nt]#># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"driverClassName"#
[.tok-na]#value=#[.tok-s]#"com.mysql.jdbc.Driver"# [.tok-nt]#/>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"url"#
[.tok-na]#value=#[.tok-s]#"jdbc:mysql://localhost:3306/activiti"#
[.tok-nt]#/># [.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"username"#
[.tok-na]#value=#[.tok-s]#"activiti"# [.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"password"#
[.tok-na]#value=#[.tok-s]#"activiti"# [.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"defaultAutoCommit"#
[.tok-na]#value=#[.tok-s]#"false"# [.tok-nt]#/># [.tok-nt]#</bean>#
[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"processEngineConfiguration"#
[.tok-na]#class=#[.tok-s]#"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"#[.tok-nt]#>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"dataSource"#
[.tok-na]#ref=#[.tok-s]#"dataSource"# [.tok-nt]#/># ...

Note that Activiti does not ship with a library that allows to define
such a data source. So you have to make sure that the libraries are on
your classpath.

The following properties can be set, regardless of whether you are using
the JDBC or data source approach:

* *databaseType*: it’s normally not necessary to specify this property
as it is automatically analyzed from the database connection metadata.
Should only be specified in case automatic detection fails. Possible
values: \{h2, mysql, oracle, postgres, mssql, db2}. This setting will
determine which create/drop scripts and queries will be used. See
link:#supporteddatabases[the _supported databases_ section] for an
overview of which types are supported.
* *databaseSchemaUpdate*: allows to set the strategy to handle the
database schema on process engine boot and shutdown.
+
** `false` (default): Checks the version of the DB schema against the
library when the process engine is being created and throws an exception
if the versions don’t match.
** `true`: Upon building the process engine, a check is performed and an
update of the schema is performed if it is necessary. If the schema
doesn’t exist, it is created.
** `create-drop`: Creates the schema when the process engine is being
created and drops the schema when the process engine is being closed.

[[jndiDatasourceConfig]]
== 3.4. JNDI Datasource Configuration

By default, the database configuration for Activiti is contained within
the db.properties files in the WEB-INF/classes of each web application.
This isn’t always ideal because it requires users to either modify the
db.properties in the Activiti source and recompile the war file, or
explode the war and modify the db.properties on every deployment.

By using JNDI (Java Naming and Directory Interface) to obtain the
database connection, the connection is fully managed by the Servlet
Container and the configuration can be managed outside the war
deployment. This also allows more control over the connection parameters
than what is provided by the db.properties file.

[[jndi_configuration]]
=== 3.4.1. Configuration

Configuration of the JNDI datasource will differ depending on what
servlet container application you are using. The instructions below will
work for Tomcat, but for other container applications, please refer to
the documentation for your container app.

If using Tomcat, the JNDI resource is configured within
$CATALINA_BASE/conf/[enginename]/[hostname]/[warname].xml (for the
Activiti UI this will usually be
$CATALINA_BASE/conf/Catalina/localhost/activiti-app.xml). The default
context is copied from the Activiti war file when the application is
first deployed, so if it already exists, you will need to replace it. To
change the JNDI resource so that the application connects to MySQL
instead of H2, for example, change the file to the following:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
----

[.tok-cp]#<?xml version="1.0" encoding="UTF-8"?># [.tok-nt]#<Context#
[.tok-na]#antiJARLocking=#[.tok-s]#"true"#
[.tok-na]#path=#[.tok-s]#"/activiti-app"#[.tok-nt]#>#
[.tok-nt]#<Resource# [.tok-na]#auth=#[.tok-s]#"Container"#
[.tok-na]#name=#[.tok-s]#"jdbc/activitiDB"#
[.tok-na]#type=#[.tok-s]#"javax.sql.DataSource"#
[.tok-na]#description=#[.tok-s]#"JDBC DataSource"#
[.tok-na]#url=#[.tok-s]#"jdbc:mysql://localhost:3306/activiti"#
[.tok-na]#driverClassName=#[.tok-s]#"com.mysql.jdbc.Driver"#
[.tok-na]#username=#[.tok-s]#"sa"# [.tok-na]#password=#[.tok-s]#""#
[.tok-na]#defaultAutoCommit=#[.tok-s]#"false"#
[.tok-na]#initialSize=#[.tok-s]#"5"# [.tok-na]#maxWait=#[.tok-s]#"5000"#
[.tok-na]#maxActive=#[.tok-s]#"120"#
[.tok-na]#maxIdle=#[.tok-s]#"5"#[.tok-nt]#/># [.tok-nt]#</Context>#

[[_jndi_properties]]
== 3.4.2. JNDI properties

To configure a JNDI Datasource, use following properties in the
properties file for the Activiti UI:

* datasource.jndi.name: the JNDI name of the Datasource.
* datasource.jndi.resourceRef: Set whether the lookup occurs in a J2EE
container, i.e. if the prefix "java:comp/env/" needs to be added if the
JNDI name doesn’t already contain it. Default is "true".

[[supporteddatabases]]
== 3.5. Supported databases

Listed below are the types (case sensitive!) that Activiti uses to refer
to databases.

[width="100%",cols="34%,33%,33%",options="header",]
|===
|Activiti database type |Example JDBC URL |Notes
|h2 |jdbc:h2:tcp://localhost/activiti |Default configured database

|mysql |jdbc:mysql://localhost:3306/activiti?autoReconnect=true |Tested
using mysql-connector-java database driver

|oracle |jdbc:oracle:thin:@localhost:1521:xe |

|postgres |jdbc:postgresql://localhost:5432/activiti |

|db2 |jdbc:db2://localhost:50000/activiti |

|mssql |jdbc:sqlserver://localhost:1433;databaseName=activiti
(jdbc.driver=com.microsoft.sqlserver.jdbc.SQLServerDriver) _OR_
jdbc:jtds:sqlserver://localhost:1433/activiti
(jdbc.driver=net.sourceforge.jtds.jdbc.Driver) |Tested using Microsoft
JDBC Driver 4.0 (sqljdbc4.jar) and JTDS Driver
|===

[[creatingDatabaseTable]]
== 3.6. Creating the database tables

The easiest way to create the database tables for your database is to:

* Add the activiti-engine jars to your classpath
* Add a suitable database driver
* Add an Activiti configuration file (_activiti.cfg.xml_) to your
classpath, pointing to your database (see
link:#databaseConfiguration[database configuration section])
* Execute the main method of the _DbSchemaCreate_ class

However, often only database administrators can execute DDL statements
on a database. On a production system, this is also the wisest of
choices. The SQL DDL statements can be found on the Activiti downloads
page or inside the Activiti distribution folder, in the `database`
subdirectory. The scripts are also in the engine jar
(_activiti-engine-x.jar_), in the package _org/activiti/db/create_ (the
_drop_ folder contains the drop statements). The SQL files are of the
form

....
activiti.{db}.{create|drop}.{type}.sql
....

Where _db_ is any of the link:#supporteddatabases[supported databases]
and _type_ is

* *engine:* the tables needed for engine execution. Required.
* *identity:* the tables containing users, groups and memberships of
users to groups. These tables are optional and should be used when using
the default identity management as shipped with the engine.
* *history:* the tables that contain the history and audit information.
Optional: not needed when history level is set to _none_. Note that this
will also disable some features (such as commenting on tasks) which
store the data in the history database.

*Note for MySQL users:* MySQL version lower than 5.6.4 has no support
for timestamps or dates with millisecond precision. To make things even
worse, some version will throw an exception when trying to create such a
column but other versions don’t. When doing auto-creation/upgrade, the
engine will change the DDL when executing it. When using the DDL file
approach, both a regular version and a special file with _mysql55_ in it
are available (this applies on anything lower than 5.6.4). This latter
file will have column types with no millisecond precision in it.

Concretely, the following applies for MySQL version

* *<5.6:* No millisecond precision available. DDL files available (look
for files containing _mysql55_). Auto creation/update will work out of
the box.
* *5.6.0 - 5.6.3:* No millisecond precision available. Auto
creation/update will NOT work. It is advised to upgrade to a newer
database version anyway. DDL files for _mysql 5.5_ could be used if
really needed.
* *5.6.4+:* Millisecond precision available. DDL files available
(default file containing _mysql_). Auto creation/update works out of the
box.

Do note that in the case of upgrading the MySQL database later on and
the Activiti tables are already created/upgraded, the column type change
will have to be done manually!

[[database.tables.explained]]
== 3.7. Database table names explained

The database names of Activiti all start with *ACT_*. The second part is
a two-character identification of the use case of the table. This use
case will also roughly match the service API.

* *ACT_RE_**: _RE_ stands for `repository`. Tables with this prefix
contain _static_ information such as process definitions and process
resources (images, rules, etc.).
* *ACT_RU_**: _RU_ stands for `runtime`. These are the runtime tables
that contain the runtime data of process instances, user tasks,
variables, jobs, etc. Activiti only stores the runtime data during
process instance execution, and removes the records when a process
instance ends. This keeps the runtime tables small and fast.
* *ACT_ID_**: _ID_ stands for `identity`. These tables contain identity
information, such as users, groups, etc.
* *ACT_HI_**: _HI_ stands for `history`. These are the tables that
contain historic data, such as past process instances, variables, tasks,
etc.
* *ACT_GE_**: `general` data, which is used in various use cases.

[[databaseUpgrade]]
== 3.8. Database upgrade

Make sure you make a backup of your database (using your database backup
capabilities) before you run an upgrade.

By default, a version check will be performed each time a process engine
is created. This typically happens once at boot time of your application
or of the Activiti webapps. If the Activiti library notices a difference
between the library version and the version of the Activiti database
tables, then an exception is thrown.

To upgrade, you have to start with putting the following configuration
property in your activiti.cfg.xml configuration file:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-nt]#<beans# [.tok-nt]#># [.tok-nt]#<bean#
[.tok-na]#id=#[.tok-s]#"processEngineConfiguration"#
[.tok-na]#class=#[.tok-s]#"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"#[.tok-nt]#>#
[.tok-c]#<!-- ... --># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"databaseSchemaUpdate"#
[.tok-na]#value=#[.tok-s]#"true"# [.tok-nt]#/># [.tok-c]#<!-- ... -->#
[.tok-nt]#</bean># [.tok-nt]#</beans>#

*Also, include a suitable database driver for your database to the
classpath.* Upgrade the Activiti libraries in your application. Or start
up a new version of Activiti and point it to a database that contains an
older version. With `databaseSchemaUpdate` set to `true`, Activiti will
automatically upgrade the DB schema to the newer version the first time
when it notices that libraries and DB schema are out of sync.

*As an alternative you can also run the upgrade DDL statements.* It’s
also possible to run the upgrade database scripts, available on the
Activiti downloads page.

[[jobExecutorConfiguration]]
== 3.9. Job Executor (since version 6.0.0)

The async executor of Activiti 5 is the only available job executor in
Activiti 6 as it is a more performant and more database friendly way of
executing asynchronous jobs in the Activiti Engine. The old job executor
of Activiti 5 is removed. More information can be found in the advanced
section of the user guide.

Moreover, if running under Java EE 7, JSR-236 compliant
`ManagedAsyncJobExecutor` can be used for letting the container manage
the threads. In order to enable them, the thread factory should be
passed in the configuration as follows:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"threadFactory"#
[.tok-na]#class=#[.tok-s]#"org.springframework.jndi.JndiObjectFactoryBean"#[.tok-nt]#>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"jndiName"#
[.tok-na]#value=#[.tok-s]#"java:jboss/ee/concurrency/factory/default"#
[.tok-nt]#/># [.tok-nt]#</bean># [.tok-nt]#<bean#
[.tok-na]#id=#[.tok-s]#"customJobExecutor"#
[.tok-na]#class=#[.tok-s]#"org.activiti.engine.impl.jobexecutor.ManagedAsyncJobExecutor"#[.tok-nt]#>#
[.tok-c]#<!-- ... --># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"threadFactory"#
[.tok-na]#ref=#[.tok-s]#"threadFactory"# [.tok-nt]#/># [.tok-c]#<!-- ...
--># [.tok-nt]#</bean>#

The managed implementation fall back to their default counterparts if
the thread factory is not specified.

[[_job_executor_activation]]
== 3.10. Job executor activation

The `AsyncExecutor` is a component that manages a thread pool to fire
timers and other asynchronous tasks. Other implementations are possible
(for example using a message queue, see the advanced section of the user
guide).

By default, the `AsyncExecutor` is not activated and not started. With
the following configuration the async executor can be started together
with the Activiti Engine.

[source,pygments,highlight]
----
1
----

[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"asyncExecutorActivate"#
[.tok-na]#value=#[.tok-s]#"true"# [.tok-nt]#/>#

The property asyncExecutorActivate instructs the Activiti Engine to
startup the Async executor at startup.

[[mailServerConfiguration]]
== 3.11. Mail server configuration

Configuring a mail server is optional. Activiti supports sending e-mails
in business processes. To actually send an e-mail, a valid SMTP mail
server configuration is required. See the
link:#bpmnEmailTaskServerConfiguration[e-mail task] for the
configuration options.

[[historyConfiguration]]
== 3.12. History configuration

Customizing the configuration of history storage is optional. This
allows you to tweak settings that influence the link:#history[history
capabilities] of the engine. See link:#historyConfig[history
configuration] for more details.

[source,pygments,highlight]
----
1
----

[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"history"#
[.tok-na]#value=#[.tok-s]#"audit"# [.tok-nt]#/>#

[[exposingConfigurationBeans]]
== 3.13. Exposing configuration beans in expressions and scripts

By default, all beans that you specify in the `activiti.cfg.xml`
configuration or in your own Spring configuration file are available to
expressions and in the scripts. If you want to limit the visibility of
beans in your configuration file, you can configure a property called
`beans` in your process engine configuration. The beans property in
`ProcessEngineConfiguration` is a map. When you specify that property,
only beans specified in that map will be visible to expressions and
scripts. The exposed beans will be exposed with the names as you specify
in that map.

[[processDefinitionCacheConfiguration]]
== 3.14. Deployment cache configuration

All process definition are cached (after they’re parsed) to avoid
hitting the database every time a process definition is needed and
because process definition data doesn’t change. By default, there is no
limit on this cache. To limit the process definition cache, add
following property

[source,pygments,highlight]
----
1
----

[.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"processDefinitionCacheLimit"#
[.tok-na]#value=#[.tok-s]#"10"# [.tok-nt]#/>#

Setting this property will swap the default hashmap cache with a LRU
cache that has the provided hard limit. Of course, the _best_ value of
this property depends on the total amount of process definitions stored
and the number of process definitions actually used at runtime by all
the runtime process instances.

You can also inject your own cache implementation. This must be a bean
that implements the
org.activiti.engine.impl.persistence.deploy.DeploymentCache interface:

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"processDefinitionCache"#[.tok-nt]#>#
[.tok-nt]#<bean# [.tok-na]#class=#[.tok-s]#"org.activiti.MyCache"#
[.tok-nt]#/># [.tok-nt]#</property>#

There is a similar property called `knowledgeBaseCacheLimit` and
`knowledgeBaseCache` for configuring the rules cache. This is only
needed when you use the rules task in your processes.

[[loggingConfiguration]]
== 3.15. Logging

All logging (activiti, spring, mybatis, …​) is routed through SLF4J and
allows for selecting the logging-implementation of your choice.

*By default no SFL4J-binding jar is present in the activiti-engine
dependencies, this should be added in your project in order to use the
logging framework of your choice.* If no implementation jar is added,
SLF4J will use a NOP-logger, not logging anything at all, other than a
warning that nothing will be logged. For more info on these bindings
http://www.slf4j.org/codes.html#StaticLoggerBinder[]http://www.slf4j.org/codes.html#StaticLoggerBinder.

With Maven, add for example a dependency like this (here using log4j),
note that you still need to add a version:

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-nt]#<dependency>#
[.tok-nt]##<groupId>##org.slf4j[.tok-nt]##</groupId>##
[.tok-nt]##<artifactId>##slf4j-log4j12[.tok-nt]##</artifactId>##
[.tok-nt]#</dependency>#

The activiti-ui and activiti-rest webapps are configured to use
Log4j-binding. Log4j is also used when running the tests for all the
activiti-* modules.

*Important note when using a container with commons-logging in the
classpath:* In order to route the spring-logging through SLF4J, a bridge
is used (see
http://www.slf4j.org/legacy.html#jclOverSLF4J[]http://www.slf4j.org/legacy.html#jclOverSLF4J).
If your container provides a commons-logging implementation, please
follow directions on this page:
http://www.slf4j.org/codes.html#release[]http://www.slf4j.org/codes.html#release
to ensure stability.

Example when using Maven (version omitted):

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-nt]#<dependency>#
[.tok-nt]##<groupId>##org.slf4j[.tok-nt]##</groupId>##
[.tok-nt]##<artifactId>##jcl-over-slf4j[.tok-nt]##</artifactId>##
[.tok-nt]#</dependency>#

[[MDC]]
== 3.16. Mapped Diagnostic Contexts

Activiti supports Mapped Diagnostic Contexts feature of SLF4j. These
basic information are passed to the underlying logger along with what is
going to be logged:

* processDefinition Id as mdcProcessDefinitionID
* processInstance Id as mdcProcessInstanceID
* execution Id as mdcExecutionId

None of these information are logged by default. The logger can be
configured to show them in desired format, extra to the usual logged
messages. For example in Log4j the following sample layout definition
causes the logger to show the above mentioned information:

[source,pygments,highlight]
----
1
2
----

[.tok-na]#log4j.appender.consoleAppender.layout.ConversionPattern#[.tok-o]#=#[.tok-s]#ProcessDefinitionId=%X\{mdcProcessDefinitionID}#
[.tok-na]#executionId#[.tok-o]#=#[.tok-s]#%X\{mdcExecutionId}
mdcProcessInstanceID=%X\{mdcProcessInstanceID}
mdcBusinessKey=%X\{mdcBusinessKey} %m%n#

This is useful when the logs contain information that needs to checked
in real time, by means of a log analyzer for example.

[[eventDispatcher]]
== 3.17. Event handlers

The event mechanism in the Activiti engine allows you to get notified
when various events occur within the engine. Take a look at
link:#eventDispatcherEventTypes[all supported event types] for an
overview of the events available.

It’s possible to register a listener for certain types of events as
opposed to getting notified when any type of event is dispatched. You
can either add engine-wide event listeners
link:#eventDispatcherConfiguration[through the configuration], add
engine-wide event listeners link:#eventDispatcherConfigurationRuntime[at
runtime using the API] or add event-listeners to
link:#eventDispatcherConfigurationProcessDefinition[specific process
definitions in the BPMN XML].

All events dispatched are a subtype of
`org.activiti.engine.delegate.event.ActivitiEvent`. The event exposes
(if available) the `type`, `executionId`, `processInstanceId` and
`processDefinitionId`. Certain events contain additional context related
to the event that occurred, additional information about additional
payload can be found in the list of link:#eventDispatcherEventTypes[all
supported event types].

[[eventDispatcherListener]]
=== 3.17.1. Event listener implementation

The only requirement an event-listener has, is to implement
`org.activiti.engine.delegate.event.ActivitiEventListener`. Below is an
example implementation of a listener, which outputs all events received
to the standard-out, with exception of events related to job-execution:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
----

[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#MyEventListener#
[.tok-kd]#implements# [.tok-n]#ActivitiEventListener# [.tok-o]#\{#
[.tok-nd]#@Override# [.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#onEvent#[.tok-o]#(#[.tok-n]#ActivitiEvent#
[.tok-n]#event#[.tok-o]#)# [.tok-o]#\{# [.tok-k]#switch#
[.tok-o]#(#[.tok-n]#event#[.tok-o]#.#[.tok-na]#getType#[.tok-o]#())#
[.tok-o]#\{# [.tok-k]#case# [.tok-n]#JOB_EXECUTION_SUCCESS#[.tok-o]#:#
[.tok-n]#System#[.tok-o]#.#[.tok-na]#out#[.tok-o]#.#[.tok-na]#println#[.tok-o]#(#[.tok-s]#"A
job well done!"#[.tok-o]#);# [.tok-k]#break#[.tok-o]#;# [.tok-k]#case#
[.tok-n]#JOB_EXECUTION_FAILURE#[.tok-o]#:#
[.tok-n]#System#[.tok-o]#.#[.tok-na]#out#[.tok-o]#.#[.tok-na]#println#[.tok-o]#(#[.tok-s]#"A
job has failed..."#[.tok-o]#);# [.tok-k]#break#[.tok-o]#;# [.tok-nl]#
default:#
[.tok-n]#System#[.tok-o]#.#[.tok-na]#out#[.tok-o]#.#[.tok-na]#println#[.tok-o]#(#[.tok-s]#"Event
received: "# [.tok-o]#+#
[.tok-n]#event#[.tok-o]#.#[.tok-na]#getType#[.tok-o]#());# [.tok-o]#}#
[.tok-o]#}# [.tok-nd]#@Override# [.tok-kd]#public# [.tok-kt]#boolean#
[.tok-nf]#isFailOnException#[.tok-o]#()# [.tok-o]#\{# [.tok-c1]#// The
logic in the onEvent method of this listener is not critical,
exceptions# [.tok-c1]#// can be ignored if logging fails...#
[.tok-k]#return# [.tok-kc]#false#[.tok-o]#;# [.tok-o]#}# [.tok-o]#}#

The `isFailOnException()` method determines the behaviour in case the
`onEvent(..)` method throws an exception when an event is dispatched. In
case `false` is returned, the exception is ignored. When `true` is
returned, the exception is not ignored and bubbles up, effectively
failing the current ongoing command. In case the event was part of an
API-call (or any other transactional operation, e.g. job-execution), the
transaction will be rolled back. In case the behaviour in the
event-listener is not business-critical, it’s recommended to return
`false`.

There are a few base implementations provided by Activiti to facilitate
common use cases of event-listeners. These can be used as base-class or
as an example listener implementation:

* *org.activiti.engine.delegate.event.BaseEntityEventListener*: An
event-listener base-class that can be used to listen for entity-related
events for a specific type of entity or for all entities. It hides away
the type-checking and offers 4 methods that should be overridden:
`onCreate(..)`, `onUpdate(..)` and `onDelete(..)` when an entity is
created, updated or deleted. For all other entity-related events, the
`onEntityEvent(..) `is called.

[[eventDispatcherConfiguration]]
== 3.17.2. Configuration and setup

If an event-listener is configured in the process engine configuration,
it will be active when the process engine starts and will remain active
after subsequent reboots of the engine.

The property `eventListeners` expects a list of
`org.activiti.engine.delegate.event.ActivitiEventListener` instances. As
usual, you can either declare an inline bean definition or use a `ref`
to an existing bean instead. The snippet below adds an event-listener to
the configuration that is notified when any event is dispatched,
regardless of its type:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
----

[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"processEngineConfiguration"#
[.tok-na]#class=#[.tok-s]#"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"#[.tok-nt]#>#
... [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"eventListeners"#[.tok-nt]#># [.tok-nt]#<list>#
[.tok-nt]#<bean#
[.tok-na]#class=#[.tok-s]#"org.activiti.engine.example.MyEventListener"#
[.tok-nt]#/># [.tok-nt]#</list># [.tok-nt]#</property>#
[.tok-nt]#</bean>#

To get notified when certain types of events get dispatched, use the
`typedEventListeners` property, which expects a map. The key of a
map-entry is a comma-separated list of event-names (or a single
event-name). The value of a map-entry is a list of
`org.activiti.engine.delegate.event.ActivitiEventListener` instances.
The snippet below adds an event-listener to the configuration, that is
notified when a job execution was successful or failed:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
----

[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"processEngineConfiguration"#
[.tok-na]#class=#[.tok-s]#"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"#[.tok-nt]#>#
... [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"typedEventListeners"#[.tok-nt]#>#
[.tok-nt]#<map># [.tok-nt]#<entry#
[.tok-na]#key=#[.tok-s]#"JOB_EXECUTION_SUCCESS,JOB_EXECUTION_FAILURE"#
[.tok-nt]#># [.tok-nt]#<list># [.tok-nt]#<bean#
[.tok-na]#class=#[.tok-s]#"org.activiti.engine.example.MyJobEventListener"#
[.tok-nt]#/># [.tok-nt]#</list># [.tok-nt]#</entry># [.tok-nt]#</map>#
[.tok-nt]#</property># [.tok-nt]#</bean>#

The order of dispatching events is determined on the order the listeners
were added. First, all normal event-listeners are called
(`eventListeners` property) in the order they are defined in the `list`.
After that, all typed event listeners (`typedEventListeners` properties)
are called, if an event of the right type is dispatched.

[[eventDispatcherConfigurationRuntime]]
== 3.17.3. Adding listeners at runtime

It’s possible to add and remove additional event-listeners to the engine
by using the API (`RuntimeService`):

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
----

[.tok-cm]#/**# [.tok-cm]# * Adds an event-listener which will be
notified of ALL events by the dispatcher.# [.tok-cm]# * @param
listenerToAdd the listener to add# [.tok-cm]# */# [.tok-kt]#void#
[.tok-nf]#addEventListener#[.tok-o]#(#[.tok-n]#ActivitiEventListener#
[.tok-n]#listenerToAdd#[.tok-o]#);# [.tok-cm]#/**# [.tok-cm]# * Adds an
event-listener which will only be notified when an event occurs, which
type is in the given types.# [.tok-cm]# * @param listenerToAdd the
listener to add# [.tok-cm]# * @param types types of events the listener
should be notified for# [.tok-cm]# */# [.tok-kt]#void#
[.tok-nf]#addEventListener#[.tok-o]#(#[.tok-n]#ActivitiEventListener#
[.tok-n]#listenerToAdd#[.tok-o]#,#
[.tok-n]#ActivitiEventType#[.tok-o]#...# [.tok-n]#types#[.tok-o]#);#
[.tok-cm]#/**# [.tok-cm]# * Removes the given listener from this
dispatcher. The listener will no longer be notified,# [.tok-cm]# *
regardless of the type(s) it was registered for in the first place.#
[.tok-cm]# * @param listenerToRemove listener to remove# [.tok-cm]# */#
[.tok-kt]#void#
[.tok-nf]#removeEventListener#[.tok-o]#(#[.tok-n]#ActivitiEventListener#
[.tok-n]#listenerToRemove#[.tok-o]#);#

Please note that the listeners added at runtime *are not retained when
the engine is rebooted.*

[[eventDispatcherConfigurationProcessDefinition]]
== 3.17.4. Adding listeners to process definitions

It’s possible to add listeners to a specific process-definition. The
listeners will only be called for events related to the process
definition and to all events related to process instances that are
started with that specific process definition. The listener
implementations can be defined using a fully qualified classname, an
expression that resolves to a bean that implements the listener
interface or can be configured to throw a message/signal/error BPMN
event.

[[_listeners_executing_user_defined_logic]]
=== Listeners executing user-defined logic

The snippet below adds 2 listeners to a process-definition. The first
listener will receive events of any type, with a listener implementation
based on a fully-qualified class name. The second listener is only
notified when a job is successfully executed or when it failed, using a
listener that has been defined in the `beans` property of the process
engine configuration.

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-nt]#<process#
[.tok-na]#id=#[.tok-s]#"testEventListeners"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:eventListener#
[.tok-na]#class=#[.tok-s]#"org.activiti.engine.test.MyEventListener"#
[.tok-nt]#/># [.tok-nt]#<activiti:eventListener#
[.tok-na]#delegateExpression=#[.tok-s]#"$\{testEventListener}"#
[.tok-na]#events=#[.tok-s]#"JOB_EXECUTION_SUCCESS,JOB_EXECUTION_FAILURE"#
[.tok-nt]#/># [.tok-nt]#</extensionElements># ... [.tok-nt]#</process>#

For events related to entities, it’s also possible to add listeners to a
process-definition that get only notified when entity-events occur for a
certain entity type. The snippet below shows how this can be achieved.
It can be used along for ALL entity-events (first example) or for
specific event types only (second example).

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-nt]#<process#
[.tok-na]#id=#[.tok-s]#"testEventListeners"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:eventListener#
[.tok-na]#class=#[.tok-s]#"org.activiti.engine.test.MyEventListener"#
[.tok-na]#entityType=#[.tok-s]#"task"# [.tok-nt]#/>#
[.tok-nt]#<activiti:eventListener#
[.tok-na]#delegateExpression=#[.tok-s]#"$\{testEventListener}"#
[.tok-na]#events=#[.tok-s]#"ENTITY_CREATED"#
[.tok-na]#entityType=#[.tok-s]#"task"# [.tok-nt]#/>#
[.tok-nt]#</extensionElements># ... [.tok-nt]#</process>#

Supported values for the `entityType` are: `attachment`, `comment`,
`execution`, `identity-link`, `job`, `process-instance`,
`process-definition`, `task`.

[[_listeners_throwing_bpmn_events]]
== Listeners throwing BPMN events

link:#experimental[[EXPERIMENTAL]]

Another way of handling events being dispatched is to throw a BPMN
event. Please bear in mind that it only makes sense to throw BPMN-events
with certain kinds of Activiti event types. For example, throwing a BPMN
event when the process-instance is deleted will result in an error. The
snippet below shows how to throw a signal inside process-instance, throw
a signal to an external process (global), throw a message-event inside
the process-instance and throw an error-event inside the
process-instance. Instead of using the `class` or `delegateExpression`,
the attribute `throwEvent` is used, along with an additional attribute,
specific to the type of event being thrown.

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<process#
[.tok-na]#id=#[.tok-s]#"testEventListeners"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:eventListener#
[.tok-na]#throwEvent=#[.tok-s]#"signal"#
[.tok-na]#signalName=#[.tok-s]#"My signal"#
[.tok-na]#events=#[.tok-s]#"TASK_ASSIGNED"# [.tok-nt]#/>#
[.tok-nt]#</extensionElements># [.tok-nt]#</process>#

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<process#
[.tok-na]#id=#[.tok-s]#"testEventListeners"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:eventListener#
[.tok-na]#throwEvent=#[.tok-s]#"globalSignal"#
[.tok-na]#signalName=#[.tok-s]#"My signal"#
[.tok-na]#events=#[.tok-s]#"TASK_ASSIGNED"# [.tok-nt]#/>#
[.tok-nt]#</extensionElements># [.tok-nt]#</process>#

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<process#
[.tok-na]#id=#[.tok-s]#"testEventListeners"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:eventListener#
[.tok-na]#throwEvent=#[.tok-s]#"message"#
[.tok-na]#messageName=#[.tok-s]#"My message"#
[.tok-na]#events=#[.tok-s]#"TASK_ASSIGNED"# [.tok-nt]#/>#
[.tok-nt]#</extensionElements># [.tok-nt]#</process>#

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<process#
[.tok-na]#id=#[.tok-s]#"testEventListeners"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:eventListener#
[.tok-na]#throwEvent=#[.tok-s]#"error"#
[.tok-na]#errorCode=#[.tok-s]#"123"#
[.tok-na]#events=#[.tok-s]#"TASK_ASSIGNED"# [.tok-nt]#/>#
[.tok-nt]#</extensionElements># [.tok-nt]#</process>#

If additional logic is needed to decide whether or not to throw the
BPMN-event, it’s possible to extend the listener-classes provided by
Activiti. By overriding the
`isValidEvent(ActivitiEvent event) in your subclass, the BPMN-event throwing can be prevented. The classes involved are +org.activiti.engine.test.api.event.SignalThrowingEventListenerTest`,
`org.activiti.engine.impl.bpmn.helper.MessageThrowingEventListener` and
`org.activiti.engine.impl.bpmn.helper.ErrorThrowingEventListener`.

[[_notes_on_listeners_on_a_process_definition]]
== Notes on listeners on a process-definition

* Event-listeners can only be declared on the `process` element, as a
child-element of the `extensionElements`. Listeners cannot be defined on
individual activities in the process.
* Expressions used in the `delegateExpression` do not have access to the
execution-context, as other expressions (e.g. in gateways) have. They
can only reference beans defined in the `beans` property of the process
engine configuration or when using spring (and the beans property is
absent) to any spring-bean that implements the listener interface.
* When using the `class` attribute of a listener, there will only be a
single instance of that class created. Make sure the listener
implementations do not rely on member-fields or ensure safe usage from
multiple threads/contexts.
* When an illegal event-type is used in the `events` attribute or
illegal `throwEvent` value is used, an exception will be thrown when the
process-definition is deployed (effectively failing the deployment).
When an illegal value for `class` or `delegateExecution` is supplied
(either a nonexistent class, a nonexistent bean reference or a delegate
not implementing listener interface), an exception will be thrown when
the process is started (or when the first valid event for that
process-definition is dispatched to the listener). Make sure the
referenced classes are on the classpath and that the expressions resolve
to a valid instance.

[[eventDispatcherCustomEvents]]
== 3.17.5. Dispatching events through API

We opened up the event-dispatching mechanism through the API, to allow
you to dispatch custom events to any listeners that are registered in
the engine. It’s recommended (although not enforced) to only dispatch
`ActivitiEvents` with type `CUSTOM`. Dispatching the event can be done
using the `RuntimeService`:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-cm]#/**# [.tok-cm]# * Dispatches the given event to any listeners
that are registered.# [.tok-cm]# * @param event event to dispatch.#
[.tok-cm]# *# [.tok-cm]# * @throws ActivitiException if an exception
occurs when dispatching the event or when the \{@link
ActivitiEventDispatcher}# [.tok-cm]# * is disabled.# [.tok-cm]# *
@throws ActivitiIllegalArgumentException when the given event is not
suitable for dispatching.# [.tok-cm]# */# [.tok-kt]#void#
[.tok-nf]#dispatchEvent#[.tok-o]#(#[.tok-n]#ActivitiEvent#
[.tok-n]#event#[.tok-o]#);#

[[eventDispatcherEventTypes]]
== 3.17.6. Supported event types

Listed below are all event types that can occur in the engine. Each type
corresponds to an enum value in the
`org.activiti.engine.delegate.event.ActivitiEventType`.

.Table 1. Supported events
[width="100%",cols="34%,33%,33%",options="header",]
|===
|Event name |Description |Event classes
|ENGINE_CREATED |The process-engine this listener is attached to, has
been created and is ready for API-calls. |`org.activiti…​ActivitiEvent`

|ENGINE_CLOSED |The process-engine this listener is attached to, has
been closed. API-calls to the engine are no longer possible.
|`org.activiti…​ActivitiEvent`

|ENTITY_CREATED |A new entity is created. The new entity is contained in
the event. |`org.activiti…​ActivitiEntityEvent`

|ENTITY_INITIALIZED |A new entity has been created and is fully
initialized. If any children are created as part of the creation of an
entity, this event will be fired AFTER the create/initialisation of the
child entities as opposed to the `ENTITY_CREATE` event.
|`org.activiti…​ActivitiEntityEvent`

|ENTITY_UPDATED |An existing is updated. The updated entity is contained
in the event. |`org.activiti…​ActivitiEntityEvent`

|ENTITY_DELETED |An existing entity is deleted. The deleted entity is
contained in the event. |`org.activiti…​ActivitiEntityEvent`

|ENTITY_SUSPENDED |An existing entity is suspended. The suspended entity
is contained in the event. Will be dispatched for ProcessDefinitions,
ProcessInstances and Tasks. |`org.activiti…​ActivitiEntityEvent`

|ENTITY_ACTIVATED |An existing entity is activated. The activated entity
is contained in the event. Will be dispatched for ProcessDefinitions,
ProcessInstances and Tasks. |`org.activiti…​ActivitiEntityEvent`

|JOB_EXECUTION_SUCCESS |A job has been executed successfully. The event
contains the job that was executed. |`org.activiti…​ActivitiEntityEvent`

|JOB_EXECUTION_FAILURE |The execution of a job has failed. The event
contains the job that was executed and the exception.
|`org.activiti…​ActivitiEntityEvent` and
`org.activiti…​ActivitiExceptionEvent`

|JOB_RETRIES_DECREMENTED |The number of job retries have been
decremented due to a failed job. The event contains the job that was
updated. |`org.activiti…​ActivitiEntityEvent`

|TIMER_FIRED |A timer has been fired. The event contains the job that
was executed? |`org.activiti…​ActivitiEntityEvent`

|JOB_CANCELED |A job has been canceled. The event contains the job that
was canceled. Job can be canceled by API call, task was completed and
associated boundary timer was canceled, on the new process definition
deployment. |`org.activiti…​ActivitiEntityEvent`

|ACTIVITY_STARTED |An activity is starting to execute
|`org.activiti…​ActivitiActivityEvent`

|ACTIVITY_COMPLETED |An activity is completed successfully
|`org.activiti…​ActivitiActivityEvent`

|ACTIVITY_CANCELLED |An activity is going to be cancelled. There can be
three reasons for activity cancellation (MessageEventSubscriptionEntity,
SignalEventSubscriptionEntity, TimerEntity).
|`org.activiti…​ActivitiActivityCancelledEvent`

|ACTIVITY_SIGNALED |An activity received a signal
|`org.activiti…​ActivitiSignalEvent`

|ACTIVITY_MESSAGE_RECEIVED |An activity received a message. Dispatched
before the activity receives the message. When received, a
`ACTIVITY_SIGNAL` or `ACTIVITY_STARTED` will be dispatched for this
activity, depending on the type (boundary-event or event-subprocess
start-event) |`org.activiti…​ActivitiMessageEvent`

|ACTIVITY_ERROR_RECEIVED |An activity has received an error event.
Dispatched before the actual error has been handled by the activity. The
event’s `activityId` contains a reference to the error-handling
activity. This event will be either followed by a `ACTIVITY_SIGNALLED`
event or `ACTIVITY_COMPLETE` for the involved activity, if the error was
delivered successfully. |`org.activiti…​ActivitiErrorEvent`

|UNCAUGHT_BPMN_ERROR |An uncaught BPMN error has been thrown. The
process did not have any handlers for that specific error. The event’s
`activityId` will be empty. |`org.activiti…​ActivitiErrorEvent`

|ACTIVITY_COMPENSATE |An activity is about to be compensated. The event
contains the id of the activity that is will be executed for
compensation. |`org.activiti…​ActivitiActivityEvent`

|VARIABLE_CREATED |A variable has been created. The event contains the
variable name, value and related execution and task (if any).
|`org.activiti…​ActivitiVariableEvent`

|VARIABLE_UPDATED |An existing variable has been updated. The event
contains the variable name, updated value and related execution and task
(if any). |`org.activiti…​ActivitiVariableEvent`

|VARIABLE_DELETED |An existing variable has been deleted. The event
contains the variable name, last known value and related execution and
task (if any). |`org.activiti…​ActivitiVariableEvent`

|TASK_ASSIGNED |A task has been assigned to a user. The event contains
the task |`org.activiti…​ActivitiEntityEvent`

|TASK_CREATED |A task has been created. This is dispatched after the
`ENTITY_CREATE` event. In case the task is part of a process, this event
will be fired before the task listeners are executed.
|`org.activiti…​ActivitiEntityEvent`

|TASK_COMPLETED |A task has been completed. This is dispatched before
the `ENTITY_DELETE` event. In case the task is part of a process, this
event will be fired before the process has moved on and will be followed
by a `ACTIVITY_COMPLETE` event, targeting the activity that represents
the completed task. |`org.activiti…​ActivitiEntityEvent`

|PROCESS_COMPLETED |A process has been completed. Dispatched after the
last activity `ACTIVITY_COMPLETED ` event. Process is completed when it
reaches state in which process instance does not have any transition to
take. |`org.activiti…​ActivitiEntityEvent`

|PROCESS_CANCELLED |A process has been cancelled. Dispatched before the
process instance is deleted from runtime. Process instance is cancelled
by API call `RuntimeService.deleteProcessInstance`
|`org.activiti…​ActivitiCancelledEvent`

|MEMBERSHIP_CREATED |A user has been added to a group. The event
contains the ids of the user and group involved.
|`org.activiti…​ActivitiMembershipEvent`

|MEMBERSHIP_DELETED |A user has been removed from a group. The event
contains the ids of the user and group involved.
|`org.activiti…​ActivitiMembershipEvent`

|MEMBERSHIPS_DELETED |All members will be removed from a group. The
event is thrown before the members are removed, so they are still
accessible. No individual `MEMBERSHIP_DELETED` events will be thrown if
all members are deleted at once, for performance reasons.
|`org.activiti…​ActivitiMembershipEvent`
|===

All `ENTITY_\*` events are related to entities inside the engine. The
list below show an overview of what entity-events are dispatched for
which entities:

* *`ENTITY_CREATED, ENTITY_INITIALIZED, ENTITY_DELETED`*: Attachment,
Comment, Deployment, Execution, Group, IdentityLink, Job, Model,
ProcessDefinition, ProcessInstance, Task, User.
* *`ENTITY_UPDATED`*: Attachment, Deployment, Execution, Group,
IdentityLink, Job, Model, ProcessDefinition, ProcessInstance, Task,
User.
* *`ENTITY_SUSPENDED, ENTITY_ACTIVATED`*: ProcessDefinition,
ProcessInstance/Execution, Task.

[[eventDispatcherRemarks]]
== 3.17.7. Additional remarks

*Only listeners are notified in the engine the events are dispatched
from.* So in case you have different engines - running against the same
database - only events that originated in the engine the listener is
registered for, are dispatched to that listener. The events that occur
in the other engine are not dispatched to the listeners, regardless of
the fact they are running in the same JVM or not.

Certain event-types (related to entities) expose the targeted entity.
Depending on the type or event, these entities cannot be updated anymore
(e.g. when the entity is deleted). If possible, use the `EngineServices`
exposed by the event to interact in a safe way with the engine. Even
then, you need to be cautious with updates/operations on entities that
are involved in the dispatched event.

No entity-events are dispatched related to history, as they all have a
runtime-counterpart which have their events dispatched.

[[chapterApi]]
== 4. The Activiti API

[[apiEngine]]
=== 4.1. The Process Engine API and services

The engine API is the most common way of interacting with Activiti. The
central starting point is the `ProcessEngine`, which can be created in
several ways as described in the link:#configuration[configuration
section]. From the ProcessEngine, you can obtain the various services
that contain the workflow/BPM methods. ProcessEngine and the services
objects are thread safe. So you can keep a reference to 1 of those for a
whole server.

image:images/api.services.png[api.services]

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
----

[.tok-n]#ProcessEngine# [.tok-n]#processEngine# [.tok-o]#=#
[.tok-n]#ProcessEngines#[.tok-o]#.#[.tok-na]#getDefaultProcessEngine#[.tok-o]#();#
[.tok-n]#RuntimeService# [.tok-n]#runtimeService# [.tok-o]#=#
[.tok-n]#processEngine#[.tok-o]#.#[.tok-na]#getRuntimeService#[.tok-o]#();#
[.tok-n]#RepositoryService# [.tok-n]#repositoryService# [.tok-o]#=#
[.tok-n]#processEngine#[.tok-o]#.#[.tok-na]#getRepositoryService#[.tok-o]#();#
[.tok-n]#TaskService# [.tok-n]#taskService# [.tok-o]#=#
[.tok-n]#processEngine#[.tok-o]#.#[.tok-na]#getTaskService#[.tok-o]#();#
[.tok-n]#ManagementService# [.tok-n]#managementService# [.tok-o]#=#
[.tok-n]#processEngine#[.tok-o]#.#[.tok-na]#getManagementService#[.tok-o]#();#
[.tok-n]#IdentityService# [.tok-n]#identityService# [.tok-o]#=#
[.tok-n]#processEngine#[.tok-o]#.#[.tok-na]#getIdentityService#[.tok-o]#();#
[.tok-n]#HistoryService# [.tok-n]#historyService# [.tok-o]#=#
[.tok-n]#processEngine#[.tok-o]#.#[.tok-na]#getHistoryService#[.tok-o]#();#
[.tok-n]#FormService# [.tok-n]#formService# [.tok-o]#=#
[.tok-n]#processEngine#[.tok-o]#.#[.tok-na]#getFormService#[.tok-o]#();#
[.tok-n]#DynamicBpmnService# [.tok-n]#dynamicBpmnService# [.tok-o]#=#
[.tok-n]#processEngine#[.tok-o]#.#[.tok-na]#getDynamicBpmnService#[.tok-o]#();#

`ProcessEngines.getDefaultProcessEngine()` will initialize and build a
process engine the first time it is called and afterwards always return
the same process engine. Proper creation and closing of all process
engines can be done with `ProcessEngines.init()` and
`ProcessEngines.destroy()`.

The ProcessEngines class will scan for all `activiti.cfg.xml` and
`activiti-context.xml` files. For all `activiti.cfg.xml` files, the
process engine will be built in the typical Activiti way:
`ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(inputStream).buildProcessEngine()`.
For all `activiti-context.xml` files, the process engine will be built
in the Spring way: First the Spring application context is created and
then the process engine is obtained from that application context.

All services are stateless. This means that you can easily run Activiti
on multiple nodes in a cluster, each going to the same database, without
having to worry about which machine actually executed previous calls.
Any call to any service is idempotent regardless of where it is
executed.

The *RepositoryService* is probably the first service needed when
working with the Activiti engine. This service offers operations for
managing and manipulating `deployments` and `process definitions`.
Without going into much detail here, a process definition is a Java
counterpart of BPMN 2.0 process. It is a representation of the structure
and behaviour of each of the steps of a process. A `deployment` is the
unit of packaging within the Activiti engine. A deployment can contain
multiple BPMN 2.0 xml files and any other resource. The choice of what
is included in one deployment is up to the developer. It can range from
a single process BPMN 2.0 xml file to a whole package of processes and
relevant resources (for example the deployment _hr-processes_ could
contain everything related to hr processes). The `RepositoryService`
allows to `deploy` such packages. Deploying a deployment means it is
uploaded to the engine, where all processes are inspected and parsed
before being stored in the database. From that point on, the deployment
is known to the system and any process included in the deployment can
now be started.

Furthermore, this service allows to

* Query on deployments and process definitions known to the engine.
* Suspend and activate deployments as a whole or specific process
definitions. Suspending means no further operations can be done on them,
while activation is the opposite operation.
* Retrieve various resources such as files contained within the
deployment or process diagrams that were auto generated by the engine.
* Retrieve a POJO version of the process definition which can be used to
introspect the process using Java rather than xml.

While the `RepositoryService` is rather about static information (i.e.
data that doesn’t change, or at least not a lot), the *RuntimeService*
is quite the opposite. It deals with starting new process instances of
process definitions. As said above, a `process definition` defines the
structure and behaviour of the different steps in a process. A process
instance is one execution of such a process definition. For each process
definition there typically are many instances running at the same time.
The `RuntimeService` also is the service which is used to retrieve and
store `process variables`. This is data which is specific to the given
process instance and can be used by various constructs in the process
(e.g. an exclusive gateway often uses process variables to determine
which path is chosen to continue the process). The `Runtimeservice` also
allows to query on process instances and executions. Executions are a
representation of the `'token'` concept of BPMN 2.0. Basically an
execution is a pointer pointing to where the process instance currently
is. Lastly, the `RuntimeService` is used whenever a process instance is
waiting for an external trigger and the process needs to be continued. A
process instance can have various `wait states` and this service
contains various operations to _signal_ the instance that the external
trigger is received and the process instance can be continued.

Tasks that need to be performed by actual human users of the system are
core to a BPM engine such as Activiti. Everything around tasks is
grouped in the *TaskService*, such as

* Querying tasks assigned to users or groups
* Creating new _standalone_ tasks. These are tasks that are not related
to a process instances.
* Manipulating to which user a task is assigned or which users are in
some way involved with the task.
* Claiming and completing a task. Claiming means that someone decided to
be the assignee for the task, meaning that this user will complete the
task. Completing means _doing the work of the tasks_. Typically this is
filling in a form of sorts.

The *IdentityService* is pretty simple. It allows the management
(creation, update, deletion, querying, …​) of groups and users. It is
important to understand that Activiti actually doesn’t do any checking
on users at runtime. For example, a task could be assigned to any user,
but the engine does not verify if that user is known to the system. This
is because the Activiti engine can also be used in conjunction with
services such as LDAP, Active Directory, etc.

The *FormService* is an optional service. Meaning that Activiti can
perfectly be used without it, without sacrificing any functionality.
This service introduces the concept of a _start form_ and a _task form_.
A _start form_ is a form that is shown to the user before the process
instance is started, while a _task form_ is the form that is displayed
when a user wants to complete a form. Activiti allows to define these
forms in the BPMN 2.0 process definition. This service exposes this data
in an easy way to work with. But again, this is optional as forms don’t
need to be embedded in the process definition.

The *HistoryService* exposes all historical data gathered by the
Activiti engine. When executing processes, a lot of data can be kept by
the engine (this is configurable) such as process instance start times,
who did which tasks, how long it took to complete the tasks, which path
was followed in each process instance, etc. This service exposes mainly
query capabilities to access this data.

The *ManagementService* is typically not needed when coding custom
application using Activiti. It allows to retrieve information about the
database tables and table metadata. Furthermore, it exposes query
capabilities and management operations for jobs. Jobs are used in
Activiti for various things such as timers, asynchronous continuations,
delayed suspension/activation, etc. Later on, these topics will be
discussed in more detail.

The *DynamicBpmnService* can be used to change part of the process
definition without needing to redeploy it. You can for example change
the assignee definition for a user task in a process definition, or
change the class name of a service task.

For more detailed information on the service operations and the engine
API, see http://activiti.org/javadocs/index.html[the javadocs].

[[_exception_strategy]]
== 4.2. Exception strategy

The base exception in Activiti is the
`org.activiti.engine.ActivitiException`, an unchecked exception. This
exception can be thrown at all times by the API, but _expected_
exceptions that happen in specific methods are documented in the
http://activiti.org/javadocs/index.html[the javadocs]. For example, an
extract from `TaskService`:

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-cm]#/**# [.tok-cm]# * Called when the task is successfully
executed.# [.tok-cm]# * @param taskId the id of the task to complete,
cannot be null.# [.tok-cm]# * @throws ActivitiObjectNotFoundException
when no task exists with the given id.# [.tok-cm]# */# [.tok-kt]#void#
[.tok-nf]#complete#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#taskId#[.tok-o]#);#

In the example above, when an id is passed for which no task exists, an
exception will be thrown. Also, since the javadoc *explicitly states
that taskId cannot be null, an `ActivitiIllegalArgumentException` will
be thrown when `null` is passed*.

Even though we want to avoid a big exception hierarchy, the following
subclasses were added which are thrown in specific cases. All other
errors that occur during process-execution or API-invocation that don’t
fit into the possible exceptions below, are thrown as regular
`ActivitiExceptions`s.

* `ActivitiWrongDbException`: Thrown when the Activiti engine discovers
a mismatch between the database schema version and the engine version.
* `ActivitiOptimisticLockingException`: Thrown when an optimistic
locking occurs in the data store caused by concurrent access of the same
data entry.
* `ActivitiClassLoadingException`: Thrown when a class requested to load
was not found or when an error occurred while loading it (e.g.
JavaDelegates, TaskListeners, …​).
* `ActivitiObjectNotFoundException`: Thrown when an object that is
requested or action on does not exist.
* `ActivitiIllegalArgumentException`: An exception indicating that an
illegal argument has been supplied in an Activiti API-call, an illegal
value was configured in the engine’s configuration or an illegal value
has been supplied or an illegal value is used in a process-definition.
* `ActivitiTaskAlreadyClaimedException`: Thrown when a task is already
claimed, when the `taskService.claim(…​)` is called.

[[api.services]]
== 4.3. Working with the Activiti services

As described above, the way to interact with the Activiti engine is
through the services exposed by an instance of the
`org.activiti.engine.ProcessEngine` class. The following code snippets
assume you have a working Activiti environment, i.e. you have access to
a valid `org.activiti.engine.ProcessEngine`. If you simply want to try
out the code below, you can download or clone the
https://github.com/Activiti/activiti-unit-test-template[Activiti unit
test template], import it in your IDE and add a `testUserguideCode()`
method to the `org.activiti.MyUnitTest` unit test.

The end goal of this little tutorial will be to have a working business
process which mimics a simplistic vacation request process at a company:

image:images/api.vacationRequest.png[api.vacationRequest]

[[api.services.deployment]]
=== 4.3.1. Deploying the process

Everything that is related to _static_ data (such as process
definitions) are accessed through the *RepositoryService*. Conceptually,
every such static piece of data is content of the _repository_ of the
Activiti engine.

Create a new xml file `VacationRequest.bpmn20.xml` in the
`src/test/resources/org/activiti/test` resource folder (or anywhere else
if you’re not using the unit test template) with the following content.
Note that this section won’t explain the xml constructs being used in
the example above. Please read link:#bpmn20[the BPMN 2.0 chapter] to
become familiar with these constructs first if needed.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
----

[.tok-cp]#<?xml version="1.0" encoding="UTF-8" ?>#
[.tok-nt]#<definitions# [.tok-na]#id=#[.tok-s]#"definitions"#
[.tok-na]#targetNamespace=#[.tok-s]#"http://activiti.org/bpmn20"#
[.tok-na]#xmlns=#[.tok-s]#"http://www.omg.org/spec/BPMN/20100524/MODEL"#
[.tok-na]#xmlns:xsi=#[.tok-s]#"http://www.w3.org/2001/XMLSchema-instance"#
[.tok-na]#xmlns:activiti=#[.tok-s]#"http://activiti.org/bpmn"#[.tok-nt]#>#
[.tok-nt]#<process# [.tok-na]#id=#[.tok-s]#"vacationRequest"#
[.tok-na]#name=#[.tok-s]#"Vacation request"#[.tok-nt]#>#
[.tok-nt]#<startEvent# [.tok-na]#id=#[.tok-s]#"request"#
[.tok-na]#activiti:initiator=#[.tok-s]#"employeeName"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:formProperty#
[.tok-na]#id=#[.tok-s]#"numberOfDays"# [.tok-na]#name=#[.tok-s]#"Number
of days"# [.tok-na]#type=#[.tok-s]#"long"#
[.tok-na]#value=#[.tok-s]#"1"#
[.tok-na]#required=#[.tok-s]#"true"#[.tok-nt]#/>#
[.tok-nt]#<activiti:formProperty# [.tok-na]#id=#[.tok-s]#"startDate"#
[.tok-na]#name=#[.tok-s]#"First day of holiday (dd-MM-yyy)"#
[.tok-na]#datePattern=#[.tok-s]#"dd-MM-yyyy hh:mm"#
[.tok-na]#type=#[.tok-s]#"date"# [.tok-na]#required=#[.tok-s]#"true"#
[.tok-nt]#/># [.tok-nt]#<activiti:formProperty#
[.tok-na]#id=#[.tok-s]#"vacationMotivation"#
[.tok-na]#name=#[.tok-s]#"Motivation"#
[.tok-na]#type=#[.tok-s]#"string"# [.tok-nt]#/>#
[.tok-nt]#</extensionElements># [.tok-nt]#</startEvent>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow1"#
[.tok-na]#sourceRef=#[.tok-s]#"request"#
[.tok-na]#targetRef=#[.tok-s]#"handleRequest"# [.tok-nt]#/>#
[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"handleRequest"#
[.tok-na]#name=#[.tok-s]#"Handle vacation request"# [.tok-nt]#>#
[.tok-nt]#<documentation># $\{employeeName} would like to take
$\{numberOfDays} day(s) of vacation (Motivation:
$\{vacationMotivation}). [.tok-nt]#</documentation>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:formProperty#
[.tok-na]#id=#[.tok-s]#"vacationApproved"# [.tok-na]#name=#[.tok-s]#"Do
you approve this vacation"# [.tok-na]#type=#[.tok-s]#"enum"#
[.tok-na]#required=#[.tok-s]#"true"#[.tok-nt]#>#
[.tok-nt]#<activiti:value# [.tok-na]#id=#[.tok-s]#"true"#
[.tok-na]#name=#[.tok-s]#"Approve"# [.tok-nt]#/>#
[.tok-nt]#<activiti:value# [.tok-na]#id=#[.tok-s]#"false"#
[.tok-na]#name=#[.tok-s]#"Reject"# [.tok-nt]#/>#
[.tok-nt]#</activiti:formProperty># [.tok-nt]#<activiti:formProperty#
[.tok-na]#id=#[.tok-s]#"managerMotivation"#
[.tok-na]#name=#[.tok-s]#"Motivation"#
[.tok-na]#type=#[.tok-s]#"string"# [.tok-nt]#/>#
[.tok-nt]#</extensionElements># [.tok-nt]#<potentialOwner>#
[.tok-nt]#<resourceAssignmentExpression>#
[.tok-nt]##<formalExpression>##management[.tok-nt]##</formalExpression>##
[.tok-nt]#</resourceAssignmentExpression># [.tok-nt]#</potentialOwner>#
[.tok-nt]#</userTask># [.tok-nt]#<sequenceFlow#
[.tok-na]#id=#[.tok-s]#"flow2"#
[.tok-na]#sourceRef=#[.tok-s]#"handleRequest"#
[.tok-na]#targetRef=#[.tok-s]#"requestApprovedDecision"# [.tok-nt]#/>#
[.tok-nt]#<exclusiveGateway#
[.tok-na]#id=#[.tok-s]#"requestApprovedDecision"#
[.tok-na]#name=#[.tok-s]#"Request approved?"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow3"#
[.tok-na]#sourceRef=#[.tok-s]#"requestApprovedDecision"#
[.tok-na]#targetRef=#[.tok-s]#"sendApprovalMail"#[.tok-nt]#>#
[.tok-nt]#<conditionExpression#
[.tok-na]#xsi:type=#[.tok-s]#"tFormalExpression"#[.tok-nt]##>##$\{vacationApproved
== 'true'}[.tok-nt]#</conditionExpression># [.tok-nt]#</sequenceFlow>#
[.tok-nt]#<task# [.tok-na]#id=#[.tok-s]#"sendApprovalMail"#
[.tok-na]#name=#[.tok-s]#"Send confirmation e-mail"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow4"#
[.tok-na]#sourceRef=#[.tok-s]#"sendApprovalMail"#
[.tok-na]#targetRef=#[.tok-s]#"theEnd1"# [.tok-nt]#/>#
[.tok-nt]#<endEvent# [.tok-na]#id=#[.tok-s]#"theEnd1"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow5"#
[.tok-na]#sourceRef=#[.tok-s]#"requestApprovedDecision"#
[.tok-na]#targetRef=#[.tok-s]#"adjustVacationRequestTask"#[.tok-nt]#>#
[.tok-nt]#<conditionExpression#
[.tok-na]#xsi:type=#[.tok-s]#"tFormalExpression"#[.tok-nt]##>##$\{vacationApproved
== 'false'}[.tok-nt]#</conditionExpression># [.tok-nt]#</sequenceFlow>#
[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"adjustVacationRequestTask"#
[.tok-na]#name=#[.tok-s]#"Adjust vacation request"#[.tok-nt]#>#
[.tok-nt]#<documentation># Your manager has disapproved your vacation
request for $\{numberOfDays} days. Reason: $\{managerMotivation}
[.tok-nt]#</documentation># [.tok-nt]#<extensionElements>#
[.tok-nt]#<activiti:formProperty# [.tok-na]#id=#[.tok-s]#"numberOfDays"#
[.tok-na]#name=#[.tok-s]#"Number of days"#
[.tok-na]#value=#[.tok-s]#"$\{numberOfDays}"#
[.tok-na]#type=#[.tok-s]#"long"#
[.tok-na]#required=#[.tok-s]#"true"#[.tok-nt]#/>#
[.tok-nt]#<activiti:formProperty# [.tok-na]#id=#[.tok-s]#"startDate"#
[.tok-na]#name=#[.tok-s]#"First day of holiday (dd-MM-yyy)"#
[.tok-na]#value=#[.tok-s]#"$\{startDate}"#
[.tok-na]#datePattern=#[.tok-s]#"dd-MM-yyyy hh:mm"#
[.tok-na]#type=#[.tok-s]#"date"# [.tok-na]#required=#[.tok-s]#"true"#
[.tok-nt]#/># [.tok-nt]#<activiti:formProperty#
[.tok-na]#id=#[.tok-s]#"vacationMotivation"#
[.tok-na]#name=#[.tok-s]#"Motivation"#
[.tok-na]#value=#[.tok-s]#"$\{vacationMotivation}"#
[.tok-na]#type=#[.tok-s]#"string"# [.tok-nt]#/>#
[.tok-nt]#<activiti:formProperty#
[.tok-na]#id=#[.tok-s]#"resendRequest"# [.tok-na]#name=#[.tok-s]#"Resend
vacation request to manager?"# [.tok-na]#type=#[.tok-s]#"enum"#
[.tok-na]#required=#[.tok-s]#"true"#[.tok-nt]#>#
[.tok-nt]#<activiti:value# [.tok-na]#id=#[.tok-s]#"true"#
[.tok-na]#name=#[.tok-s]#"Yes"# [.tok-nt]#/># [.tok-nt]#<activiti:value#
[.tok-na]#id=#[.tok-s]#"false"# [.tok-na]#name=#[.tok-s]#"No"#
[.tok-nt]#/># [.tok-nt]#</activiti:formProperty>#
[.tok-nt]#</extensionElements># [.tok-nt]#<humanPerformer>#
[.tok-nt]#<resourceAssignmentExpression>#
[.tok-nt]##<formalExpression>##$\{employeeName}[.tok-nt]#</formalExpression>#
[.tok-nt]#</resourceAssignmentExpression># [.tok-nt]#</humanPerformer>#
[.tok-nt]#</userTask># [.tok-nt]#<sequenceFlow#
[.tok-na]#id=#[.tok-s]#"flow6"#
[.tok-na]#sourceRef=#[.tok-s]#"adjustVacationRequestTask"#
[.tok-na]#targetRef=#[.tok-s]#"resendRequestDecision"# [.tok-nt]#/>#
[.tok-nt]#<exclusiveGateway#
[.tok-na]#id=#[.tok-s]#"resendRequestDecision"#
[.tok-na]#name=#[.tok-s]#"Resend request?"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow7"#
[.tok-na]#sourceRef=#[.tok-s]#"resendRequestDecision"#
[.tok-na]#targetRef=#[.tok-s]#"handleRequest"#[.tok-nt]#>#
[.tok-nt]#<conditionExpression#
[.tok-na]#xsi:type=#[.tok-s]#"tFormalExpression"#[.tok-nt]##>##$\{resendRequest
== 'true'}[.tok-nt]#</conditionExpression># [.tok-nt]#</sequenceFlow>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow8"#
[.tok-na]#sourceRef=#[.tok-s]#"resendRequestDecision"#
[.tok-na]#targetRef=#[.tok-s]#"theEnd2"#[.tok-nt]#>#
[.tok-nt]#<conditionExpression#
[.tok-na]#xsi:type=#[.tok-s]#"tFormalExpression"#[.tok-nt]##>##$\{resendRequest
== 'false'}[.tok-nt]#</conditionExpression># [.tok-nt]#</sequenceFlow>#
[.tok-nt]#<endEvent# [.tok-na]#id=#[.tok-s]#"theEnd2"# [.tok-nt]#/>#
[.tok-nt]#</process># [.tok-nt]#</definitions>#

To make this process known to the Activiti engine, we must _deploy_ it
first. Deploying means that the engine will parse the BPMN 2.0 xml to
something executable and a new database record will be added for each
process definition included in the _deployment_. This way, when the
engine reboots, it will still know all of the _deployed_ processes:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-n]#ProcessEngine# [.tok-n]#processEngine# [.tok-o]#=#
[.tok-n]#ProcessEngines#[.tok-o]#.#[.tok-na]#getDefaultProcessEngine#[.tok-o]#();#
[.tok-n]#RepositoryService# [.tok-n]#repositoryService# [.tok-o]#=#
[.tok-n]#processEngine#[.tok-o]#.#[.tok-na]#getRepositoryService#[.tok-o]#();#
[.tok-n]#repositoryService#[.tok-o]#.#[.tok-na]#createDeployment#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#addClasspathResource#[.tok-o]#(#[.tok-s]#"org/activiti/test/VacationRequest.bpmn20.xml"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#deploy#[.tok-o]#();#
[.tok-n]#Log#[.tok-o]#.#[.tok-na]#info#[.tok-o]#(#[.tok-s]#"Number of
process definitions: "# [.tok-o]#+#
[.tok-n]#repositoryService#[.tok-o]#.#[.tok-na]#createProcessDefinitionQuery#[.tok-o]#().#[.tok-na]#count#[.tok-o]#());#

Read more about deployment in the link:#chDeployment[deployment
chapter].

[[api.services.start.processinstance]]
== 4.3.2. Starting a process instance

After deploying the process definition to the Activiti engine, we can
start new process instances from it. For each process definition, there
are typically many process instances. The process definition is the
_blueprint_, while a process instance is a runtime execution of it.

Everything related to the runtime state of processes can be found in the
*RuntimeService*. There are various way to start a new process instance.
In the following snippet, we use the key we defined in the process
definition xml to start the process instance. We’re also providing some
process variables at process instance start, because the description of
the first user task will use these in its expressions. Process variables
are commonly used because they give meaning to the process instances for
a certain process definition. Typically, the process variables are what
make process instances differ from one another.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
----

[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#># [.tok-n]#variables# [.tok-o]#=#
[.tok-k]#new# [.tok-n]#HashMap#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#>();#
[.tok-n]#variables#[.tok-o]#.#[.tok-na]#put#[.tok-o]#(#[.tok-s]#"employeeName"#[.tok-o]#,#
[.tok-s]#"Kermit"#[.tok-o]#);#
[.tok-n]#variables#[.tok-o]#.#[.tok-na]#put#[.tok-o]#(#[.tok-s]#"numberOfDays"#[.tok-o]#,#
[.tok-k]#new# [.tok-n]#Integer#[.tok-o]#(#[.tok-mi]#4#[.tok-o]#));#
[.tok-n]#variables#[.tok-o]#.#[.tok-na]#put#[.tok-o]#(#[.tok-s]#"vacationMotivation"#[.tok-o]#,#
[.tok-s]#"I'm really tired!"#[.tok-o]#);# [.tok-n]#RuntimeService#
[.tok-n]#runtimeService# [.tok-o]#=#
[.tok-n]#processEngine#[.tok-o]#.#[.tok-na]#getRuntimeService#[.tok-o]#();#
[.tok-n]#ProcessInstance# [.tok-n]#processInstance# [.tok-o]#=#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#startProcessInstanceByKey#[.tok-o]#(#[.tok-s]#"vacationRequest"#[.tok-o]#,#
[.tok-n]#variables#[.tok-o]#);# [.tok-c1]#// Verify that we started a
new process instance#
[.tok-n]#Log#[.tok-o]#.#[.tok-na]#info#[.tok-o]#(#[.tok-s]#"Number of
process instances: "# [.tok-o]#+#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#createProcessInstanceQuery#[.tok-o]#().#[.tok-na]#count#[.tok-o]#());#

[[api.services.tasks]]
== 4.3.3. Completing tasks

When the process starts, the first step will be a user task. This is a
step that must be performed by a user of the system. Typically, such a
user will have an _inbox of tasks_ which lists all the tasks that need
to be done by this user. Following code snippet shows how such a query
might be performed:

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-c1]#// Fetch all tasks for the management group#
[.tok-n]#TaskService# [.tok-n]#taskService# [.tok-o]#=#
[.tok-n]#processEngine#[.tok-o]#.#[.tok-na]#getTaskService#[.tok-o]#();#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#Task#[.tok-o]#># [.tok-n]#tasks#
[.tok-o]#=#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#createTaskQuery#[.tok-o]#().#[.tok-na]#taskCandidateGroup#[.tok-o]#(#[.tok-s]#"management"#[.tok-o]#).#[.tok-na]#list#[.tok-o]#();#
[.tok-k]#for# [.tok-o]#(#[.tok-n]#Task# [.tok-n]#task# [.tok-o]#:#
[.tok-n]#tasks#[.tok-o]#)# [.tok-o]#\{#
[.tok-n]#Log#[.tok-o]#.#[.tok-na]#info#[.tok-o]#(#[.tok-s]#"Task
available: "# [.tok-o]#+#
[.tok-n]#task#[.tok-o]#.#[.tok-na]#getName#[.tok-o]#());# [.tok-o]#}#

To continue the process instance, we need to finish this task. For the
Activiti engine, this means you need to `complete` the task. Following
snippet shows how this is done:

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-n]#Task# [.tok-n]#task# [.tok-o]#=#
[.tok-n]#tasks#[.tok-o]#.#[.tok-na]#get#[.tok-o]#(#[.tok-mi]#0#[.tok-o]#);#
[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#># [.tok-n]#taskVariables# [.tok-o]#=#
[.tok-k]#new# [.tok-n]#HashMap#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#>();#
[.tok-n]#taskVariables#[.tok-o]#.#[.tok-na]#put#[.tok-o]#(#[.tok-s]#"vacationApproved"#[.tok-o]#,#
[.tok-s]#"false"#[.tok-o]#);#
[.tok-n]#taskVariables#[.tok-o]#.#[.tok-na]#put#[.tok-o]#(#[.tok-s]#"managerMotivation"#[.tok-o]#,#
[.tok-s]#"We have a tight deadline!"#[.tok-o]#);#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#complete#[.tok-o]#(#[.tok-n]#task#[.tok-o]#.#[.tok-na]#getId#[.tok-o]#(),#
[.tok-n]#taskVariables#[.tok-o]#);#

The process instance will now continue to the next step. In this
example, the next step allows the employee to complete a form that
adjusts their original vacation request. The employee can resubmit the
vacation request which will cause the process to loop back to the start
task.

[[api.services.suspend]]
== 4.3.4. Suspending and activating a process

It’s possible to suspend a process definition. When a process definition
is suspended, new process instance can’t be created (an exception will
be thrown). Suspending the process definition is done through the
`RepositoryService`:

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-n]#repositoryService#[.tok-o]#.#[.tok-na]#suspendProcessDefinitionByKey#[.tok-o]#(#[.tok-s]#"vacationRequest"#[.tok-o]#);#
[.tok-k]#try# [.tok-o]#\{#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#startProcessInstanceByKey#[.tok-o]#(#[.tok-s]#"vacationRequest"#[.tok-o]#);#
[.tok-o]#}# [.tok-k]#catch# [.tok-o]#(#[.tok-n]#ActivitiException#
[.tok-n]#e#[.tok-o]#)# [.tok-o]#\{#
[.tok-n]#e#[.tok-o]#.#[.tok-na]#printStackTrace#[.tok-o]#();#
[.tok-o]#}#

To reactivate a process definition, simply call one of the
`repositoryService.activateProcessDefinitionXXX` methods.

It’s also possible to suspend a process instance. When suspended, the
process cannot be continued (e.g. completing a task throws an exception)
and no jobs (such as timers) will executed. Suspending a process
instance can be done by calling the
`runtimeService.suspendProcessInstance` method. Activating the process
instance again is done by calling the
`runtimeService.activateProcessInstanceXXX` methods.

[[api.services]]
== 4.3.5. Further reading

We’ve barely scratched the surface in the previous sections regarding
Activiti functionality. We will expand these sections further in the
future with additional coverage of the Activiti API. Of course, as with
any open source project, the best way to learn is to inspect the code
and read the Javadocs!

[[queryAPI]]
== 4.4. Query API

There are two ways of querying data from the engine: The query API and
native queries. The Query API allows to program completely typesafe
queries with a fluent API. You can add various conditions to your
queries (all of which are applied together as a logical AND) and
precisely one ordering. The following code shows an example:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-n]#List#[.tok-o]#<#[.tok-n]#Task#[.tok-o]#># [.tok-n]#tasks#
[.tok-o]#=#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#createTaskQuery#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#taskAssignee#[.tok-o]#(#[.tok-s]#"kermit"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#processVariableValueEquals#[.tok-o]#(#[.tok-s]#"orderId"#[.tok-o]#,#
[.tok-s]#"0815"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#orderByDueDate#[.tok-o]#().#[.tok-na]#asc#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#list#[.tok-o]#();#

Sometimes you need more powerful queries, e.g. queries using an OR
operator or restrictions you cannot express using the Query API. For
these cases, we introduced native queries, which allow you to write your
own SQL queries. The return type is defined by the Query object you use
and the data is mapped into the correct objects, e.g. Task,
ProcessInstance, Execution, etc…​. Since the query will be fired at the
database you have to use table and column names as they are defined in
the database; this requires some knowledge about the internal data
structure and it is recommended to use native queries with care. The
table names can be retrieved via the API to keep the dependency as small
as possible.

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-n]#List#[.tok-o]#<#[.tok-n]#Task#[.tok-o]#># [.tok-n]#tasks#
[.tok-o]#=#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#createNativeTaskQuery#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#sql#[.tok-o]#(#[.tok-s]#"SELECT count(*) FROM "#
[.tok-o]#+#
[.tok-n]#managementService#[.tok-o]#.#[.tok-na]#getTableName#[.tok-o]#(#[.tok-n]#Task#[.tok-o]#.#[.tok-na]#class#[.tok-o]#)#
[.tok-o]#+# [.tok-s]#" T WHERE T.NAME_ = #\{taskName}"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#parameter#[.tok-o]#(#[.tok-s]#"taskName"#[.tok-o]#,#
[.tok-s]#"gonzoTask"#[.tok-o]#)# [.tok-o]#.#[.tok-na]#list#[.tok-o]#();#
[.tok-kt]#long# [.tok-n]#count# [.tok-o]#=#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#createNativeTaskQuery#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#sql#[.tok-o]#(#[.tok-s]#"SELECT count(*) FROM "#
[.tok-o]#+#
[.tok-n]#managementService#[.tok-o]#.#[.tok-na]#getTableName#[.tok-o]#(#[.tok-n]#Task#[.tok-o]#.#[.tok-na]#class#[.tok-o]#)#
[.tok-o]#+# [.tok-s]#" T1, "# [.tok-o]#+#
[.tok-n]#managementService#[.tok-o]#.#[.tok-na]#getTableName#[.tok-o]#(#[.tok-n]#VariableInstanceEntity#[.tok-o]#.#[.tok-na]#class#[.tok-o]#)#
[.tok-o]#+# [.tok-s]#" V1 WHERE V1.TASK_ID_ = T1.ID_"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#count#[.tok-o]#();#

[[apiVariables]]
== 4.5. Variables

Every process instance needs and uses data to execute the steps it
exists of. In Activiti, this data is called _variables_, which are
stored in the database. Variables can be used in expressions (for
example to select the correct outgoing sequence flow in an exclusive
gateway), in java service tasks when calling external services (for
example to provide the input or store the result of the service call),
etc.

A process instance can have variables (called _process variables_), but
also _executions_ (which are specific pointers to where the process is
active) and user tasks can have variables. A process instance can have
any number of variables. Each variable is stored in a row in the
_ACT_RU_VARIABLE_ database table.

Any of the _startProcessInstanceXXX_ methods have an optional parameters
to provide the variables when the process instance is created and
started. For example, from the _RuntimeService_:

[source,pygments,highlight]
----
1
----

[.tok-n]#ProcessInstance#
[.tok-nf]#startProcessInstanceByKey#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#processDefinitionKey#[.tok-o]#,#
[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#># [.tok-n]#variables#[.tok-o]#);#

Variables can be added during process execution. For example
(_RuntimeService_):

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-kt]#void# [.tok-nf]#setVariable#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#executionId#[.tok-o]#,# [.tok-n]#String#
[.tok-n]#variableName#[.tok-o]#,# [.tok-n]#Object#
[.tok-n]#value#[.tok-o]#);# [.tok-kt]#void#
[.tok-nf]#setVariableLocal#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#executionId#[.tok-o]#,# [.tok-n]#String#
[.tok-n]#variableName#[.tok-o]#,# [.tok-n]#Object#
[.tok-n]#value#[.tok-o]#);# [.tok-kt]#void#
[.tok-nf]#setVariables#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#executionId#[.tok-o]#,#
[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,# [.tok-o]#?#
[.tok-kd]#extends# [.tok-n]#Object#[.tok-o]#>#
[.tok-n]#variables#[.tok-o]#);# [.tok-kt]#void#
[.tok-nf]#setVariablesLocal#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#executionId#[.tok-o]#,#
[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,# [.tok-o]#?#
[.tok-kd]#extends# [.tok-n]#Object#[.tok-o]#>#
[.tok-n]#variables#[.tok-o]#);#

Note that variables can be set _local_ for a given execution (remember a
process instance consists of a tree of executions). The variable will
only be visible on that execution, and not higher in the tree of
executions. This can be useful if data shouldn’t be propagated to the
process instance level, or the variable has a new value for a certain
path in the process instance (for example when using parallel paths).

Variables can also be fetched again, as shown below. Note that similar
methods exist on the _TaskService_. This means that tasks, like
executions, can have local variables that are _alive_ just for the
duration of the task.

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#>#
[.tok-nf]#getVariables#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#executionId#[.tok-o]#);#
[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#>#
[.tok-nf]#getVariablesLocal#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#executionId#[.tok-o]#);#
[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#>#
[.tok-nf]#getVariables#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#executionId#[.tok-o]#,#
[.tok-n]#Collection#[.tok-o]#<#[.tok-n]#String#[.tok-o]#>#
[.tok-n]#variableNames#[.tok-o]#);#
[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#>#
[.tok-nf]#getVariablesLocal#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#executionId#[.tok-o]#,#
[.tok-n]#Collection#[.tok-o]#<#[.tok-n]#String#[.tok-o]#>#
[.tok-n]#variableNames#[.tok-o]#);# [.tok-n]#Object#
[.tok-nf]#getVariable#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#executionId#[.tok-o]#,# [.tok-n]#String#
[.tok-n]#variableName#[.tok-o]#);# [.tok-o]#<#[.tok-n]#T#[.tok-o]#>#
[.tok-n]#T# [.tok-nf]#getVariable#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#executionId#[.tok-o]#,# [.tok-n]#String#
[.tok-n]#variableName#[.tok-o]#,#
[.tok-n]#Class#[.tok-o]#<#[.tok-n]#T#[.tok-o]#>#
[.tok-n]#variableClass#[.tok-o]#);#

Variables are often used in link:#bpmnJavaServiceTask[Java delegates],
link:#apiExpressions[expressions], execution- or tasklisteners, scripts,
etc. In those constructs, the current _execution_ or _task_ object is
available and it can be used for variable setting and/or retrieval. The
simplest methods are these:

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-n]#execution#[.tok-o]#.#[.tok-na]#getVariables#[.tok-o]#();#
[.tok-n]#execution#[.tok-o]#.#[.tok-na]#getVariables#[.tok-o]#(#[.tok-n]#Collection#[.tok-o]#<#[.tok-n]#String#[.tok-o]#>#
[.tok-n]#variableNames#[.tok-o]#);#
[.tok-n]#execution#[.tok-o]#.#[.tok-na]#getVariable#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#variableName#[.tok-o]#);#
[.tok-n]#execution#[.tok-o]#.#[.tok-na]#setVariables#[.tok-o]#(#[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#object#[.tok-o]#># [.tok-n]#variables#[.tok-o]#);#
[.tok-n]#execution#[.tok-o]#.#[.tok-na]#setVariable#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#variableName#[.tok-o]#,# [.tok-n]#Object#
[.tok-n]#value#[.tok-o]#);#

Note that a variant with _local_ is also available for all of the above.

For historical (and backwards compatible reasons), when doing any of the
calls above, behind the scenes actually *all* variables will be fetched
from the database. This means that if you have 10 variables, and only
get one through _getVariable("myVariable")_, behind the scenes the other
9 will be fetched and cached. This is not bad, as subsequent calls will
not hit the database again. For example, when your process definition
has three sequential service tasks (and thus one database transaction),
using one call to fetch all variables in the first service task might be
better then fetching the variables needed in each service task
separately. Note that this applies *both* for getting and setting
variables.

Of course, when using a lot of variables or simply when you want tight
control on the database query and traffic, this is not appropriate.
Since Activiti 5.17, new methods have been introduced to give a tighter
control on this, by adding in new methods that have an optional
parameter that tells the engine whether or not behind the scenes all
variables need to be fetched and cached:

[source,pygments,highlight]
----
1
2
3
----

[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#>#
[.tok-nf]#getVariables#[.tok-o]#(#[.tok-n]#Collection#[.tok-o]#<#[.tok-n]#String#[.tok-o]#>#
[.tok-n]#variableNames#[.tok-o]#,# [.tok-kt]#boolean#
[.tok-n]#fetchAllVariables#[.tok-o]#);# [.tok-n]#Object#
[.tok-nf]#getVariable#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#variableName#[.tok-o]#,# [.tok-kt]#boolean#
[.tok-n]#fetchAllVariables#[.tok-o]#);# [.tok-kt]#void#
[.tok-nf]#setVariable#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#variableName#[.tok-o]#,# [.tok-n]#Object#
[.tok-n]#value#[.tok-o]#,# [.tok-kt]#boolean#
[.tok-n]#fetchAllVariables#[.tok-o]#);#

When using _true_ for the parameter _fetchAllVariables_, the behaviour
will be exactly as described above: when getting or setting a variable,
all other variables will be fetched and cached.

However, when using _false_ as value, a specific query will be used and
no other variables will be fetched nor cached. Only the value of the
variable in question here will be cached for subsequent use.

[[apiTransientVariables]]
== 4.6. Transient variables

Transient variables are variables that behave like regular variables,
but are not persisted. Typically, transient variables are used for
advanced use cases (i.e. when in doubt, use a regular process variable).

The following applies for transient variables:

* There is no history stored at all for transient variables.
* Like _regular_ variables, transient variables are put on the _highest
parent_ when set. This means that when setting a variable on an
execution, the transient variable is actually stored on the process
instance execution. Like regular variables, a _local_ variant of the
method exists if the variable should be set on the specific execution or
task.
* A transient variable can only be accessed until the next _wait state_
in the process definition. After that, they are gone. The wait state
means here the point in the process instance where it is persisted to
the data store. Note that an _async_ activity also is a _wait state_ in
this definition!
* Transient variables can only be set by the _setTransientVariable(name,
value)_, but transient variables are also returned when calling
_getVariable(name)_ (a _getTransientVariable(name)_ also exists, that
only checks the transient variables). The reason for this is to make the
writing of expressions easy and existing logic using variables works for
both types.
* A transient variable _shadows_ a persistent variable with the same
name. This means that when both a persistent and transient variable is
set on a process instance and the _getVariable("someVariable")_ is used,
the transient variable value will be returned.

Transient variables can be got and/or set in most places where regular
variables are exposed:

* On _DelegateExecution_ in _JavaDelegate_ implementations
* On _DelegateExecution_ in _ExecutionListener_ implementations and on
_DelegateTask_ on _TaskListener_ implementations
* In script task via the _execution_ object
* When starting a process instance via the runtime service
* When completing a task
* When calling the _runtimeService.trigger_ method

The methods follow the naming convention of the regular process
variables:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
----

[.tok-kt]#void#
[.tok-nf]#setTransientVariable#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#variableName#[.tok-o]#,# [.tok-n]#Object#
[.tok-n]#variableValue#[.tok-o]#);# [.tok-kt]#void#
[.tok-nf]#setTransientVariableLocal#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#variableName#[.tok-o]#,# [.tok-n]#Object#
[.tok-n]#variableValue#[.tok-o]#);# [.tok-kt]#void#
[.tok-nf]#setTransientVariables#[.tok-o]#(#[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#># [.tok-n]#transientVariables#[.tok-o]#);#
[.tok-kt]#void#
[.tok-nf]#setTransientVariablesLocal#[.tok-o]#(#[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#># [.tok-n]#transientVariables#[.tok-o]#);#
[.tok-n]#Object#
[.tok-nf]#getTransientVariable#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#variableName#[.tok-o]#);# [.tok-n]#Object#
[.tok-nf]#getTransientVariableLocal#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#variableName#[.tok-o]#);#
[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#>#
[.tok-nf]#getTransientVariables#[.tok-o]#();#
[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#>#
[.tok-nf]#getTransientVariablesLocal#[.tok-o]#();# [.tok-kt]#void#
[.tok-nf]#removeTransientVariable#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#variableName#[.tok-o]#);# [.tok-kt]#void#
[.tok-nf]#removeTransientVariableLocal#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#variableName#[.tok-o]#);#

Following BPMN diagram shows a typical example:

image:images/api.transient.variable.example.png[api.transient.variable.example]

Let’s assume the _Fetch Data_ service task calls some remote service
(for example using REST). Let’s also assume some config parameters are
needed and need to be provided when starting the process instance. Also,
these config parameters are not important for historical audit purposes,
so we pass them as transient variables:

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-n]#ProcessInstance# [.tok-n]#processInstance# [.tok-o]#=#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#createProcessInstanceBuilder#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#processDefinitionKey#[.tok-o]#(#[.tok-s]#"someKey"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#transientVariable#[.tok-o]#(#[.tok-s]#"configParam01"#[.tok-o]#,#
[.tok-s]#"A"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#transientVariable#[.tok-o]#(#[.tok-s]#"configParam02"#[.tok-o]#,#
[.tok-s]#"B"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#transientVariable#[.tok-o]#(#[.tok-s]#"configParam03"#[.tok-o]#,#
[.tok-s]#"C"#[.tok-o]#)# [.tok-o]#.#[.tok-na]#start#[.tok-o]#();#

Note that the variables will be available until the user task is reached
and persisted to the database. For example, in the _Additional Work_
user task they are not available anymore. Also note that if _Fetch Data_
would have been asynchronous, they won’t be available after that step
too.

The _Fetch Data_ (simplified) could be something like

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
----

[.tok-kd]#public# [.tok-kd]#static# [.tok-kd]#class#
[.tok-nc]#FetchDataServiceTask# [.tok-kd]#implements#
[.tok-n]#JavaDelegate# [.tok-o]#\{# [.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#execute#[.tok-o]#(#[.tok-n]#DelegateExecution#
[.tok-n]#execution#[.tok-o]#)# [.tok-o]#\{# [.tok-n]#String#
[.tok-n]#configParam01# [.tok-o]#=#
[.tok-o]#(#[.tok-n]#String#[.tok-o]#)#
[.tok-n]#execution#[.tok-o]#.#[.tok-na]#getVariable#[.tok-o]#(#[.tok-n]#configParam01#[.tok-o]#);#
[.tok-c1]#// ...# [.tok-n]#RestReponse# [.tok-n]#restResponse#
[.tok-o]#=# [.tok-n]#executeRestCall#[.tok-o]#();#
[.tok-n]#execution#[.tok-o]#.#[.tok-na]#setTransientVariable#[.tok-o]#(#[.tok-s]#"response"#[.tok-o]#,#
[.tok-n]#restResponse#[.tok-o]#.#[.tok-na]#getBody#[.tok-o]#());#
[.tok-n]#execution#[.tok-o]#.#[.tok-na]#setTransientVariable#[.tok-o]#(#[.tok-s]#"status"#[.tok-o]#,#
[.tok-n]#restResponse#[.tok-o]#.#[.tok-na]#getStatus#[.tok-o]#());#
[.tok-o]#}# [.tok-o]#}#

The _Process Data_ would get the response transient variable, parse it
and store the relevant data in real process variables as we need them
later.

The condition on the sequence flow leaving the exclusive gateway are
oblivious to whether persistent or transient variables are used (in this
case the _status_ transient variable):

[source,pygments,highlight]
----
1
----

[.tok-nt]#<conditionExpression#
[.tok-na]#xsi:type=#[.tok-s]#"tFormalExpression"#[.tok-nt]##>##$\{status
== 200}[.tok-nt]#</conditionExpression>#

[[apiExpressions]]
== 4.7. Expressions

Activiti uses UEL for expression-resolving. UEL stands for _Unified
Expression Language_ and is part of the EE6 specification (see
http://docs.oracle.com/javaee/6/tutorial/doc/gjddd.html[the EE6
specification] for detailed information). To support all features of
latest UEL spec on ALL environments, we use a modified version of JUEL.

Expressions can be used in for example link:#bpmnJavaServiceTaskXML[Java
Service tasks], link:#executionListeners[Execution Listeners],
link:#taskListeners[Task Listeners] and
link:#conditionalSequenceFlowXml[Conditional sequence flows]. Although
there are 2 types of expressions, value-expression and
method-expression, Activiti abstracts this so they can both be used
where an `expression` is needed.

* *Value expression*: resolves to a value. By default, all process
variables are available to use. Also all spring-beans (if using Spring)
are available to use in expressions. Some examples:

....
${myVar}
${myBean.myProperty}
....

* *Method expression*: invokes a method, with or without parameters.
*When invoking a method without parameters, be sure to add empty
parentheses after the method-name (as this distinguishes the expression
from a value expression).* The passed parameters can be literal values
or expressions that are resolved themselves. Examples:

....
${printer.print()}
${myBean.addNewOrder('orderName')}
${myBean.doSomething(myVar, execution)}
....

Note that these expressions support resolving primitives (incl.
comparing them), beans, lists, arrays and maps.

On top of all process variables, there are a few default objects
available to be used in expressions:

* `execution`: The `DelegateExecution` that holds additional information
about the ongoing execution.
* `task`: The `DelegateTask` that holds additional information about the
current Task. *Note: Only works in expressions evaluated from task
listeners.*
* `authenticatedUserId`: The id of the user that is currently
authenticated. If no user is authenticated, the variable is not
available.

For more concrete usage and examples, check out
link:#springExpressions[Expressions in Spring],
link:#bpmnJavaServiceTaskXML[Java Service tasks],
link:#executionListeners[Execution Listeners], link:#taskListeners[Task
Listeners] or link:#conditionalSequenceFlowXml[Conditional sequence
flows].

[[apiUnitTesting]]
== 4.8. Unit testing

Business processes are an integral part of software projects and they
should be tested in the same way normal application logic is tested:
with unit tests. Since Activiti is an embeddable Java engine, writing
unit tests for business processes is as simple as writing regular unit
tests.

Activiti supports both JUnit versions 3 and 4 styles of unit testing. In
the JUnit 3 style, the `org.activiti.engine.test.ActivitiTestCase` must
be extended. This will make the ProcessEngine and the services available
through protected member fields. In the `setup()` of the test, the
processEngine will be initialized by default with the `activiti.cfg.xml`
resource on the classpath. To specify a different configuration file,
override the _getConfigurationResource()_ method. Process engines are
cached statically over multiple unit tests when the configuration
resource is the same.

By extending `ActivitiTestCase`, you can annotate test methods with
`org.activiti.engine.test.Deployment`. Before the test is run, a
resource file of the form `testClassName.testMethod.bpmn20.xml` in the
same package as the test class, will be deployed. At the end of the
test, the deployment will be deleted, including all related process
instances, tasks, etc. The `Deployment` annotation also supports setting
the resource location explicitly. See the class itself for more
information.

Taking all that in account, a JUnit 3 style test looks as follows.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
----

[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#MyBusinessProcessTest#
[.tok-kd]#extends# [.tok-n]#ActivitiTestCase# [.tok-o]#\{#
[.tok-nd]#@Deployment# [.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#testSimpleProcess#[.tok-o]#()# [.tok-o]#\{#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#startProcessInstanceByKey#[.tok-o]#(#[.tok-s]#"simpleProcess"#[.tok-o]#);#
[.tok-n]#Task# [.tok-n]#task# [.tok-o]#=#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#createTaskQuery#[.tok-o]#().#[.tok-na]#singleResult#[.tok-o]#();#
[.tok-n]#assertEquals#[.tok-o]#(#[.tok-s]#"My Task"#[.tok-o]#,#
[.tok-n]#task#[.tok-o]#.#[.tok-na]#getName#[.tok-o]#());#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#complete#[.tok-o]#(#[.tok-n]#task#[.tok-o]#.#[.tok-na]#getId#[.tok-o]#());#
[.tok-n]#assertEquals#[.tok-o]#(#[.tok-mi]#0#[.tok-o]#,#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#createProcessInstanceQuery#[.tok-o]#().#[.tok-na]#count#[.tok-o]#());#
[.tok-o]#}# [.tok-o]#}#

To get the same functionality when using the JUnit 4 style of writing
unit tests, the `org.activiti.engine.test.ActivitiRule` Rule must be
used. Through this rule, the process engine and services are available
through getters. As with the `ActivitiTestCase` (see above), including
this `Rule` will enable the use of the
`org.activiti.engine.test.Deployment` annotation (see above for an
explanation of its use and configuration) and it will look for the
default configuration file on the classpath. Process engines are
statically cached over multiple unit tests when using the same
configuration resource.

The following code snippet shows an example of using the JUnit 4 style
of testing and the usage of the `ActivitiRule`.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
----

[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#MyBusinessProcessTest#
[.tok-o]#\{# [.tok-nd]#@Rule# [.tok-kd]#public# [.tok-n]#ActivitiRule#
[.tok-n]#activitiRule# [.tok-o]#=# [.tok-k]#new#
[.tok-n]#ActivitiRule#[.tok-o]#();# [.tok-nd]#@Test#
[.tok-nd]#@Deployment# [.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#ruleUsageExample#[.tok-o]#()# [.tok-o]#\{#
[.tok-n]#RuntimeService# [.tok-n]#runtimeService# [.tok-o]#=#
[.tok-n]#activitiRule#[.tok-o]#.#[.tok-na]#getRuntimeService#[.tok-o]#();#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#startProcessInstanceByKey#[.tok-o]#(#[.tok-s]#"ruleUsage"#[.tok-o]#);#
[.tok-n]#TaskService# [.tok-n]#taskService# [.tok-o]#=#
[.tok-n]#activitiRule#[.tok-o]#.#[.tok-na]#getTaskService#[.tok-o]#();#
[.tok-n]#Task# [.tok-n]#task# [.tok-o]#=#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#createTaskQuery#[.tok-o]#().#[.tok-na]#singleResult#[.tok-o]#();#
[.tok-n]#assertEquals#[.tok-o]#(#[.tok-s]#"My Task"#[.tok-o]#,#
[.tok-n]#task#[.tok-o]#.#[.tok-na]#getName#[.tok-o]#());#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#complete#[.tok-o]#(#[.tok-n]#task#[.tok-o]#.#[.tok-na]#getId#[.tok-o]#());#
[.tok-n]#assertEquals#[.tok-o]#(#[.tok-mi]#0#[.tok-o]#,#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#createProcessInstanceQuery#[.tok-o]#().#[.tok-na]#count#[.tok-o]#());#
[.tok-o]#}# [.tok-o]#}#

[[apiDebuggingUnitTest]]
== 4.9. Debugging unit tests

When using the in-memory H2 database for unit tests, the following
instructions allow to easily inspect the data in the Activiti database
during a debugging session. The screenshots here are taken in Eclipse,
but the mechanism should be similar for other IDEs.

Suppose we have put a _breakpoint_ somewhere in our unit test. In
Eclipse this is done by double-clicking in the left border next to the
code:

image:images/api.test.debug.breakpoint.png[api.test.debug.breakpoint]

If we now run the unit test in _debug_ mode (right-click in test class,
select _Run as_ and then _JUnit test_), the test execution halts at our
breakpoint, where we can now inspect the variables of our test as shown
in the right upper panel.

image:images/api.test.debug.view.png[api.test.debug.view]

To inspect the Activiti data, open up the _'Display'_ window (if this
window isn’t there, open Window→Show View→Other and select _Display_.)
and type (code completion is available)
`org.h2.tools.Server.createWebServer("-web").start()`

image:images/api.test.debug.start.h2.server.png[api.test.debug.start.h2.server]

Select the line you’ve just typed and right-click on it. Now select
_Display_ (or execute the shortcut instead of right-clicking)

image:images/api.test.debug.start.h2.server.2.png[api.test.debug.start.h2.server.2]

Now open up a browser and go to
http://localhost:8082[]http://localhost:8082, and fill in the JDBC URL
to the in-memory database (by default this is `jdbc:h2:mem:activiti`),
and hit the connect button.

image:images/api.test.debug.h2.login.png[api.test.debug.h2.login]

You can now see the Activiti data and use it to understand how and why
your unit test is executing your process in a certain way.

image:images/api.test.debug.h2.tables.png[api.test.debug.h2.tables]

[[apiProcessEngineInWebApp]]
== 4.10. The process engine in a web application

The `ProcessEngine` is a thread-safe class and can easily be shared
among multiple threads. In a web application, this means it is possible
to create the process engine once when the container boots and shut down
the engine when the container goes down.

The following code snippet shows how you can write a simple
`ServletContextListener` to initialize and destroy process engines in a
plain Servlet environment:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
----

[.tok-kd]#public# [.tok-kd]#class#
[.tok-nc]#ProcessEnginesServletContextListener# [.tok-kd]#implements#
[.tok-n]#ServletContextListener# [.tok-o]#\{# [.tok-kd]#public#
[.tok-kt]#void#
[.tok-nf]#contextInitialized#[.tok-o]#(#[.tok-n]#ServletContextEvent#
[.tok-n]#servletContextEvent#[.tok-o]#)# [.tok-o]#\{#
[.tok-n]#ProcessEngines#[.tok-o]#.#[.tok-na]#init#[.tok-o]#();#
[.tok-o]#}# [.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#contextDestroyed#[.tok-o]#(#[.tok-n]#ServletContextEvent#
[.tok-n]#servletContextEvent#[.tok-o]#)# [.tok-o]#\{#
[.tok-n]#ProcessEngines#[.tok-o]#.#[.tok-na]#destroy#[.tok-o]#();#
[.tok-o]#}# [.tok-o]#}#

The `contextInitialized` method will delegate to
`ProcessEngines.init()`. That will look for `activiti.cfg.xml` resource
files on the classpath, and create a `ProcessEngine` for the given
configurations (e.g. multiple jars with a configuration file). If you
have multiple such resource files on the classpath, make sure they all
have different names. When the process engine is needed, it can be
fetched using

[source,pygments,highlight]
----
1
----

[.tok-n]#ProcessEngines#[.tok-o]#.#[.tok-na]#getDefaultProcessEngine#[.tok-o]#()#

or

[source,pygments,highlight]
----
1
----

[.tok-n]#ProcessEngines#[.tok-o]#.#[.tok-na]#getProcessEngine#[.tok-o]#(#[.tok-s]#"myName"#[.tok-o]#);#

Of course, it is also possible to use any of the variants of creating a
process engine, as described in the link:#configuration[configuration
section].

The `contextDestroyed` method of the context-listener delegates to
`ProcessEngines.destroy()`. That will properly close all initialized
process engines.

[[springintegration]]
== 5. Spring integration

While you can definitely use Activiti without Spring, we’ve provided
some very nice integration features that are explained in this chapter.

[[_processenginefactorybean]]
=== 5.1. ProcessEngineFactoryBean

The `ProcessEngine` can be configured as a regular Spring bean. The
starting point of the integration is the class
`org.activiti.spring.ProcessEngineFactoryBean`. That bean takes a
process engine configuration and creates the process engine. This means
that the creation and configuration of properties for Spring is the same
as documented in the link:#configuration[configuration section]. For
Spring integration the configuration and engine beans will look like
this:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"processEngineConfiguration"#
[.tok-na]#class=#[.tok-s]#"org.activiti.spring.SpringProcessEngineConfiguration"#[.tok-nt]#>#
... [.tok-nt]#</bean># [.tok-nt]#<bean#
[.tok-na]#id=#[.tok-s]#"processEngine"#
[.tok-na]#class=#[.tok-s]#"org.activiti.spring.ProcessEngineFactoryBean"#[.tok-nt]#>#
[.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"processEngineConfiguration"#
[.tok-na]#ref=#[.tok-s]#"processEngineConfiguration"# [.tok-nt]#/>#
[.tok-nt]#</bean>#

Note that the `processEngineConfiguration` bean now uses the
`org.activiti.spring.SpringProcessEngineConfiguration` class.

[[_transactions]]
== 5.2. Transactions

We’ll explain the `SpringTransactionIntegrationTest` found in the Spring
examples of the distribution step by step. Below is the Spring
configuration file that we use in this example (you can find it in
SpringTransactionIntegrationTest-context.xml). The section shown below
contains the dataSource, transactionManager, processEngine and the
Activiti Engine services.

When passing the DataSource to the `SpringProcessEngineConfiguration`
(using property "dataSource"), Activiti uses a
`org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy`
internally, which wraps the passed DataSource. This is done to make sure
the SQL connections retrieved from the DataSource and the Spring
transactions play well together. This implies that it’s no longer needed
to proxy the dataSource yourself in Spring configuration, although it’s
still allowed to pass a `TransactionAwareDataSourceProxy` into the
`SpringProcessEngineConfiguration`. In this case no additional wrapping
will occur.

*Make sure when declaring a `TransactionAwareDataSourceProxy` in Spring
configuration yourself, that you don’t use it for resources that are
already aware of Spring-transactions (e.g. DataSourceTransactionManager
and JPATransactionManager need the un-proxied dataSource).*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
----

[.tok-nt]#<beans#
[.tok-na]#xmlns=#[.tok-s]#"http://www.springframework.org/schema/beans"#
[.tok-na]#xmlns:context=#[.tok-s]#"http://www.springframework.org/schema/context"#
[.tok-na]#xmlns:tx=#[.tok-s]#"http://www.springframework.org/schema/tx"#
[.tok-na]#xmlns:xsi=#[.tok-s]#"http://www.w3.org/2001/XMLSchema-instance"#
[.tok-na]#xsi:schemaLocation=#[.tok-s]#"http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd# [.tok-s]#
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-2.5.xsd#
[.tok-s]# http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"#[.tok-nt]#>#
[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"dataSource"#
[.tok-na]#class=#[.tok-s]#"org.springframework.jdbc.datasource.SimpleDriverDataSource"#[.tok-nt]#>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"driverClass"#
[.tok-na]#value=#[.tok-s]#"org.h2.Driver"# [.tok-nt]#/>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"url"#
[.tok-na]#value=#[.tok-s]#"jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000"#
[.tok-nt]#/># [.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"username"#
[.tok-na]#value=#[.tok-s]#"sa"# [.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"password"# [.tok-na]#value=#[.tok-s]#""#
[.tok-nt]#/># [.tok-nt]#</bean># [.tok-nt]#<bean#
[.tok-na]#id=#[.tok-s]#"transactionManager"#
[.tok-na]#class=#[.tok-s]#"org.springframework.jdbc.datasource.DataSourceTransactionManager"#[.tok-nt]#>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"dataSource"#
[.tok-na]#ref=#[.tok-s]#"dataSource"# [.tok-nt]#/># [.tok-nt]#</bean>#
[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"processEngineConfiguration"#
[.tok-na]#class=#[.tok-s]#"org.activiti.spring.SpringProcessEngineConfiguration"#[.tok-nt]#>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"dataSource"#
[.tok-na]#ref=#[.tok-s]#"dataSource"# [.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"transactionManager"#
[.tok-na]#ref=#[.tok-s]#"transactionManager"# [.tok-nt]#/>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"databaseSchemaUpdate"#
[.tok-na]#value=#[.tok-s]#"true"# [.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"asyncExecutorActivate"#
[.tok-na]#value=#[.tok-s]#"false"# [.tok-nt]#/># [.tok-nt]#</bean>#
[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"processEngine"#
[.tok-na]#class=#[.tok-s]#"org.activiti.spring.ProcessEngineFactoryBean"#[.tok-nt]#>#
[.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"processEngineConfiguration"#
[.tok-na]#ref=#[.tok-s]#"processEngineConfiguration"# [.tok-nt]#/>#
[.tok-nt]#</bean># [.tok-nt]#<bean#
[.tok-na]#id=#[.tok-s]#"repositoryService"#
[.tok-na]#factory-bean=#[.tok-s]#"processEngine"#
[.tok-na]#factory-method=#[.tok-s]#"getRepositoryService"# [.tok-nt]#/>#
[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"runtimeService"#
[.tok-na]#factory-bean=#[.tok-s]#"processEngine"#
[.tok-na]#factory-method=#[.tok-s]#"getRuntimeService"# [.tok-nt]#/>#
[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"taskService"#
[.tok-na]#factory-bean=#[.tok-s]#"processEngine"#
[.tok-na]#factory-method=#[.tok-s]#"getTaskService"# [.tok-nt]#/>#
[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"historyService"#
[.tok-na]#factory-bean=#[.tok-s]#"processEngine"#
[.tok-na]#factory-method=#[.tok-s]#"getHistoryService"# [.tok-nt]#/>#
[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"managementService"#
[.tok-na]#factory-bean=#[.tok-s]#"processEngine"#
[.tok-na]#factory-method=#[.tok-s]#"getManagementService"# [.tok-nt]#/>#
...

The remainder of that Spring configuration file contains the beans and
configuration that we’ll use in this particular example:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
----

[.tok-nt]#<beans># ... [.tok-nt]#<tx:annotation-driven#
[.tok-na]#transaction-manager=#[.tok-s]#"transactionManager"#[.tok-nt]#/>#
[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"userBean"#
[.tok-na]#class=#[.tok-s]#"org.activiti.spring.test.UserBean"#[.tok-nt]#>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"runtimeService"#
[.tok-na]#ref=#[.tok-s]#"runtimeService"# [.tok-nt]#/>#
[.tok-nt]#</bean># [.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"printer"#
[.tok-na]#class=#[.tok-s]#"org.activiti.spring.test.Printer"#
[.tok-nt]#/># [.tok-nt]#</beans>#

First the application context is created with any of the Spring ways to
do that. In this example you could use a classpath XML resource to
configure our Spring application context:

[source,pygments,highlight]
----
1
2
----

[.tok-n]#ClassPathXmlApplicationContext# [.tok-n]#applicationContext#
[.tok-o]#=# [.tok-k]#new#
[.tok-n]#ClassPathXmlApplicationContext#[.tok-o]#(#
[.tok-s]#"org/activiti/examples/spring/SpringTransactionIntegrationTest-context.xml"#[.tok-o]#);#

or since it is a test:

[source,pygments,highlight]
----
1
----

[.tok-nd]#@ContextConfiguration#[.tok-o]#(#[.tok-s]#"classpath:org/activiti/spring/test/transaction/SpringTransactionIntegrationTest-context.xml"#[.tok-o]#)#

Then we can get the service beans and invoke methods on them. The
ProcessEngineFactoryBean will have added an extra interceptor to the
services that applies Propagation.REQUIRED transaction semantics on the
Activiti service methods. So, for example, we can use the
repositoryService to deploy a process like this:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-n]#RepositoryService# [.tok-n]#repositoryService# [.tok-o]#=#
[.tok-o]#(#[.tok-n]#RepositoryService#[.tok-o]#)#
[.tok-n]#applicationContext#[.tok-o]#.#[.tok-na]#getBean#[.tok-o]#(#[.tok-s]#"repositoryService"#[.tok-o]#);#
[.tok-n]#String# [.tok-n]#deploymentId# [.tok-o]#=#
[.tok-n]#repositoryService#
[.tok-o]#.#[.tok-na]#createDeployment#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#addClasspathResource#[.tok-o]#(#[.tok-s]#"org/activiti/spring/test/hello.bpmn20.xml"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#deploy#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#getId#[.tok-o]#();#

The other way around also works. In this case, the Spring transaction
will be around the userBean.hello() method and the Activiti service
method invocation will join that same transaction.

[source,pygments,highlight]
----
1
2
----

[.tok-n]#UserBean# [.tok-n]#userBean# [.tok-o]#=#
[.tok-o]#(#[.tok-n]#UserBean#[.tok-o]#)#
[.tok-n]#applicationContext#[.tok-o]#.#[.tok-na]#getBean#[.tok-o]#(#[.tok-s]#"userBean"#[.tok-o]#);#
[.tok-n]#userBean#[.tok-o]#.#[.tok-na]#hello#[.tok-o]#();#

The UserBean looks like this. Remember from above in the Spring bean
configuration we injected the repositoryService into the userBean.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
----

[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#UserBean# [.tok-o]#\{#
[.tok-cm]#/** injected by Spring */# [.tok-kd]#private#
[.tok-n]#RuntimeService# [.tok-n]#runtimeService#[.tok-o]#;#
[.tok-nd]#@Transactional# [.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#hello#[.tok-o]#()# [.tok-o]#\{# [.tok-c1]#// here you can do
transactional stuff in your domain model# [.tok-c1]#// and it will be
combined in the same transaction as# [.tok-c1]#// the
startProcessInstanceByKey to the Activiti RuntimeService#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#startProcessInstanceByKey#[.tok-o]#(#[.tok-s]#"helloProcess"#[.tok-o]#);#
[.tok-o]#}# [.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#setRuntimeService#[.tok-o]#(#[.tok-n]#RuntimeService#
[.tok-n]#runtimeService#[.tok-o]#)# [.tok-o]#\{#
[.tok-k]#this#[.tok-o]#.#[.tok-na]#runtimeService# [.tok-o]#=#
[.tok-n]#runtimeService#[.tok-o]#;# [.tok-o]#}# [.tok-o]#}#

[[springExpressions]]
== 5.3. Expressions

When using the ProcessEngineFactoryBean, by default, all
link:#apiExpressions[expressions] in the BPMN processes will also _see_
all the Spring beans. It’s possible to limit the beans you want to
expose in expressions or even exposing no beans at all using a map that
you can configure. The example below exposes a single bean (printer),
available to use under the key "printer". *To have NO beans exposed at
all, just pass an empty list as _beans_ property on the
SpringProcessEngineConfiguration. When no _beans_ property is set, all
Spring beans in the context will be available.*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
----

[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"processEngineConfiguration"#
[.tok-na]#class=#[.tok-s]#"org.activiti.spring.SpringProcessEngineConfiguration"#[.tok-nt]#>#
... [.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"beans"#[.tok-nt]#>#
[.tok-nt]#<map># [.tok-nt]#<entry# [.tok-na]#key=#[.tok-s]#"printer"#
[.tok-na]#value-ref=#[.tok-s]#"printer"# [.tok-nt]#/># [.tok-nt]#</map>#
[.tok-nt]#</property># [.tok-nt]#</bean># [.tok-nt]#<bean#
[.tok-na]#id=#[.tok-s]#"printer"#
[.tok-na]#class=#[.tok-s]#"org.activiti.examples.spring.Printer"#
[.tok-nt]#/>#

Now the exposed beans can be used in expressions: for example, the
SpringTransactionIntegrationTest `hello.bpmn20.xml` shows how a method
on a Spring bean can be invoked using a UEL method expression:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
----

[.tok-nt]#<definitions#
[.tok-na]#id=#[.tok-s]#"definitions"#[.tok-nt]#># [.tok-nt]#<process#
[.tok-na]#id=#[.tok-s]#"helloProcess"#[.tok-nt]#>#
[.tok-nt]#<startEvent# [.tok-na]#id=#[.tok-s]#"start"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow1"#
[.tok-na]#sourceRef=#[.tok-s]#"start"#
[.tok-na]#targetRef=#[.tok-s]#"print"# [.tok-nt]#/>#
[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"print"#
[.tok-na]#activiti:expression=#[.tok-s]#"#\{printer.printMessage()}"#
[.tok-nt]#/># [.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow2"#
[.tok-na]#sourceRef=#[.tok-s]#"print"#
[.tok-na]#targetRef=#[.tok-s]#"end"# [.tok-nt]#/># [.tok-nt]#<endEvent#
[.tok-na]#id=#[.tok-s]#"end"# [.tok-nt]#/># [.tok-nt]#</process>#
[.tok-nt]#</definitions>#

Where `Printer` looks like this:

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#Printer# [.tok-o]#\{#
[.tok-kd]#public# [.tok-kt]#void# [.tok-nf]#printMessage#[.tok-o]#()#
[.tok-o]#\{#
[.tok-n]#System#[.tok-o]#.#[.tok-na]#out#[.tok-o]#.#[.tok-na]#println#[.tok-o]#(#[.tok-s]#"hello
world"#[.tok-o]#);# [.tok-o]#}# [.tok-o]#}#

And the Spring bean configuration (also shown above) looks like this:

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-nt]#<beans># ... [.tok-nt]#<bean#
[.tok-na]#id=#[.tok-s]#"printer"#
[.tok-na]#class=#[.tok-s]#"org.activiti.examples.spring.Printer"#
[.tok-nt]#/># [.tok-nt]#</beans>#

[[_automatic_resource_deployment]]
== 5.4. Automatic resource deployment

Spring integration also has a special feature for deploying resources.
In the process engine configuration, you can specify a set of resources.
When the process engine is created, all those resources will be scanned
and deployed. There is filtering in place that prevents duplicate
deployments. Only when the resources actually have changed, will new
deployments be deployed to the Activiti DB. This makes sense in a lot of
use case, where the Spring container is rebooted often (e.g. testing).

Here’s an example:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"processEngineConfiguration"#
[.tok-na]#class=#[.tok-s]#"org.activiti.spring.SpringProcessEngineConfiguration"#[.tok-nt]#>#
... [.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"deploymentResources"#
[.tok-na]#value=#[.tok-s]#"classpath*:/org/activiti/spring/test/autodeployment/autodeploy.*.bpmn20.xml"#
[.tok-nt]#/># [.tok-nt]#</bean># [.tok-nt]#<bean#
[.tok-na]#id=#[.tok-s]#"processEngine"#
[.tok-na]#class=#[.tok-s]#"org.activiti.spring.ProcessEngineFactoryBean"#[.tok-nt]#>#
[.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"processEngineConfiguration"#
[.tok-na]#ref=#[.tok-s]#"processEngineConfiguration"# [.tok-nt]#/>#
[.tok-nt]#</bean>#

By default, the configuration above will group all of the resources
matching the filtering into a single deployment to the Activiti engine.
The duplicate filtering to prevent re-deployment of unchanged resources
applies to the whole deployment. In some cases, this may not be what you
want. For instance, if you deploy a set of process resources this way
and only a single process definition in those resources has changed, the
deployment as a whole will be considered new and all of the process
definitions in that deployment will be re-deployed, resulting in new
versions of each of the process definitions, even though only one was
actually changed.

To be able to customize the way deployments are determined, you can
specify an additional property in the
`SpringProcessEngineConfiguration`, `deploymentMode`. This property
defines the way deployments will be determined from the set of resources
that match the filter. There are 3 values that are supported by default
for this property:

* `default`: Group all resources into a single deployment and apply
duplicate filtering to that deployment. This is the default value and it
will be used if you don’t specify a value.
* `single-resource`: Create a separate deployment for each individual
resource and apply duplicate filtering to that deployment. This is the
value you would use to have each process definition be deployed
separately and only create a new process definition version if it has
changed.
* `resource-parent-folder`: Create a separate deployment for resources
that share the same parent folder and apply duplicate filtering to that
deployment. This value can be used to create separate deployments for
most resources, but still be able to group some by placing them in a
shared folder. Here’s an example of how to specify the `single-resource`
configuration for `deploymentMode`:

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"processEngineConfiguration"#
[.tok-na]#class=#[.tok-s]#"org.activiti.spring.SpringProcessEngineConfiguration"#[.tok-nt]#>#
... [.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"deploymentResources"#
[.tok-na]#value=#[.tok-s]#"classpath*:/activiti/*.bpmn"# [.tok-nt]#/>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"deploymentMode"#
[.tok-na]#value=#[.tok-s]#"single-resource"# [.tok-nt]#/>#
[.tok-nt]#</bean>#

In addition to using the values listed above for `deploymentMode`, you
may require customized behavior towards determining deployments. If so,
you can create a subclass of `SpringProcessEngineConfiguration` and
override the `getAutoDeploymentStrategy(String deploymentMode)` method.
This method determines which deployment strategy is used for a certain
value of the `deploymentMode` configuration.

[[springUnitTest]]
== 5.5. Unit testing

When integrating with Spring, business processes can be tested very
easily using the standard link:#apiUnitTesting[Activiti testing
facilities]. The following example shows how a business process is
tested in a typical Spring-based unit test:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
----

[.tok-nd]#@RunWith#[.tok-o]#(#[.tok-n]#SpringJUnit4ClassRunner#[.tok-o]#.#[.tok-na]#class#[.tok-o]#)#
[.tok-nd]#@ContextConfiguration#[.tok-o]#(#[.tok-s]#"classpath:org/activiti/spring/test/junit4/springTypicalUsageTest-context.xml"#[.tok-o]#)#
[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#MyBusinessProcessTest#
[.tok-o]#\{# [.tok-nd]#@Autowired# [.tok-kd]#private#
[.tok-n]#RuntimeService# [.tok-n]#runtimeService#[.tok-o]#;#
[.tok-nd]#@Autowired# [.tok-kd]#private# [.tok-n]#TaskService#
[.tok-n]#taskService#[.tok-o]#;# [.tok-nd]#@Autowired# [.tok-nd]#@Rule#
[.tok-kd]#public# [.tok-n]#ActivitiRule#
[.tok-n]#activitiSpringRule#[.tok-o]#;# [.tok-nd]#@Test#
[.tok-nd]#@Deployment# [.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#simpleProcessTest#[.tok-o]#()# [.tok-o]#\{#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#startProcessInstanceByKey#[.tok-o]#(#[.tok-s]#"simpleProcess"#[.tok-o]#);#
[.tok-n]#Task# [.tok-n]#task# [.tok-o]#=#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#createTaskQuery#[.tok-o]#().#[.tok-na]#singleResult#[.tok-o]#();#
[.tok-n]#assertEquals#[.tok-o]#(#[.tok-s]#"My Task"#[.tok-o]#,#
[.tok-n]#task#[.tok-o]#.#[.tok-na]#getName#[.tok-o]#());#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#complete#[.tok-o]#(#[.tok-n]#task#[.tok-o]#.#[.tok-na]#getId#[.tok-o]#());#
[.tok-n]#assertEquals#[.tok-o]#(#[.tok-mi]#0#[.tok-o]#,#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#createProcessInstanceQuery#[.tok-o]#().#[.tok-na]#count#[.tok-o]#());#
[.tok-o]#}# [.tok-o]#}#

Note that for this to work, you need to define a
_org.activiti.engine.test.ActivitiRule_ bean in the Spring configuration
(which is injected by auto-wiring in the example above).

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"activitiRule"#
[.tok-na]#class=#[.tok-s]#"org.activiti.engine.test.ActivitiRule"#[.tok-nt]#>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"processEngine"#
[.tok-na]#ref=#[.tok-s]#"processEngine"# [.tok-nt]#/>#
[.tok-nt]#</bean>#

[[_jpa_with_hibernate_4_2_x]]
== 5.6. JPA with Hibernate 4.2.x

When using Hibernate 4.2.x JPA in service task or listener logic in the
Activiti Engine an additional dependency to Spring ORM is needed. This
is not needed for Hibernate 4.1.x or lower. The following dependency
should be added:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<dependency>#
[.tok-nt]##<groupId>##org.springframework[.tok-nt]##</groupId>##
[.tok-nt]##<artifactId>##spring-orm[.tok-nt]##</artifactId>##
[.tok-nt]##<version>##$\{org.springframework.version}[.tok-nt]#</version>#
[.tok-nt]#</dependency>#

[[springSpringBoot]]
== 5.7. Spring Boot

Spring Boot is an application framework which, according to
http://projects.spring.io/spring-boot/[its website], _makes it easy to
create stand-alone, production-grade Spring based Applications that can
you can "just run". It takes an opinionated view of the Spring platform
and third-party libraries so you can get started with minimum fuss. Most
Spring Boot applications need very little Spring configuration_.

For more information on Spring Boot, see
http://projects.spring.io/spring-boot/[]http://projects.spring.io/spring-boot/

The Spring Boot - Activiti integration is currently experimental. It has
been developer together with Spring committers, but it is still early
days. We welcome all to try it out and provide feedback.

[[_compatibility]]
=== 5.7.1. Compatibility

Spring Boot requires a JDK 7 runtime. Please check the Spring Boot
documentation.

[[_getting_started_2]]
=== 5.7.2. Getting started

Spring Boot is all about convention over configuration. To get started,
simply add the _spring-boot-starters-basic_ dependency to your project.
For example for Maven:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<dependency>#
[.tok-nt]##<groupId>##org.activiti[.tok-nt]##</groupId>##
[.tok-nt]##<artifactId>##activiti-spring-boot-starter-basic[.tok-nt]##</artifactId>##
[.tok-nt]##<version>##$\{activiti.version}[.tok-nt]#</version>#
[.tok-nt]#</dependency>#

That’s all that’s needed. This dependency will transitively add the
correct Activiti and Spring dependencies to the classpath. You can now
write the Spring Boot application:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
----

[.tok-kn]#import#
[.tok-nn]#org.springframework.boot.SpringApplication#[.tok-o]#;#
[.tok-kn]#import#
[.tok-nn]#org.springframework.boot.autoconfigure.EnableAutoConfiguration#[.tok-o]#;#
[.tok-kn]#import#
[.tok-nn]#org.springframework.context.annotation.ComponentScan#[.tok-o]#;#
[.tok-kn]#import#
[.tok-nn]#org.springframework.context.annotation.Configuration#[.tok-o]#;#
[.tok-nd]#@Configuration# [.tok-nd]#@ComponentScan#
[.tok-nd]#@EnableAutoConfiguration# [.tok-kd]#public# [.tok-kd]#class#
[.tok-nc]#MyApplication# [.tok-o]#\{# [.tok-kd]#public#
[.tok-kd]#static# [.tok-kt]#void#
[.tok-nf]#main#[.tok-o]#(#[.tok-n]#String#[.tok-o]#[]#
[.tok-n]#args#[.tok-o]#)# [.tok-o]#\{#
[.tok-n]#SpringApplication#[.tok-o]#.#[.tok-na]#run#[.tok-o]#(#[.tok-n]#MyApplication#[.tok-o]#.#[.tok-na]#class#[.tok-o]#,#
[.tok-n]#args#[.tok-o]#);# [.tok-o]#}# [.tok-o]#}#

Activiti needs a database to store its data. If you would run the code
above, it would give you an informative exception message that you need
to add a database driver dependency to the classpath. For now, add the
H2 database dependency:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<dependency>#
[.tok-nt]##<groupId>##com.h2database[.tok-nt]##</groupId>##
[.tok-nt]##<artifactId>##h2[.tok-nt]##</artifactId>##
[.tok-nt]##<version>##1.4.183[.tok-nt]##</version>##
[.tok-nt]#</dependency>#

The application can now be started. You will see output like this:

....
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v1.1.6.RELEASE)

MyApplication                            : Starting MyApplication on ...
s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@33cb5951: startup date [Wed Dec 17 15:24:34 CET 2014]; root of context hierarchy
a.s.b.AbstractProcessEngineConfiguration : No process definitions were found using the specified path (classpath:/processes/**.bpmn20.xml).
o.activiti.engine.impl.db.DbSqlSession   : performing create on engine with resource org/activiti/db/create/activiti.h2.create.engine.sql
o.activiti.engine.impl.db.DbSqlSession   : performing create on history with resource org/activiti/db/create/activiti.h2.create.history.sql
o.activiti.engine.impl.db.DbSqlSession   : performing create on identity with resource org/activiti/db/create/activiti.h2.create.identity.sql
o.a.engine.impl.ProcessEngineImpl        : ProcessEngine default created
o.a.e.i.a.DefaultAsyncJobExecutor        : Starting up the default async job executor [org.activiti.spring.SpringAsyncExecutor].
o.a.e.i.a.AcquireTimerJobsRunnable       : {} starting to acquire async jobs due
o.a.e.i.a.AcquireAsyncJobsDueRunnable    : {} starting to acquire async jobs due
o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup
MyApplication                            : Started MyApplication in 2.019 seconds (JVM running for 2.294)
....

So by just adding the dependency to the classpath and using the
_@EnableAutoConfiguration_ annotation a lot has happened behind the
scenes:

* An in-memory datasource is created automatically (since the H2 driver
is on the classpath) and passed to the Activiti process engine
configuration
* An Activiti ProcessEngine bean is created and exposed
* All the Activiti services are exposed as Spring beans
* The Spring Job Executor is created

Also, any BPMN 2.0 process definition in the _processes_ folder would be
automatically deployed. Create a folder _processes_ and add a dummy
process definition (named _one-task-process.bpmn20.xml_) to this folder.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
----

[.tok-cp]#<?xml version="1.0" encoding="UTF-8"?>#
[.tok-nt]#<definitions#
[.tok-na]#xmlns=#[.tok-s]#"http://www.omg.org/spec/BPMN/20100524/MODEL"#
[.tok-na]#xmlns:activiti=#[.tok-s]#"http://activiti.org/bpmn"#
[.tok-na]#targetNamespace=#[.tok-s]#"Examples"#[.tok-nt]#>#
[.tok-nt]#<process# [.tok-na]#id=#[.tok-s]#"oneTaskProcess"#
[.tok-na]#name=#[.tok-s]#"The One Task Process"#[.tok-nt]#>#
[.tok-nt]#<startEvent# [.tok-na]#id=#[.tok-s]#"theStart"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow1"#
[.tok-na]#sourceRef=#[.tok-s]#"theStart"#
[.tok-na]#targetRef=#[.tok-s]#"theTask"# [.tok-nt]#/>#
[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"theTask"#
[.tok-na]#name=#[.tok-s]#"my task"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow2"#
[.tok-na]#sourceRef=#[.tok-s]#"theTask"#
[.tok-na]#targetRef=#[.tok-s]#"theEnd"# [.tok-nt]#/>#
[.tok-nt]#<endEvent# [.tok-na]#id=#[.tok-s]#"theEnd"# [.tok-nt]#/>#
[.tok-nt]#</process># [.tok-nt]#</definitions>#

Also add following code lines to test if the deployment actually worked.
The _CommandLineRunner_ is a special kind of Spring bean that is
executed when the application boots:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
----

[.tok-nd]#@Configuration# [.tok-nd]#@ComponentScan#
[.tok-nd]#@EnableAutoConfiguration# [.tok-kd]#public# [.tok-kd]#class#
[.tok-nc]#MyApplication# [.tok-o]#\{# [.tok-kd]#public#
[.tok-kd]#static# [.tok-kt]#void#
[.tok-nf]#main#[.tok-o]#(#[.tok-n]#String#[.tok-o]#[]#
[.tok-n]#args#[.tok-o]#)# [.tok-o]#\{#
[.tok-n]#SpringApplication#[.tok-o]#.#[.tok-na]#run#[.tok-o]#(#[.tok-n]#MyApplication#[.tok-o]#.#[.tok-na]#class#[.tok-o]#,#
[.tok-n]#args#[.tok-o]#);# [.tok-o]#}# [.tok-nd]#@Bean#
[.tok-kd]#public# [.tok-n]#CommandLineRunner#
[.tok-nf]#init#[.tok-o]#(#[.tok-kd]#final# [.tok-n]#RepositoryService#
[.tok-n]#repositoryService#[.tok-o]#,# [.tok-kd]#final#
[.tok-n]#RuntimeService# [.tok-n]#runtimeService#[.tok-o]#,#
[.tok-kd]#final# [.tok-n]#TaskService# [.tok-n]#taskService#[.tok-o]#)#
[.tok-o]#\{# [.tok-k]#return# [.tok-k]#new#
[.tok-n]#CommandLineRunner#[.tok-o]#()# [.tok-o]#\{#
[.tok-nd]#@Override# [.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#run#[.tok-o]#(#[.tok-n]#String#[.tok-o]#...#
[.tok-n]#strings#[.tok-o]#)# [.tok-kd]#throws# [.tok-n]#Exception#
[.tok-o]#\{#
[.tok-n]#System#[.tok-o]#.#[.tok-na]#out#[.tok-o]#.#[.tok-na]#println#[.tok-o]#(#[.tok-s]#"Number
of process definitions : "# [.tok-o]#+#
[.tok-n]#repositoryService#[.tok-o]#.#[.tok-na]#createProcessDefinitionQuery#[.tok-o]#().#[.tok-na]#count#[.tok-o]#());#
[.tok-n]#System#[.tok-o]#.#[.tok-na]#out#[.tok-o]#.#[.tok-na]#println#[.tok-o]#(#[.tok-s]#"Number
of tasks : "# [.tok-o]#+#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#createTaskQuery#[.tok-o]#().#[.tok-na]#count#[.tok-o]#());#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#startProcessInstanceByKey#[.tok-o]#(#[.tok-s]#"oneTaskProcess"#[.tok-o]#);#
[.tok-n]#System#[.tok-o]#.#[.tok-na]#out#[.tok-o]#.#[.tok-na]#println#[.tok-o]#(#[.tok-s]#"Number
of tasks after process start: "# [.tok-o]#+#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#createTaskQuery#[.tok-o]#().#[.tok-na]#count#[.tok-o]#());#
[.tok-o]#}# [.tok-o]#};# [.tok-o]#}# [.tok-o]#}#

The output will be as expected:

....
Number of process definitions : 1
Number of tasks : 0
Number of tasks after process start : 1
....

[[_changing_the_database_and_connection_pool]]
== 5.7.3. Changing the database and connection pool

As stated above, Spring Boot is about convention over configuration. By
default, by having only H2 on the classpath, it created an in memory
datasource and passed that to the Activiti process engine configuration.

To change the datasource, simply override the default by providing a
Datasource bean. We’re using the _DataSourceBuilder_ class here, which
is a helper class from Spring Boot. If Tomcat, HikariCP or Commons DBCP
are on the classpath one of them will be selected (in that order with
Tomcat first). For example, to switch to a MySQL database:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-nd]#@Bean# [.tok-kd]#public# [.tok-n]#DataSource#
[.tok-nf]#database#[.tok-o]#()# [.tok-o]#\{# [.tok-k]#return#
[.tok-n]#DataSourceBuilder#[.tok-o]#.#[.tok-na]#create#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#url#[.tok-o]#(#[.tok-s]#"jdbc:mysql://127.0.0.1:3306/activiti-spring-boot?characterEncoding=UTF-8"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#username#[.tok-o]#(#[.tok-s]#"alfresco"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#password#[.tok-o]#(#[.tok-s]#"alfresco"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#driverClassName#[.tok-o]#(#[.tok-s]#"com.mysql.jdbc.Driver"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#build#[.tok-o]#();# [.tok-o]#}#

Remove H2 from the Maven dependencies and add the MySQL driver and the
Tomcat connection pooling to the classpath:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
----

[.tok-nt]#<dependency>#
[.tok-nt]##<groupId>##mysql[.tok-nt]##</groupId>##
[.tok-nt]##<artifactId>##mysql-connector-java[.tok-nt]##</artifactId>##
[.tok-nt]##<version>##5.1.34[.tok-nt]##</version>##
[.tok-nt]#</dependency># [.tok-nt]#<dependency>#
[.tok-nt]##<groupId>##org.apache.tomcat[.tok-nt]##</groupId>##
[.tok-nt]##<artifactId>##tomcat-jdbc[.tok-nt]##</artifactId>##
[.tok-nt]##<version>##8.0.15[.tok-nt]##</version>##
[.tok-nt]#</dependency>#

When the app is now booted up, you’ll see it uses MySQL as database (and
the Tomcat connection pooling framework):

....
org.activiti.engine.impl.db.DbSqlSession   : performing create on engine with resource org/activiti/db/create/activiti.mysql.create.engine.sql
org.activiti.engine.impl.db.DbSqlSession   : performing create on history with resource org/activiti/db/create/activiti.mysql.create.history.sql
org.activiti.engine.impl.db.DbSqlSession   : performing create on identity with resource org/activiti/db/create/activiti.mysql.create.identity.sql
....

When you reboot the application multiple times, you’ll see the number of
tasks go up (the H2 in-memory database does not survive a shutdown, the
MySQL does).

[[_rest_support]]
== 5.7.4. REST support

Often, a REST API is needed on top of the embedded Activiti engine
(interacting with the different services in a company). Spring Boot
makes this really easy. Add following dependency to the classpath:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<dependency>#
[.tok-nt]##<groupId>##org.springframework.boot[.tok-nt]##</groupId>##
[.tok-nt]##<artifactId>##spring-boot-starter-web[.tok-nt]##</artifactId>##
[.tok-nt]##<version>##$\{spring.boot.version}[.tok-nt]#</version>#
[.tok-nt]#</dependency>#

Create a new class, a Spring service, and create two methods: one to
start our process and one to get a task list for a given assignee. We
simply wrap Activiti calls here, but in real-life scenario’s this
obviously will be more complex obviously.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
----

[.tok-nd]#@Service# [.tok-kd]#public# [.tok-kd]#class#
[.tok-nc]#MyService# [.tok-o]#\{# [.tok-nd]#@Autowired#
[.tok-kd]#private# [.tok-n]#RuntimeService#
[.tok-n]#runtimeService#[.tok-o]#;# [.tok-nd]#@Autowired#
[.tok-kd]#private# [.tok-n]#TaskService#
[.tok-n]#taskService#[.tok-o]#;# [.tok-nd]#@Transactional#
[.tok-kd]#public# [.tok-kt]#void# [.tok-nf]#startProcess#[.tok-o]#()#
[.tok-o]#\{#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#startProcessInstanceByKey#[.tok-o]#(#[.tok-s]#"oneTaskProcess"#[.tok-o]#);#
[.tok-o]#}# [.tok-nd]#@Transactional# [.tok-kd]#public#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#Task#[.tok-o]#>#
[.tok-nf]#getTasks#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#assignee#[.tok-o]#)# [.tok-o]#\{# [.tok-k]#return#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#createTaskQuery#[.tok-o]#().#[.tok-na]#taskAssignee#[.tok-o]#(#[.tok-n]#assignee#[.tok-o]#).#[.tok-na]#list#[.tok-o]#();#
[.tok-o]#}# [.tok-o]#}#

We can now create a REST endpoint by annotating a class with
_@RestController_. Here, we simply delegate to the service defined
above.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
----

[.tok-nd]#@RestController# [.tok-kd]#public# [.tok-kd]#class#
[.tok-nc]#MyRestController# [.tok-o]#\{# [.tok-nd]#@Autowired#
[.tok-kd]#private# [.tok-n]#MyService# [.tok-n]#myService#[.tok-o]#;#
[.tok-nd]#@RequestMapping#[.tok-o]#(#[.tok-n]#value#[.tok-o]#=#[.tok-s]#"/process"#[.tok-o]#,#
[.tok-n]#method#[.tok-o]#=#
[.tok-n]#RequestMethod#[.tok-o]#.#[.tok-na]#POST#[.tok-o]#)#
[.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#startProcessInstance#[.tok-o]#()# [.tok-o]#\{#
[.tok-n]#myService#[.tok-o]#.#[.tok-na]#startProcess#[.tok-o]#();#
[.tok-o]#}#
[.tok-nd]#@RequestMapping#[.tok-o]#(#[.tok-n]#value#[.tok-o]#=#[.tok-s]#"/tasks"#[.tok-o]#,#
[.tok-n]#method#[.tok-o]#=#
[.tok-n]#RequestMethod#[.tok-o]#.#[.tok-na]#GET#[.tok-o]#,#
[.tok-n]#produces#[.tok-o]#=#[.tok-n]#MediaType#[.tok-o]#.#[.tok-na]#APPLICATION_JSON_VALUE#[.tok-o]#)#
[.tok-kd]#public#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#TaskRepresentation#[.tok-o]#>#
[.tok-nf]#getTasks#[.tok-o]#(#[.tok-nd]#@RequestParam# [.tok-n]#String#
[.tok-n]#assignee#[.tok-o]#)# [.tok-o]#\{#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#Task#[.tok-o]#># [.tok-n]#tasks#
[.tok-o]#=#
[.tok-n]#myService#[.tok-o]#.#[.tok-na]#getTasks#[.tok-o]#(#[.tok-n]#assignee#[.tok-o]#);#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#TaskRepresentation#[.tok-o]#>#
[.tok-n]#dtos# [.tok-o]#=# [.tok-k]#new#
[.tok-n]#ArrayList#[.tok-o]#<#[.tok-n]#TaskRepresentation#[.tok-o]#>();#
[.tok-k]#for# [.tok-o]#(#[.tok-n]#Task# [.tok-n]#task# [.tok-o]#:#
[.tok-n]#tasks#[.tok-o]#)# [.tok-o]#\{#
[.tok-n]#dtos#[.tok-o]#.#[.tok-na]#add#[.tok-o]#(#[.tok-k]#new#
[.tok-n]#TaskRepresentation#[.tok-o]#(#[.tok-n]#task#[.tok-o]#.#[.tok-na]#getId#[.tok-o]#(),#
[.tok-n]#task#[.tok-o]#.#[.tok-na]#getName#[.tok-o]#()));# [.tok-o]#}#
[.tok-k]#return# [.tok-n]#dtos#[.tok-o]#;# [.tok-o]#}# [.tok-kd]#static#
[.tok-kd]#class# [.tok-nc]#TaskRepresentation# [.tok-o]#\{#
[.tok-kd]#private# [.tok-n]#String# [.tok-n]#id#[.tok-o]#;#
[.tok-kd]#private# [.tok-n]#String# [.tok-n]#name#[.tok-o]#;#
[.tok-kd]#public#
[.tok-nf]#TaskRepresentation#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#id#[.tok-o]#,# [.tok-n]#String# [.tok-n]#name#[.tok-o]#)#
[.tok-o]#\{# [.tok-k]#this#[.tok-o]#.#[.tok-na]#id# [.tok-o]#=#
[.tok-n]#id#[.tok-o]#;# [.tok-k]#this#[.tok-o]#.#[.tok-na]#name#
[.tok-o]#=# [.tok-n]#name#[.tok-o]#;# [.tok-o]#}# [.tok-kd]#public#
[.tok-n]#String# [.tok-nf]#getId#[.tok-o]#()# [.tok-o]#\{#
[.tok-k]#return# [.tok-n]#id#[.tok-o]#;# [.tok-o]#}# [.tok-kd]#public#
[.tok-kt]#void# [.tok-nf]#setId#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#id#[.tok-o]#)# [.tok-o]#\{#
[.tok-k]#this#[.tok-o]#.#[.tok-na]#id# [.tok-o]#=#
[.tok-n]#id#[.tok-o]#;# [.tok-o]#}# [.tok-kd]#public# [.tok-n]#String#
[.tok-nf]#getName#[.tok-o]#()# [.tok-o]#\{# [.tok-k]#return#
[.tok-n]#name#[.tok-o]#;# [.tok-o]#}# [.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#setName#[.tok-o]#(#[.tok-n]#String# [.tok-n]#name#[.tok-o]#)#
[.tok-o]#\{# [.tok-k]#this#[.tok-o]#.#[.tok-na]#name# [.tok-o]#=#
[.tok-n]#name#[.tok-o]#;# [.tok-o]#}# [.tok-o]#}# [.tok-o]#}#

Both the _@Service_ and the _@RestController_ will be found by the
automatic component scan (_@ComponentScan_) we added to our application
class. Run the application class again. We can now interact with the
REST API by using for example cURL:

....
curl http://localhost:8080/tasks?assignee=kermit
[]

curl -X POST  http://localhost:8080/process
curl http://localhost:8080/tasks?assignee=kermit
[{"id":"10004","name":"my task"}]
....

[[_jpa_support]]
== 5.7.5. JPA support

To add in JPA support for Activiti in Spring Boot, add following
dependency:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<dependency>#
[.tok-nt]##<groupId>##org.activiti[.tok-nt]##</groupId>##
[.tok-nt]##<artifactId>##activiti-spring-boot-starter-jpa[.tok-nt]##</artifactId>##
[.tok-nt]##<version>##$\{activiti.version}[.tok-nt]#</version>#
[.tok-nt]#</dependency>#

This will add in the Spring configuration and beans for using JPA. By
default the JPA provider will be Hibernate.

Let’s create a simple Entity class:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
----

[.tok-nd]#@Entity# [.tok-kd]#class# [.tok-nc]#Person# [.tok-o]#\{#
[.tok-nd]#@Id# [.tok-nd]#@GeneratedValue# [.tok-kd]#private#
[.tok-n]#Long# [.tok-n]#id#[.tok-o]#;# [.tok-kd]#private#
[.tok-n]#String# [.tok-n]#username#[.tok-o]#;# [.tok-kd]#private#
[.tok-n]#String# [.tok-n]#firstName#[.tok-o]#;# [.tok-kd]#private#
[.tok-n]#String# [.tok-n]#lastName#[.tok-o]#;# [.tok-kd]#private#
[.tok-n]#Date# [.tok-n]#birthDate#[.tok-o]#;# [.tok-kd]#public#
[.tok-nf]#Person#[.tok-o]#()# [.tok-o]#\{# [.tok-o]#}# [.tok-kd]#public#
[.tok-nf]#Person#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#username#[.tok-o]#,# [.tok-n]#String#
[.tok-n]#firstName#[.tok-o]#,# [.tok-n]#String#
[.tok-n]#lastName#[.tok-o]#,# [.tok-n]#Date#
[.tok-n]#birthDate#[.tok-o]#)# [.tok-o]#\{#
[.tok-k]#this#[.tok-o]#.#[.tok-na]#username# [.tok-o]#=#
[.tok-n]#username#[.tok-o]#;#
[.tok-k]#this#[.tok-o]#.#[.tok-na]#firstName# [.tok-o]#=#
[.tok-n]#firstName#[.tok-o]#;#
[.tok-k]#this#[.tok-o]#.#[.tok-na]#lastName# [.tok-o]#=#
[.tok-n]#lastName#[.tok-o]#;#
[.tok-k]#this#[.tok-o]#.#[.tok-na]#birthDate# [.tok-o]#=#
[.tok-n]#birthDate#[.tok-o]#;# [.tok-o]#}# [.tok-kd]#public#
[.tok-n]#Long# [.tok-nf]#getId#[.tok-o]#()# [.tok-o]#\{#
[.tok-k]#return# [.tok-n]#id#[.tok-o]#;# [.tok-o]#}# [.tok-kd]#public#
[.tok-kt]#void# [.tok-nf]#setId#[.tok-o]#(#[.tok-n]#Long#
[.tok-n]#id#[.tok-o]#)# [.tok-o]#\{#
[.tok-k]#this#[.tok-o]#.#[.tok-na]#id# [.tok-o]#=#
[.tok-n]#id#[.tok-o]#;# [.tok-o]#}# [.tok-kd]#public# [.tok-n]#String#
[.tok-nf]#getUsername#[.tok-o]#()# [.tok-o]#\{# [.tok-k]#return#
[.tok-n]#username#[.tok-o]#;# [.tok-o]#}# [.tok-kd]#public#
[.tok-kt]#void# [.tok-nf]#setUsername#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#username#[.tok-o]#)# [.tok-o]#\{#
[.tok-k]#this#[.tok-o]#.#[.tok-na]#username# [.tok-o]#=#
[.tok-n]#username#[.tok-o]#;# [.tok-o]#}# [.tok-kd]#public#
[.tok-n]#String# [.tok-nf]#getFirstName#[.tok-o]#()# [.tok-o]#\{#
[.tok-k]#return# [.tok-n]#firstName#[.tok-o]#;# [.tok-o]#}#
[.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#setFirstName#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#firstName#[.tok-o]#)# [.tok-o]#\{#
[.tok-k]#this#[.tok-o]#.#[.tok-na]#firstName# [.tok-o]#=#
[.tok-n]#firstName#[.tok-o]#;# [.tok-o]#}# [.tok-kd]#public#
[.tok-n]#String# [.tok-nf]#getLastName#[.tok-o]#()# [.tok-o]#\{#
[.tok-k]#return# [.tok-n]#lastName#[.tok-o]#;# [.tok-o]#}#
[.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#setLastName#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#lastName#[.tok-o]#)# [.tok-o]#\{#
[.tok-k]#this#[.tok-o]#.#[.tok-na]#lastName# [.tok-o]#=#
[.tok-n]#lastName#[.tok-o]#;# [.tok-o]#}# [.tok-kd]#public#
[.tok-n]#Date# [.tok-nf]#getBirthDate#[.tok-o]#()# [.tok-o]#\{#
[.tok-k]#return# [.tok-n]#birthDate#[.tok-o]#;# [.tok-o]#}#
[.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#setBirthDate#[.tok-o]#(#[.tok-n]#Date#
[.tok-n]#birthDate#[.tok-o]#)# [.tok-o]#\{#
[.tok-k]#this#[.tok-o]#.#[.tok-na]#birthDate# [.tok-o]#=#
[.tok-n]#birthDate#[.tok-o]#;# [.tok-o]#}# [.tok-o]#}#

By default, when not using an in-memory database, the tables won’t be
created automatically. Create a file _application.properties_ on the
classpath and add following property:

....
spring.jpa.hibernate.ddl-auto=update
....

Add following class:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-kd]#public# [.tok-kd]#interface# [.tok-nc]#PersonRepository#
[.tok-kd]#extends#
[.tok-n]#JpaRepository#[.tok-o]#<#[.tok-n]#Person#[.tok-o]#,#
[.tok-n]#Long#[.tok-o]#># [.tok-o]#\{# [.tok-n]#Person#
[.tok-nf]#findByUsername#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#username#[.tok-o]#);# [.tok-o]#}#

This is a Spring repository, which offers CRUD out of the box. We add
the method to find a Person by username. Spring will automagically
implement this based on conventions (i.e. the property names used).

We now enhance our service further:

* by adding _@Transactional_ to the class. Note that by adding the JPA
dependency above, the DataSourceTransactionManager which we were using
before is now automatically swapped out by a JpaTransactionManager.
* The _startProcess_ now gets an assignee username in, which is used to
look up the Person, and put the Person JPA object as a process variable
in the process instance.
* A method to create Dummy users is added. This is used in the
CommandLineRunner to populate the database.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
----

[.tok-nd]#@Service# [.tok-nd]#@Transactional# [.tok-kd]#public#
[.tok-kd]#class# [.tok-nc]#MyService# [.tok-o]#\{# [.tok-nd]#@Autowired#
[.tok-kd]#private# [.tok-n]#RuntimeService#
[.tok-n]#runtimeService#[.tok-o]#;# [.tok-nd]#@Autowired#
[.tok-kd]#private# [.tok-n]#TaskService#
[.tok-n]#taskService#[.tok-o]#;# [.tok-nd]#@Autowired#
[.tok-kd]#private# [.tok-n]#PersonRepository#
[.tok-n]#personRepository#[.tok-o]#;# [.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#startProcess#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#assignee#[.tok-o]#)# [.tok-o]#\{# [.tok-n]#Person#
[.tok-n]#person# [.tok-o]#=#
[.tok-n]#personRepository#[.tok-o]#.#[.tok-na]#findByUsername#[.tok-o]#(#[.tok-n]#assignee#[.tok-o]#);#
[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#># [.tok-n]#variables# [.tok-o]#=#
[.tok-k]#new# [.tok-n]#HashMap#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#>();#
[.tok-n]#variables#[.tok-o]#.#[.tok-na]#put#[.tok-o]#(#[.tok-s]#"person"#[.tok-o]#,#
[.tok-n]#person#[.tok-o]#);#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#startProcessInstanceByKey#[.tok-o]#(#[.tok-s]#"oneTaskProcess"#[.tok-o]#,#
[.tok-n]#variables#[.tok-o]#);# [.tok-o]#}# [.tok-kd]#public#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#Task#[.tok-o]#>#
[.tok-nf]#getTasks#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#assignee#[.tok-o]#)# [.tok-o]#\{# [.tok-k]#return#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#createTaskQuery#[.tok-o]#().#[.tok-na]#taskAssignee#[.tok-o]#(#[.tok-n]#assignee#[.tok-o]#).#[.tok-na]#list#[.tok-o]#();#
[.tok-o]#}# [.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#createDemoUsers#[.tok-o]#()# [.tok-o]#\{# [.tok-k]#if#
[.tok-o]#(#[.tok-n]#personRepository#[.tok-o]#.#[.tok-na]#findAll#[.tok-o]#().#[.tok-na]#size#[.tok-o]#()#
[.tok-o]#==# [.tok-mi]#0#[.tok-o]#)# [.tok-o]#\{#
[.tok-n]#personRepository#[.tok-o]#.#[.tok-na]#save#[.tok-o]#(#[.tok-k]#new#
[.tok-n]#Person#[.tok-o]#(#[.tok-s]#"jbarrez"#[.tok-o]#,#
[.tok-s]#"Joram"#[.tok-o]#,# [.tok-s]#"Barrez"#[.tok-o]#,# [.tok-k]#new#
[.tok-n]#Date#[.tok-o]#()));#
[.tok-n]#personRepository#[.tok-o]#.#[.tok-na]#save#[.tok-o]#(#[.tok-k]#new#
[.tok-n]#Person#[.tok-o]#(#[.tok-s]#"trademakers"#[.tok-o]#,#
[.tok-s]#"Tijs"#[.tok-o]#,# [.tok-s]#"Rademakers"#[.tok-o]#,#
[.tok-k]#new# [.tok-n]#Date#[.tok-o]#()));# [.tok-o]#}# [.tok-o]#}#
[.tok-o]#}#

The CommandLineRunner now looks like:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
----

[.tok-nd]#@Bean# [.tok-kd]#public# [.tok-n]#CommandLineRunner#
[.tok-nf]#init#[.tok-o]#(#[.tok-kd]#final# [.tok-n]#MyService#
[.tok-n]#myService#[.tok-o]#)# [.tok-o]#\{# [.tok-k]#return#
[.tok-k]#new# [.tok-n]#CommandLineRunner#[.tok-o]#()# [.tok-o]#\{#
[.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#run#[.tok-o]#(#[.tok-n]#String#[.tok-o]#...#
[.tok-n]#strings#[.tok-o]#)# [.tok-kd]#throws# [.tok-n]#Exception#
[.tok-o]#\{#
[.tok-n]#myService#[.tok-o]#.#[.tok-na]#createDemoUsers#[.tok-o]#();#
[.tok-o]#}# [.tok-o]#};# [.tok-o]#}#

The RestController is also slightly changed to incorporate the changes
above (only showing new methods) and the HTTP POST now has a body that
contains the assignee username:

....
@RestController
public class MyRestController {

    @Autowired
    private MyService myService;

    @RequestMapping(value="/process", method= RequestMethod.POST)
    public void startProcessInstance(@RequestBody StartProcessRepresentation startProcessRepresentation) {
        myService.startProcess(startProcessRepresentation.getAssignee());
    }

   ...

    static class StartProcessRepresentation {

        private String assignee;

        public String getAssignee() {
            return assignee;
        }

        public void setAssignee(String assignee) {
            this.assignee = assignee;
        }
    }
....

And lastly, to try out the Spring-JPA-Activiti integration, we assign
the task using the id of the Person JPA object in the process
definition:

[source,pygments,highlight]
----
1
----

[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"theTask"#
[.tok-na]#name=#[.tok-s]#"my task"#
[.tok-na]#activiti:assignee=#[.tok-s]#"$\{person.id}"#[.tok-nt]#/>#

We can now start a new process instance, providing the user name in the
POST body:

....
curl -H "Content-Type: application/json" -d '{"assignee" : "jbarrez"}' http://localhost:8080/process
....

And the task list is now fetched using the person id:

....
curl http://localhost:8080/tasks?assignee=1

[{"id":"12505","name":"my task"}]
....

[[_further_reading]]
== 5.7.6. Further Reading

Obviously there is a lot about Spring Boot that hasn’t been touched yet,
like very easy JTA integration or building a war file that can be run on
major application servers. And there is a lot more to the Spring Boot
integration:

* Actuator support
* Spring Integration support
* Rest API integration: boot up the Activiti Rest API embedded within
the Spring application
* Spring Security support

All these areas are a first version at the moment, but they will evolved
in the future further.

[[chDeployment]]
== 6. Deployment

[[_business_archives]]
=== 6.1. Business archives

To deploy processes, they have to be wrapped in a business archive. A
business archive is the unit of deployment to an Activiti Engine. A
business archive is equivalent to a zip file. It can contain BPMN 2.0
processes, task forms, rules and any other type of file. In general, a
business archive contains a collection of named resources.

When a business archive is deployed, it is scanned for BPMN files with a
`.bpmn20.xml` or `.bpmn` extension. Each of those will be parsed and may
contain multiple process definitions.

[width="100%",cols="50%,50%",]
|===
|__ a|
Java classes present in the business archive *will not be added to the
classpath*. All custom classes used in process definitions in the
business archive (for example Java service tasks or event listener
implementations) should be present on the Activiti Engine classpath in
order to run the processes.

|===

[[_deploying_programmatically]]
==== 6.1.1. Deploying programmatically

Deploying a business archive from a zip file can be done like this:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-n]#String# [.tok-n]#barFileName# [.tok-o]#=#
[.tok-s]#"path/to/process-one.bar"#[.tok-o]#;# [.tok-n]#ZipInputStream#
[.tok-n]#inputStream# [.tok-o]#=# [.tok-k]#new#
[.tok-n]#ZipInputStream#[.tok-o]#(#[.tok-k]#new#
[.tok-n]#FileInputStream#[.tok-o]#(#[.tok-n]#barFileName#[.tok-o]#));#
[.tok-n]#repositoryService#[.tok-o]#.#[.tok-na]#createDeployment#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#name#[.tok-o]#(#[.tok-s]#"process-one.bar"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#addZipInputStream#[.tok-o]#(#[.tok-n]#inputStream#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#deploy#[.tok-o]#();#

It’s also possible to build a deployment from individual resources. See
the javadocs for more details.

[[_external_resources]]
== 6.2. External resources

Process definitions live in the Activiti database. These process
definitions can reference delegation classes when using Service Tasks or
execution listeners or Spring beans from the Activiti configuration
file. These classes and the Spring configuration file have to be
available to all process engines that may execute the process
definitions.

[[_java_classes]]
=== 6.2.1. Java classes

All custom classes that are used in your process (e.g. JavaDelegates
used in Service Tasks or event-listeners, TaskListeners, …​) should be
present on the engine’s classpath when an instance of the process is
started.

During deployment of a business archive however, those classes don’t
have to be present on the classpath. This means that your delegation
classes don’t have to be on the classpath when deploying a new business
archive with Ant.

When you are using the demo setup and you want to add your custom
classes, you should add a jar containing your classes to the
activiti-explorer or activiti-rest webapp lib. Don’t forget to include
the dependencies of your custom classes (if any) as well. Alternatively,
you can include your dependencies in the libraries directory of your
Tomcat installation, `${tomcat.home}/lib`.

[[_using_spring_beans_from_a_process]]
=== 6.2.2. Using Spring beans from a process

When expressions or scripts use Spring beans, those beans have to be
available to the engine when executing the process definition. If you
are building your own webapp and you configure your process engine in
your context as described in link:#springintegration[the spring
integration section], that is straightforward. But bear in mind that you
also should update the Activiti rest webapp with that context if you use
it. You can do that by replacing the `activiti.cfg.xml` in the
`activiti-rest/lib/activiti-cfg.jar` JAR file with an
`activiti-context.xml` file containing your Spring context
configuration.

[[_creating_a_single_app]]
=== 6.2.3. Creating a single app

Instead of making sure that all process engines have all the delegation
classes on their classpath and use the right Spring configuration, you
may consider including the Activiti rest webapp inside your own webapp
so that there is only a single `ProcessEngine`.

[[versioningOfProcessDefinitions]]
== 6.3. Versioning of process definitions

BPMN doesn’t have a notion of versioning. That is actually good because
the executable BPMN process file will probably live in a version control
system repository (e.g. Subversion, Git or Mercurial) as part of your
development project. Versions of process definitions are created during
deployment. During deployment, Activiti will assign a version to the
`ProcessDefinition` before it is stored in the Activiti DB.

For each process definition in a business archive the following steps
are performed to initialize the properties `key`, `version`, `name` and
`id`:

* The process definition `id` attribute in the XML file is used as the
process definition `key` property.
* The process definition `name` attribute in the XML file is used as the
process definition `name` property. If the name attribute is not
specified, then id attribute is used as the name.
* The first time a process with a particular key is deployed, version 1
is assigned. For all subsequent deployments of process definitions with
the same key, the version will be set 1 higher than the maximum
currently deployed version. The key property is used to distinguish
process definitions.
* The id property is set to
\{processDefinitionKey}:\{processDefinitionVersion}:\{generated-id},
where `generated-id` is a unique number added to guarantee uniqueness of
the process id for the process definition caches in a clustered
environment.

Take for example the following process

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<definitions# [.tok-na]#id=#[.tok-s]#"myDefinitions"#
[.tok-nt]#># [.tok-nt]#<process# [.tok-na]#id=#[.tok-s]#"myProcess"#
[.tok-na]#name=#[.tok-s]#"My important process"# [.tok-nt]#># ...

When deploying this process definition, the process definition in the
database will look like this:

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|id |key |name |version
|myProcess:1:676 |myProcess |My important process |1
|===

Suppose we now deploy an updated version of the same process (e.g.
changing some user tasks), but the `id` of the process definition
remains the same. The process definition table will now contain the
following entries:

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|id |key |name |version
|myProcess:1:676 |myProcess |My important process |1
|myProcess:2:870 |myProcess |My important process |2
|===

When the `runtimeService.startProcessInstanceByKey("myProcess")` is
called, it will now use the process definition with version `2`, as this
is the latest version of the process definition.

Should we create a second process, as defined below and deploy this to
Activiti, a third row will be added to the table.

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<definitions# [.tok-na]#id=#[.tok-s]#"myNewDefinitions"#
[.tok-nt]#># [.tok-nt]#<process# [.tok-na]#id=#[.tok-s]#"myNewProcess"#
[.tok-na]#name=#[.tok-s]#"My important process"# [.tok-nt]#># ...

The table will look like this:

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|id |key |name |version
|myProcess:1:676 |myProcess |My important process |1
|myProcess:2:870 |myProcess |My important process |2
|myNewProcess:1:1033 |myNewProcess |My important process |1
|===

Note how the key for the new process is different from our first
process. Even though the name is the same (we should probably have
changed that too), Activiti only considers the `id` attribute when
distinguishing processes. The new process is therefore deployed with
version 1.

[[providingProcessDiagram]]
== 6.4. Providing a process diagram

A process diagram image can be added to a deployment. This image will be
stored in the Activiti repository and is accessible through the API.
This image is also used to visualize the process in Activiti Explorer.

Suppose we have a process on our classpath,
`org/activiti/expenseProcess.bpmn20.xml` that has a process key
_expense_. The following naming conventions for the process diagram
image apply (in this specific order):

* If an image resource exists in the deployment that has a name of the
BPMN 2.0 XML file name concatenated with the process key and an image
suffix, this image is used. In our example, this would be
`org/activiti/expenseProcess.expense.png` (or .jpg/gif). In case you
have multiple images defined in one BPMN 2.0 XML file, this approach
makes most sense. Each diagram image will then have the process key in
its file name.
* If no such image exists, am image resource in the deployment matching
the name of the BPMN 2.0 XML file is searched for. In our example this
would be `org/activiti/expenseProcess.png`. Note that this means that
*every process definition* defined in the same BPMN 2.0 file has the
same process diagram image. In case there is only one process definition
in each BPMN 2.0 XML file, this is obviously not a problem.

Example when deploying programmatically:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-n]#repositoryService#[.tok-o]#.#[.tok-na]#createDeployment#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#name#[.tok-o]#(#[.tok-s]#"expense-process.bar"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#addClasspathResource#[.tok-o]#(#[.tok-s]#"org/activiti/expenseProcess.bpmn20.xml"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#addClasspathResource#[.tok-o]#(#[.tok-s]#"org/activiti/expenseProcess.png"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#deploy#[.tok-o]#();#

The image resource can be retrieved through the API afterwards:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-n]#ProcessDefinition# [.tok-n]#processDefinition# [.tok-o]#=#
[.tok-n]#repositoryService#[.tok-o]#.#[.tok-na]#createProcessDefinitionQuery#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#processDefinitionKey#[.tok-o]#(#[.tok-s]#"expense"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#singleResult#[.tok-o]#();# [.tok-n]#String#
[.tok-n]#diagramResourceName# [.tok-o]#=#
[.tok-n]#processDefinition#[.tok-o]#.#[.tok-na]#getDiagramResourceName#[.tok-o]#();#
[.tok-n]#InputStream# [.tok-n]#imageStream# [.tok-o]#=#
[.tok-n]#repositoryService#[.tok-o]#.#[.tok-na]#getResourceAsStream#[.tok-o]#(#
[.tok-n]#processDefinition#[.tok-o]#.#[.tok-na]#getDeploymentId#[.tok-o]#(),#
[.tok-n]#diagramResourceName#[.tok-o]#);#

[[generatingProcessDiagram]]
== 6.5. Generating a process diagram

In case no image is provided in the deployment, as described in the
link:#providingProcessDiagram[previous section], the Activiti engine
will generate a diagram image if the process definition contains the
necessary _diagram interchange_ information.

The resource can be retrieved in exactly the same way as when
link:#providingProcessDiagram[an image is provided] in the deployment.

image:images/deployment.image.generation.png[deployment.image.generation]

If, for some reason, it is not necessary or wanted to generate a diagram
during deployment the `isCreateDiagramOnDeploy` property can be set on
the process engine configuration:

[source,pygments,highlight]
----
1
----

[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"createDiagramOnDeploy"#
[.tok-na]#value=#[.tok-s]#"false"# [.tok-nt]#/>#

No diagram will be generated now.

[[deploymentCategory]]
== 6.6. Category

Both deployments and process definitions have user defined categories.
The process definition category is initialized value in attribute in the
BPMN file: `<definitions …​ targetNamespace="yourCategory" …​`

The deployment category can be specified in the API like this:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-n]#repositoryService#
[.tok-o]#.#[.tok-na]#createDeployment#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#category#[.tok-o]#(#[.tok-s]#"yourCategory"#[.tok-o]#)#
[.tok-o]#...# [.tok-o]#.#[.tok-na]#deploy#[.tok-o]#();#

[[bpmn20]]
== 7. BPMN 2.0 Introduction

[[whatIsBpmn]]
=== 7.1. What is BPMN?

See our http://activiti.org/faq.html#WhatIsBpmn20[FAQ entry on BPMN
2.0].

[[bpmnDefiningProcess]]
=== 7.2. Defining a process

[width="100%",cols="50%,50%",]
|===
|__ a|
This introduction is written under the assumption you are using the
http://eclipse.org/[Eclipse IDE] to create and edit files. Very little
of this is specific to Eclipse, however. You can use any other tool you
prefer to create XML files containing BPMN 2.0.

|===

Create a new XML file (_right-click on any project and select
New→Other→XML-XML File_) and give it a name. Make sure that the file
*ends with .bpmn20.xml or .bpmn*, since otherwise the engine won’t pick
up this file for deployment.

image:images/new.bpmn.procdef.png[new.bpmn.procdef]

The root element of the BPMN 2.0 schema is the `definitions` element.
Within this element, multiple process definitions can be defined
(although we advise to have only one process definition in each file,
since this simplifies maintenance later in the development process). An
empty process definition looks as listed below. Note that the minimal
`definitions` element only needs the `xmlns` and `targetNamespace`
declaration. The `targetNamespace` can be anything, and is useful for
categorizing process definitions.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
----

[.tok-nt]#<definitions#
[.tok-na]#xmlns=#[.tok-s]#"http://www.omg.org/spec/BPMN/20100524/MODEL"#
[.tok-na]#xmlns:activiti=#[.tok-s]#"http://activiti.org/bpmn"#
[.tok-na]#targetNamespace=#[.tok-s]#"Examples"#[.tok-nt]#>#
[.tok-nt]#<process# [.tok-na]#id=#[.tok-s]#"myProcess"#
[.tok-na]#name=#[.tok-s]#"My First Process"#[.tok-nt]#># ..
[.tok-nt]#</process># [.tok-nt]#</definitions>#

Optionally you can also add the online schema location of the BPMN 2.0
XML schema, as an alternative to the XML catalog configuration in
Eclipse.

[source,pygments,highlight]
----
1
2
3
----

xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.omg.org/spec/BPMN/20100524/MODEL
http://www.omg.org/spec/BPMN/2.0/20100501/BPMN20.xsd

The `process` element has two attributes:

* *id*: this attribute is *required* and maps to the *key* property of
an Activiti `ProcessDefinition` object. This `id` can then be used to
start a new process instance of the process definition, through the
`startProcessInstanceByKey` method on the `RuntimeService`. This method
will always take the *latest deployed version* of the process
definition.

[source,pygments,highlight]
----
1
----

[.tok-n]#ProcessInstance# [.tok-n]#processInstance# [.tok-o]#=#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#startProcessInstanceByKey#[.tok-o]#(#[.tok-s]#"myProcess"#[.tok-o]#);#

* Important to note here is that this is not the same as calling the
`startProcessInstanceById` method. This method expects the String id
that was generated at deploy time by the Activiti engine, and can be
retrieved by calling the `processDefinition.getId()` method. The format
of the generated id is *_key:version_*, and the length is *constrained
to 64 characters*. If you get an `ActivitiException` stating that the
generated id is too long, limit the text in the _key_ field of the
process.
* *name*: this attribute is *optional* and maps to the _name_ property
of a `ProcessDefinition`. The engine itself doesn’t use this property,
so it can be used for displaying a more human-friendly name in a user
interface, for example.

{empty}[[10minutetutorial]]

[[_getting_started_10_minute_tutorial]]
== 7.3. Getting started: 10 minute tutorial

In this section we will cover a (very simple) business process that we
will use to introduce some basic Activiti concepts and the Activiti API.

[[bpmn10MinuteTutorialPrerequisites]]
=== 7.3.1. Prerequisites

This tutorial assumes that you have the
link:#demo.setup.one.minute.version[Activiti demo setup running], and
that you are using a standalone H2 server. Edit `db.properties` and set
the `jdbc.url=jdbc:h2:tcp://localhost/activiti`, and then run the
standalone server according to
http://www.h2database.com/html/tutorial.html#using_server[H2’s
documentation].

[[bpmn10MinuteTutorialGoal]]
=== 7.3.2. Goal

The goal of this tutorial is to learn about Activiti and some basic BPMN
2.0 concepts. The end result will be a simple Java SE program that
deploys a process definition, and interacts with this process through
the Activiti engine API. We’ll also touch some of the tooling around
Activiti. Of course, what you’ll learn in this tutorial can also be used
when building your own web applications around your business processes.

[[bpmnFirstExampleUseCase]]
=== 7.3.3. Use case

The use case is straightforward: we have a company, let’s call it
BPMCorp. In BPMCorp, a financial report needs to be written every month
for the company shareholders. This is the responsibility of the
accountancy department. When the report is finished, one of the members
of the upper management needs to approve the document before it is sent
to all the shareholders.

[[bpmnFirstExampleDiagram]]
=== 7.3.4. Process diagram

The business process as described above can be graphically visualized
using the link:#activitiDesigner[Activiti Designer]. However, for this
tutorial we’ll type the XML ourselves, as we learn the most this way at
this point. The graphical BPMN 2.0 notation of our process looks like
this:

image:images/financial.report.example.diagram.png[financial.report.example.diagram]

What we see is a link:#bpmnNoneStartEvent[none Start Event] (circle on
the left), followed by two link:#bpmnUserTask[User Tasks]: _'Write
monthly financial report'_ and _'Verify monthly financial report'_,
ending in a link:#bpmnNoneEndEvent[none end event] (circle with thick
border on the right).

[[bpmnFirstExampleXml]]
=== 7.3.5. XML representation

The XML version of this business process
(_FinancialReportProcess.bpmn20.xml_) looks as shown below. It’s easy to
recognize the main elements of our process (click on the links for going
to the detailed section of that BPMN 2.0 construct):

* The link:#bpmnNoneStartEvent[(none) start event] tells us what the
_entry point_ to the process is.
* The link:#bpmnUserTask[User Tasks] declarations are the representation
of the human tasks of our process. Note that the first task is assigned
to the _accountancy_ group, while the second task is assigned to the
_management_ group. See link:#bpmnUserTaskAssignment[the section on user
task assignment] for more information on how users and groups can be
assigned to user tasks.
* The process ends when the link:#bpmnNoneEndEvent[none end event] is
reached.
* The elements are connected with each other through
link:#bpmnSequenceFlow[sequence flows]. These sequence flows have a
`source` and `target`, defining the _direction_ of the sequence flow.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
----

[.tok-nt]#<definitions# [.tok-na]#id=#[.tok-s]#"definitions"#
[.tok-na]#targetNamespace=#[.tok-s]#"http://activiti.org/bpmn20"#
[.tok-na]#xmlns:activiti=#[.tok-s]#"http://activiti.org/bpmn"#
[.tok-na]#xmlns=#[.tok-s]#"http://www.omg.org/spec/BPMN/20100524/MODEL"#[.tok-nt]#>#
[.tok-nt]#<process# [.tok-na]#id=#[.tok-s]#"financialReport"#
[.tok-na]#name=#[.tok-s]#"Monthly financial report reminder
process"#[.tok-nt]#># [.tok-nt]#<startEvent#
[.tok-na]#id=#[.tok-s]#"theStart"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow1"#
[.tok-na]#sourceRef=#[.tok-s]#"theStart"#
[.tok-na]#targetRef=#[.tok-s]#"writeReportTask"# [.tok-nt]#/>#
[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"writeReportTask"#
[.tok-na]#name=#[.tok-s]#"Write monthly financial report"# [.tok-nt]#>#
[.tok-nt]#<documentation># Write monthly financial report for
publication to shareholders. [.tok-nt]#</documentation>#
[.tok-nt]#<potentialOwner># [.tok-nt]#<resourceAssignmentExpression>#
[.tok-nt]##<formalExpression>##accountancy[.tok-nt]##</formalExpression>##
[.tok-nt]#</resourceAssignmentExpression># [.tok-nt]#</potentialOwner>#
[.tok-nt]#</userTask># [.tok-nt]#<sequenceFlow#
[.tok-na]#id=#[.tok-s]#"flow2"#
[.tok-na]#sourceRef=#[.tok-s]#"writeReportTask"#
[.tok-na]#targetRef=#[.tok-s]#"verifyReportTask"# [.tok-nt]#/>#
[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"verifyReportTask"#
[.tok-na]#name=#[.tok-s]#"Verify monthly financial report"# [.tok-nt]#>#
[.tok-nt]#<documentation># Verify monthly financial report composed by
the accountancy department. This financial report is going to be sent to
all the company shareholders. [.tok-nt]#</documentation>#
[.tok-nt]#<potentialOwner># [.tok-nt]#<resourceAssignmentExpression>#
[.tok-nt]##<formalExpression>##management[.tok-nt]##</formalExpression>##
[.tok-nt]#</resourceAssignmentExpression># [.tok-nt]#</potentialOwner>#
[.tok-nt]#</userTask># [.tok-nt]#<sequenceFlow#
[.tok-na]#id=#[.tok-s]#"flow3"#
[.tok-na]#sourceRef=#[.tok-s]#"verifyReportTask"#
[.tok-na]#targetRef=#[.tok-s]#"theEnd"# [.tok-nt]#/>#
[.tok-nt]#<endEvent# [.tok-na]#id=#[.tok-s]#"theEnd"# [.tok-nt]#/>#
[.tok-nt]#</process># [.tok-nt]#</definitions>#

[[bpmnFirstExamplStartProcess]]
== 7.3.6. Starting a process instance

We have now created the *process definition* of our business process.
From such a process definition, we can create *process instances*. In
this case, one process instance would match with the creation and
verification of a single financial report for a particular month. All
the process instances share the same process definition.

To be able to create process instances from a given process definition,
we must first *deploy* this process definition. Deploying a process
definition means two things:

* The process definition will be stored in the persistent datastore that
is configured for your Activiti engine. So by deploying our business
process, we make sure that the engine will find the process definition
after an engine reboot.
* The BPMN 2.0 process file will be parsed to an in-memory object model
that can be manipulated through the Activiti API.

More information on deployment can be found link:#chDeployment[in the
dedicated section on deployment].

As described in that section, deployment can happen in several ways. One
way is through the API as follows. Note that all interaction with the
Activiti engine happens through its _services_.

[source,pygments,highlight]
----
1
2
3
----

[.tok-n]#Deployment# [.tok-n]#deployment# [.tok-o]#=#
[.tok-n]#repositoryService#[.tok-o]#.#[.tok-na]#createDeployment#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#addClasspathResource#[.tok-o]#(#[.tok-s]#"FinancialReportProcess.bpmn20.xml"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#deploy#[.tok-o]#();#

Now we can start a new process instance using the `id` we defined in the
process definition (see process element in the XML file). Note that this
`id` in Activiti terminology is called the *key*.

[source,pygments,highlight]
----
1
----

[.tok-n]#ProcessInstance# [.tok-n]#processInstance# [.tok-o]#=#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#startProcessInstanceByKey#[.tok-o]#(#[.tok-s]#"financialReport"#[.tok-o]#);#

This will create a process instance that will first go through the start
event. After the start event, it follows all the outgoing sequence flows
(only one in this case) and the first task (_write monthly financial
report_) is reached. The Activiti engine will now store a task in the
persistent database. At this point, the user or group assignments
attached to the task are resolved and also stored in the database. It’s
important to note that the Activiti engine will continue process
execution steps until it reaches a _wait state_, such as the user task.
At such a wait state, the current state of the process instance is
stored in the database. It remains in that state until a user decides to
complete their task. At that point, the engine will continue until it
reaches a new wait state or the end of the process. When the engine
reboots or crashes in the meantime, the state of the process is safe and
well in the database.

After the task is created, the `startProcessInstanceByKey` method will
return since the user task activity is a _wait state_. In this case, the
task is assigned to a group, which means that every member of the group
is a *candidate* to perform the task.

We can now throw this all together and create a simple Java program.
Create a new Eclipse project and add the Activiti JARs and dependencies
to its classpath (these can be found in the _libs_ folder of the
Activiti distribution). Before we can call the Activiti services, we
must first construct a `ProcessEngine` that gives us access to the
services. Here we use the _'standalone'_ configuration, which constructs
a `ProcessEngine` that uses the database also used in the demo setup.

You can download the process definition XML
link:images/FinancialReportProcess.bpmn20.xml[here]. This file contains
the XML as shown above, but also contains the necessary BPMN
link:#generatingProcessDiagram[diagram interchange information] to
visualize the process in the Activiti tools.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
----

[.tok-kd]#public# [.tok-kd]#static# [.tok-kt]#void#
[.tok-nf]#main#[.tok-o]#(#[.tok-n]#String#[.tok-o]#[]#
[.tok-n]#args#[.tok-o]#)# [.tok-o]#\{# [.tok-c1]#// Create Activiti
process engine# [.tok-n]#ProcessEngine# [.tok-n]#processEngine#
[.tok-o]#=# [.tok-n]#ProcessEngineConfiguration#
[.tok-o]#.#[.tok-na]#createStandaloneProcessEngineConfiguration#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#buildProcessEngine#[.tok-o]#();# [.tok-c1]#// Get
Activiti services# [.tok-n]#RepositoryService#
[.tok-n]#repositoryService# [.tok-o]#=#
[.tok-n]#processEngine#[.tok-o]#.#[.tok-na]#getRepositoryService#[.tok-o]#();#
[.tok-n]#RuntimeService# [.tok-n]#runtimeService# [.tok-o]#=#
[.tok-n]#processEngine#[.tok-o]#.#[.tok-na]#getRuntimeService#[.tok-o]#();#
[.tok-c1]#// Deploy the process definition#
[.tok-n]#repositoryService#[.tok-o]#.#[.tok-na]#createDeployment#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#addClasspathResource#[.tok-o]#(#[.tok-s]#"FinancialReportProcess.bpmn20.xml"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#deploy#[.tok-o]#();# [.tok-c1]#// Start a process
instance#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#startProcessInstanceByKey#[.tok-o]#(#[.tok-s]#"financialReport"#[.tok-o]#);#
[.tok-o]#}#

[[bpmnFirstExampleCandidateList]]
== 7.3.7. Task lists

We can now retrieve this task through the `TaskService` by adding the
following logic:

[source,pygments,highlight]
----
1
----

[.tok-n]#List#[.tok-o]#<#[.tok-n]#Task#[.tok-o]#># [.tok-n]#tasks#
[.tok-o]#=#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#createTaskQuery#[.tok-o]#().#[.tok-na]#taskCandidateUser#[.tok-o]#(#[.tok-s]#"kermit"#[.tok-o]#).#[.tok-na]#list#[.tok-o]#();#

Note that the user we pass to this operation needs to be a member of the
_accountancy_ group, since that was declared in the process definition:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<potentialOwner># [.tok-nt]#<resourceAssignmentExpression>#
[.tok-nt]##<formalExpression>##accountancy[.tok-nt]##</formalExpression>##
[.tok-nt]#</resourceAssignmentExpression># [.tok-nt]#</potentialOwner>#

We could also use the task query API to get the same results using the
name of the group. We can now add the following logic to our code:

[source,pygments,highlight]
----
1
2
----

[.tok-n]#TaskService# [.tok-n]#taskService# [.tok-o]#=#
[.tok-n]#processEngine#[.tok-o]#.#[.tok-na]#getTaskService#[.tok-o]#();#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#Task#[.tok-o]#># [.tok-n]#tasks#
[.tok-o]#=#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#createTaskQuery#[.tok-o]#().#[.tok-na]#taskCandidateGroup#[.tok-o]#(#[.tok-s]#"accountancy"#[.tok-o]#).#[.tok-na]#list#[.tok-o]#();#

Since we’ve configured our `ProcessEngine` to use the same database as
the demo setup is using, we can now log into
http://localhost:8080/activiti-explorer/[Activiti Explorer]. By default,
no user is in the _accountancy_ group. Login with kermit/kermit, click
Groups and then "Create group". Then click Users and add the group to
fozzie. Now login with fozzie/fozzie, and we will find that we can start
our business process after selecting the _Processes_ page and clicking
on the _'Start Process'_ link in the _'Actions'_ column corresponding to
the _'Monthly financial report'_ process.

image:images/bpmn.financial.report.example.start.process.png[bpmn.financial.report.example.start.process]

As explained, the process will execute up to the first user task. Since
we’re logged in as kermit, we can see that there is a new candidate task
available for him after we’ve started a process instance. Select the
_Tasks_ page to view this new task. Note that even if the process was
started by someone else, the task would still be visible as a candidate
task to everyone in the accountancy group.

image:images/bpmn.financial.report.example.task.assigned.png[bpmn.financial.report.example.task.assigned]

[[bpmnFirstExampleClaimTask]]
== 7.3.8. Claiming the task

An accountant now needs to *claim the task*. By claiming the task, the
specific user will become the *assignee* of the task and the task will
disappear from every task list of the other members of the accountancy
group. Claiming a task is programmatically done as follows:

[source,pygments,highlight]
----
1
----

[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#claim#[.tok-o]#(#[.tok-n]#task#[.tok-o]#.#[.tok-na]#getId#[.tok-o]#(),#
[.tok-s]#"fozzie"#[.tok-o]#);#

The task is now in the *personal task list of the one that claimed the
task*.

[source,pygments,highlight]
----
1
----

[.tok-n]#List#[.tok-o]#<#[.tok-n]#Task#[.tok-o]#># [.tok-n]#tasks#
[.tok-o]#=#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#createTaskQuery#[.tok-o]#().#[.tok-na]#taskAssignee#[.tok-o]#(#[.tok-s]#"fozzie"#[.tok-o]#).#[.tok-na]#list#[.tok-o]#();#

In the Activiti UI App, clicking the _claim_ button will call the same
operation. The task will now move to the personal task list of the
logged on user. You also see that the assignee of the task changed to
the current logged in user.

image:images/bpmn.financial.report.example.claim.task.png[bpmn.financial.report.example.claim.task]

[[bpmnFirstExampleCompleteTask]]
== 7.3.9. Completing the task

The accountant can now start working on the financial report. Once the
report is finished, he can *complete the task*, which means that all
work for that task is done.

[source,pygments,highlight]
----
1
----

[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#complete#[.tok-o]#(#[.tok-n]#task#[.tok-o]#.#[.tok-na]#getId#[.tok-o]#());#

For the Activiti engine, this is an external signal that the process
instance execution must be continued. The task itself is removed from
the runtime data. The single outgoing transition out of the task is
followed, moving the execution to the second task (_'verification of the
report'_). The same mechanism as described for the first task will now
be used to assign the second task, with the small difference that the
task will be assigned to the _management_ group.

In the demo setup, completing the task is done by clicking the
_complete_ button in the task list. Since Fozzie isn’t an accountant, we
need to log out of the Activiti Explorer and login in as _kermit_ (who
is a manager). The second task is now visible in the unassigned task
lists.

[[bpmnFirstExampleEndingProcess]]
== 7.3.10. Ending the process

The verification task can be retrieved and claimed in exactly the same
way as before. Completing this second task will move process execution
to the end event, which finishes the process instance. The process
instance and all related runtime execution data are removed from the
datastore.

When you log into Activiti Explorer you can verify this, since no
records will be found in the table where the process executions are
stored.

image:images/bpmn.financial.report.example.process.ended.png[bpmn.financial.report.example.process.ended]

Programmatically, you can also verify that the process is ended using
the `historyService`

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-n]#HistoryService# [.tok-n]#historyService# [.tok-o]#=#
[.tok-n]#processEngine#[.tok-o]#.#[.tok-na]#getHistoryService#[.tok-o]#();#
[.tok-n]#HistoricProcessInstance# [.tok-n]#historicProcessInstance#
[.tok-o]#=#
[.tok-n]#historyService#[.tok-o]#.#[.tok-na]#createHistoricProcessInstanceQuery#[.tok-o]#().#[.tok-na]#processInstanceId#[.tok-o]#(#[.tok-n]#procId#[.tok-o]#).#[.tok-na]#singleResult#[.tok-o]#();#
[.tok-n]#System#[.tok-o]#.#[.tok-na]#out#[.tok-o]#.#[.tok-na]#println#[.tok-o]#(#[.tok-s]#"Process
instance end time: "# [.tok-o]#+#
[.tok-n]#historicProcessInstance#[.tok-o]#.#[.tok-na]#getEndTime#[.tok-o]#());#

[[bpmnFirstExampleCode]]
== 7.3.11. Code overview

Combine all the snippets from previous sections, and you should have
something like this (this code takes in account that you probably will
have started a few process instances through the Activiti Explorer UI.
As such, it always retrieves a list of tasks instead of one task, so it
always works):

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
----

[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#TenMinuteTutorial#
[.tok-o]#\{# [.tok-kd]#public# [.tok-kd]#static# [.tok-kt]#void#
[.tok-nf]#main#[.tok-o]#(#[.tok-n]#String#[.tok-o]#[]#
[.tok-n]#args#[.tok-o]#)# [.tok-o]#\{# [.tok-c1]#// Create Activiti
process engine# [.tok-n]#ProcessEngine# [.tok-n]#processEngine#
[.tok-o]#=# [.tok-n]#ProcessEngineConfiguration#
[.tok-o]#.#[.tok-na]#createStandaloneProcessEngineConfiguration#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#buildProcessEngine#[.tok-o]#();# [.tok-c1]#// Get
Activiti services# [.tok-n]#RepositoryService#
[.tok-n]#repositoryService# [.tok-o]#=#
[.tok-n]#processEngine#[.tok-o]#.#[.tok-na]#getRepositoryService#[.tok-o]#();#
[.tok-n]#RuntimeService# [.tok-n]#runtimeService# [.tok-o]#=#
[.tok-n]#processEngine#[.tok-o]#.#[.tok-na]#getRuntimeService#[.tok-o]#();#
[.tok-c1]#// Deploy the process definition#
[.tok-n]#repositoryService#[.tok-o]#.#[.tok-na]#createDeployment#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#addClasspathResource#[.tok-o]#(#[.tok-s]#"FinancialReportProcess.bpmn20.xml"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#deploy#[.tok-o]#();# [.tok-c1]#// Start a process
instance# [.tok-n]#String# [.tok-n]#procId# [.tok-o]#=#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#startProcessInstanceByKey#[.tok-o]#(#[.tok-s]#"financialReport"#[.tok-o]#).#[.tok-na]#getId#[.tok-o]#();#
[.tok-c1]#// Get the first task# [.tok-n]#TaskService#
[.tok-n]#taskService# [.tok-o]#=#
[.tok-n]#processEngine#[.tok-o]#.#[.tok-na]#getTaskService#[.tok-o]#();#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#Task#[.tok-o]#># [.tok-n]#tasks#
[.tok-o]#=#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#createTaskQuery#[.tok-o]#().#[.tok-na]#taskCandidateGroup#[.tok-o]#(#[.tok-s]#"accountancy"#[.tok-o]#).#[.tok-na]#list#[.tok-o]#();#
[.tok-k]#for# [.tok-o]#(#[.tok-n]#Task# [.tok-n]#task# [.tok-o]#:#
[.tok-n]#tasks#[.tok-o]#)# [.tok-o]#\{#
[.tok-n]#System#[.tok-o]#.#[.tok-na]#out#[.tok-o]#.#[.tok-na]#println#[.tok-o]#(#[.tok-s]#"Following
task is available for accountancy group: "# [.tok-o]#+#
[.tok-n]#task#[.tok-o]#.#[.tok-na]#getName#[.tok-o]#());# [.tok-c1]#//
claim it#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#claim#[.tok-o]#(#[.tok-n]#task#[.tok-o]#.#[.tok-na]#getId#[.tok-o]#(),#
[.tok-s]#"fozzie"#[.tok-o]#);# [.tok-o]#}# [.tok-c1]#// Verify Fozzie
can now retrieve the task# [.tok-n]#tasks# [.tok-o]#=#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#createTaskQuery#[.tok-o]#().#[.tok-na]#taskAssignee#[.tok-o]#(#[.tok-s]#"fozzie"#[.tok-o]#).#[.tok-na]#list#[.tok-o]#();#
[.tok-k]#for# [.tok-o]#(#[.tok-n]#Task# [.tok-n]#task# [.tok-o]#:#
[.tok-n]#tasks#[.tok-o]#)# [.tok-o]#\{#
[.tok-n]#System#[.tok-o]#.#[.tok-na]#out#[.tok-o]#.#[.tok-na]#println#[.tok-o]#(#[.tok-s]#"Task
for fozzie: "# [.tok-o]#+#
[.tok-n]#task#[.tok-o]#.#[.tok-na]#getName#[.tok-o]#());# [.tok-c1]#//
Complete the task#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#complete#[.tok-o]#(#[.tok-n]#task#[.tok-o]#.#[.tok-na]#getId#[.tok-o]#());#
[.tok-o]#}#
[.tok-n]#System#[.tok-o]#.#[.tok-na]#out#[.tok-o]#.#[.tok-na]#println#[.tok-o]#(#[.tok-s]#"Number
of tasks for fozzie: "# [.tok-o]#+#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#createTaskQuery#[.tok-o]#().#[.tok-na]#taskAssignee#[.tok-o]#(#[.tok-s]#"fozzie"#[.tok-o]#).#[.tok-na]#count#[.tok-o]#());#
[.tok-c1]#// Retrieve and claim the second task# [.tok-n]#tasks#
[.tok-o]#=#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#createTaskQuery#[.tok-o]#().#[.tok-na]#taskCandidateGroup#[.tok-o]#(#[.tok-s]#"management"#[.tok-o]#).#[.tok-na]#list#[.tok-o]#();#
[.tok-k]#for# [.tok-o]#(#[.tok-n]#Task# [.tok-n]#task# [.tok-o]#:#
[.tok-n]#tasks#[.tok-o]#)# [.tok-o]#\{#
[.tok-n]#System#[.tok-o]#.#[.tok-na]#out#[.tok-o]#.#[.tok-na]#println#[.tok-o]#(#[.tok-s]#"Following
task is available for management group: "# [.tok-o]#+#
[.tok-n]#task#[.tok-o]#.#[.tok-na]#getName#[.tok-o]#());#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#claim#[.tok-o]#(#[.tok-n]#task#[.tok-o]#.#[.tok-na]#getId#[.tok-o]#(),#
[.tok-s]#"kermit"#[.tok-o]#);# [.tok-o]#}# [.tok-c1]#// Completing the
second task ends the process# [.tok-k]#for# [.tok-o]#(#[.tok-n]#Task#
[.tok-n]#task# [.tok-o]#:# [.tok-n]#tasks#[.tok-o]#)# [.tok-o]#\{#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#complete#[.tok-o]#(#[.tok-n]#task#[.tok-o]#.#[.tok-na]#getId#[.tok-o]#());#
[.tok-o]#}# [.tok-c1]#// verify that the process is actually finished#
[.tok-n]#HistoryService# [.tok-n]#historyService# [.tok-o]#=#
[.tok-n]#processEngine#[.tok-o]#.#[.tok-na]#getHistoryService#[.tok-o]#();#
[.tok-n]#HistoricProcessInstance# [.tok-n]#historicProcessInstance#
[.tok-o]#=#
[.tok-n]#historyService#[.tok-o]#.#[.tok-na]#createHistoricProcessInstanceQuery#[.tok-o]#().#[.tok-na]#processInstanceId#[.tok-o]#(#[.tok-n]#procId#[.tok-o]#).#[.tok-na]#singleResult#[.tok-o]#();#
[.tok-n]#System#[.tok-o]#.#[.tok-na]#out#[.tok-o]#.#[.tok-na]#println#[.tok-o]#(#[.tok-s]#"Process
instance end time: "# [.tok-o]#+#
[.tok-n]#historicProcessInstance#[.tok-o]#.#[.tok-na]#getEndTime#[.tok-o]#());#
[.tok-o]#}# [.tok-o]#}#

[[bpmnFirstExampleFutureEnhancements]]
== 7.3.12. Future enhancements

It’s easy to see that this business process is too simple to be usable
in reality. However, as you are going through the BPMN 2.0 constructs
available in Activiti, you will be able to enhance the business process
by:

* defining *gateways* that act as decisions. This way, a manager could
reject the financial report which would recreate the task for the
accountant.
* declaring and using *variables*, such that we can store or reference
the report so that it can be visualized in the form.
* defining a *service task* at the end of the process that will send the
report to every shareholder.
* etc.

[[bpmnConstructs]]
== 8. BPMN 2.0 Constructs

This chapter covers the BPMN 20 constructs supported by Activiti as well
as custom extensions to the BPMN standard.

[[bpmnCustomExtensions]]
=== 8.1. Custom extensions

The BPMN 2.0 standard is a good thing for all parties involved.
End-users don’t suffer from a vendor lock-in that comes by depending on
a proprietary solution. Frameworks, and particularly open-source
frameworks such as Activiti, can implement a solution that has the same
(and often better implemented ;-) features as those of a big vendor. Due
to the BPMN 2.0 standard, the transition from such a big vendor solution
towards Activiti is an easy and smooth path.

The downside of a standard however, is the fact that it is always the
result of many discussions and compromises between different companies
(and often visions). As a developer reading the BPMN 2.0 XML of a
process definition, sometimes it feels like certain constructs or way to
do things are too cumbersome. Since Activiti puts ease of development as
a top-priority, we introduced something called the *_Activiti BPMN
extensions_*. These _extensions_ are new constructs or ways to simplify
certain constructs that are not in the BPMN 2.0 specification.

Although the BPMN 2.0 specification clearly states that it was made for
custom extension, we make sure that:

* The prerequisite of such a custom extension is that there *always*
must be a simple transformation to the *standard way of doing things*.
So when you decide to use a custom extension, you don’t have to be
afraid that there is no way back.
* When using a custom extension, this is always clearly indicated by
giving the new XML element, attribute, etc. the *activiti:* namespace
prefix.

So whether you want to use a custom extension or not, is completely up
to you. Several factors will influence this decision (graphical editor
usage, company policy, etc.). We only provide them since we believe that
some points in the standard can be done simpler or more efficient. Feel
free to give us (positive and/or negative) feedback on our extensions,
or to post new ideas for custom extensions. Who knows, some day your
idea might pop up in the specification!

[[bpmnEvents]]
=== 8.2. Events

Events are used to model something that happens during the lifetime
process. Events are always visualized as a circle. In BPMN 2.0, there
exist two main event categories: _catching_ or _throwing_ event.

* *Catching:* when process execution arrives in the event, it will wait
for a trigger to happen. The type of trigger is defined by the inner
icon or the type declaration in the XML. Catching events are visually
differentiated from a throwing event by the inner icon that is not
filled (i.e. it is white).
* *Throwing:* when process execution arrives in the event, a trigger is
fired. The type of trigger is defined by the inner icon or the type
declaration in the XML. Throwing events are visually differentiated from
a catching event by the inner icon that is filled with black.

[[eventDefinitions]]
==== 8.2.1. Event Definitions

Event definitions define the semantics of an event. Without an event
definition, an event "does nothing special". For instance a start event
without and event definition does not specify what exactly starts the
process. If we add an event definition to the start event (like for
instance a timer event definition) we declare what "type" of event
starts the process (in the case of a timer event definition the fact
that a certain point in time is reached).

[[timerEventDefinitions]]
==== 8.2.2. Timer Event Definitions

Timer events are events which are triggered by defined timer. They can
be used as link:#bpmnTimerStartEvent[start event],
link:#bpmnIntermediateCatchingEvent[intermediate event] or
link:#bpmnTimerBoundaryEvent[boundary event]. The behavior of the time
event depends on the business calendar used. Every timer event has a
default business calendar, but the business calendar can also be defined
on the timer event definition.

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<timerEventDefinition#
[.tok-na]#activiti:businessCalendarName=#[.tok-s]#"custom"#[.tok-nt]#>#
... [.tok-nt]#</timerEventDefinition>#

Where businessCalendarName points to business calendar in process engine
configuration. When business calendar is omitted default business
calendars are used.

Timer definition must have exactly one element from the following:

* *timeDate*. This format specifies fixed date in
http://en.wikipedia.org/wiki/ISO_8601#Dates[ISO 8601] format, when
trigger will be fired. Example:

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<timerEventDefinition>#
[.tok-nt]##<timeDate>##2011-03-11T12:13:14[.tok-nt]##</timeDate>##
[.tok-nt]#</timerEventDefinition>#

* *timeDuration*. To specify how long the timer should run before it is
fired, a _timeDuration_ can be specified as sub-element of
_timerEventDefinition_. The format used is the
http://en.wikipedia.org/wiki/ISO_8601#Durations[ISO 8601] format (as
required by the BPMN 2.0 specification). Example (interval lasting 10
days):

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<timerEventDefinition>#
[.tok-nt]##<timeDuration>##P10D[.tok-nt]##</timeDuration>##
[.tok-nt]#</timerEventDefinition>#

* *timeCycle*. Specifies repeating interval, which can be useful for
starting process periodically, or for sending multiple reminders for
overdue user task. Time cycle element can be in two formats. First is
the format of recurring time duration, as specified by
http://en.wikipedia.org/wiki/ISO_8601#Repeating_intervals[ISO 8601]
standard. Example (3 repeating intervals, each lasting 10 hours):

There is also the possibility to specify the _endDate_ as an optional
attribute on the _timeCycle_ or either in the end of the time expression
as follows: `R3/PT10H/${EndDate}`. When the endDate is reached the
application will stop creating other jobs for this task. It accepts as
value either static values
http://en.wikipedia.org/wiki/ISO_8601#Dates[ISO 8601] standard for
example _"2015-02-25T16:42:11+00:00"_ or variables _$\{EndDate}_

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<timerEventDefinition># [.tok-nt]#<timeCycle#
[.tok-na]#activiti:endDate=#[.tok-s]#"2015-02-25T16:42:11+00:00"#[.tok-nt]##>##R3/PT10H[.tok-nt]##</timeCycle>##
[.tok-nt]#</timerEventDefinition>#

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<timerEventDefinition>#
[.tok-nt]##<timeCycle>##R3/PT10H/$\{EndDate}[.tok-nt]#</timeCycle>#
[.tok-nt]#</timerEventDefinition>#

If both are specified then the endDate specified as attribute will be
used by the system.

Currently only the _BoundaryTimerEvents_ and _CatchTimerEvent_ supports
_EndDate_ functionality.

Additionally, you can specify time cycle using cron expressions, example
below shows trigger firing every 5 minutes, starting at full hour:

....
0 0/5 * * * ?
....

Please see
http://www.quartz-scheduler.org/docs/tutorials/crontrigger.html[this
tutorial] for using cron expressions.

*Note:* The first symbol denotes seconds, not minutes as in normal Unix
cron.

The recurring time duration is better suited for handling relative
timers, which are calculated with respect to some particular point in
time (e.g. time when user task was started), while cron expressions can
handle absolute timers - which is particularly useful for
link:#timerStartEventDescription[timer start events].

You can use expressions for the timer event definitions, by doing so you
can influence the timer definition based on process variables. The
process variables must contain the ISO 8601 (or cron for cycle type)
string for appropriate timer type.

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<boundaryEvent# [.tok-na]#id=#[.tok-s]#"escalationTimer"#
[.tok-na]#cancelActivity=#[.tok-s]#"true"#
[.tok-na]#attachedToRef=#[.tok-s]#"firstLineSupport"#[.tok-nt]#>#
[.tok-nt]#<timerEventDefinition>#
[.tok-nt]##<timeDuration>##$\{duration}[.tok-nt]#</timeDuration>#
[.tok-nt]#</timerEventDefinition># [.tok-nt]#</boundaryEvent>#

*Note:* timers are only fired when the job or async executor is enabled
(i.e. _jobExecutorActivate_ or _asyncExecutorActivate_ needs to be set
to `true` in the `activiti.cfg.xml`, since the job and async executor
are disabled by default).

[[bpmnErrorEventDefinition]]
== 8.2.3. Error Event Definitions

*Important note:* a BPMN error is NOT the same as a Java exception. In
fact, the two have nothing in common. BPMN error events are a way of
modeling _business exceptions_. Java exceptions are handled in
link:#serviceTaskExceptionHandling[their own specific way].

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<endEvent#
[.tok-na]#id=#[.tok-s]#"myErrorEndEvent"#[.tok-nt]#>#
[.tok-nt]#<errorEventDefinition# [.tok-na]#errorRef=#[.tok-s]#"myError"#
[.tok-nt]#/># [.tok-nt]#</endEvent>#

[[bpmnSignalEventDefinition]]
== 8.2.4. Signal Event Definitions

Signal events are events which reference a named signal. A signal is an
event of global scope (broadcast semantics) and is delivered to all
active handlers (waiting process instances/catching signal events).

A signal event definition is declared using the `signalEventDefinition`
element. The attribute `signalRef` references a `signal` element
declared as a child element of the `definitions` root element. The
following is an excerpt of a process where a signal event is thrown and
caught by intermediate events.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
----

[.tok-nt]#<definitions...# [.tok-nt]#># [.tok-c]#<!-- declaration of the
signal --># [.tok-nt]#<signal# [.tok-na]#id=#[.tok-s]#"alertSignal"#
[.tok-na]#name=#[.tok-s]#"alert"# [.tok-nt]#/># [.tok-nt]#<process#
[.tok-na]#id=#[.tok-s]#"catchSignal"#[.tok-nt]#>#
[.tok-nt]#<intermediateThrowEvent#
[.tok-na]#id=#[.tok-s]#"throwSignalEvent"#
[.tok-na]#name=#[.tok-s]#"Alert"#[.tok-nt]#># [.tok-c]#<!-- signal event
definition --># [.tok-nt]#<signalEventDefinition#
[.tok-na]#signalRef=#[.tok-s]#"alertSignal"# [.tok-nt]#/>#
[.tok-nt]#</intermediateThrowEvent># ...
[.tok-nt]#<intermediateCatchEvent#
[.tok-na]#id=#[.tok-s]#"catchSignalEvent"# [.tok-na]#name=#[.tok-s]#"On
Alert"#[.tok-nt]#># [.tok-c]#<!-- signal event definition -->#
[.tok-nt]#<signalEventDefinition#
[.tok-na]#signalRef=#[.tok-s]#"alertSignal"# [.tok-nt]#/>#
[.tok-nt]#</intermediateCatchEvent># ... [.tok-nt]#</process>#
[.tok-nt]#</definitions>#

The `signalEventDefinition`s reference the same `signal` element.

[[bpmnSignalEventDefinitionThrow]]
== Throwing a Signal Event

A signal can either be thrown by a process instance using a BPMN
construct or programmatically using java API. The following methods on
the `org.activiti.engine.RuntimeService` can be used to throw a signal
programmatically:

[source,pygments,highlight]
----
1
2
----

[.tok-n]#RuntimeService#[.tok-o]#.#[.tok-na]#signalEventReceived#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#signalName#[.tok-o]#);#
[.tok-n]#RuntimeService#[.tok-o]#.#[.tok-na]#signalEventReceived#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#signalName#[.tok-o]#,# [.tok-n]#String#
[.tok-n]#executionId#[.tok-o]#);#

The difference between `signalEventReceived(String signalName);` and
`signalEventReceived(String signalName, String executionId);` is that
the first method throws the signal globally to all subscribed handlers
(broadcast semantics) and the second method delivers the signal to a
specific execution only.

[[bpmnSignalEventDefinitionCatch]]
== Catching a Signal Event

A signal event can be caught by an intermediate catch signal event or a
signal boundary event.

[[bpmnSignalEventDefinitionQuery]]
== Querying for Signal Event subscriptions

It is possible to query for all executions which have subscribed to a
specific signal event:

[source,pygments,highlight]
----
1
2
3
----

[.tok-n]#List#[.tok-o]#<#[.tok-n]#Execution#[.tok-o]#>#
[.tok-n]#executions# [.tok-o]#=#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#createExecutionQuery#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#signalEventSubscriptionName#[.tok-o]#(#[.tok-s]#"alert"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#list#[.tok-o]#();#

We could then use the
`signalEventReceived(String signalName, String executionId)` method to
deliver the signal to these executions.

[[bpmnSignalEventDefinitionScope]]
== Signal event scope

By default, signals are _broadcast process engine wide_. This means that
you can throw a signal event in a process instance, and other process
instances with different process definitions can react on the occurrence
of this event.

However, sometimes it is wanted to react to a signal event only within
the _same process instance_. A use case for example is a synchronization
mechanism in the process instance, if two or more activities are
mutually exclusive.

To restrict the _scope_ of the signal event, add the (non-BPMN 2.0
standard!) _scope attribute_ to the signal event definition:

[source,pygments,highlight]
----
1
----

[.tok-nt]#<signal# [.tok-na]#id=#[.tok-s]#"alertSignal"#
[.tok-na]#name=#[.tok-s]#"alert"#
[.tok-na]#activiti:scope=#[.tok-s]#"processInstance"#[.tok-nt]#/>#

The default value for this is attribute is _"global"_.

[[bpmnSignalEventDefinitionExample]]
== Signal Event example(s)

The following is an example of two separate processes communicating
using signals. The first process is started if an insurance policy is
updated or changed. After the changes have been reviewed by a human
participant, a signal event is thrown, signaling that a policy has
changed:

image:images/bpmn.signal.event.throw.png[bpmn.signal.event.throw]

This event can now be caught by all process instances which are
interested. The following is an example of a process subscribing to the
event.

image:images/bpmn.signal.event.catch.png[bpmn.signal.event.catch]

*Note:* it is important to understand that a signal event is broadcast
to *all* active handlers. This means in the case of the example given
above, that all instances of the process catching the signal would
receive the event. In this case this is what we want. However, there are
also situations where the broadcast behavior is unintended. Consider the
following process:

image:images/bpmn.signal.event.warning.1.png[bpmn.signal.event.warning.1]

The pattern described in the process above is not supported by BPMN. The
idea is that the error thrown while performing the "do something" task
is caught by the boundary error event and would be propagated to the
parallel path of execution using the signal throw event and then
interrupt the "do something in parallel" task. So far Activiti would
perform as expected. The signal would be propagated to the catching
boundary event and interrupt the task. *However, due to the broadcast
semantics of the signal, it would also be propagated to all other
process instances which have subscribed to the signal event.* In this
case, this might not be what we want.

*Note:* the signal event does not perform any kind of correlation to a
specific process instance. On the contrary, it is broadcast to all
process instances. If you need to deliver a signal to a specific process
instance only, perform correlation manually and use
`signalEventReceived(String signalName, String executionId)` and the
appropriate link:#bpmnSignalEventDefinitionQuery[query mechanisms].

Activiti does have a way to fix this, by adding the _scope_ attribute to
the signal event and set it to _processInstance_.

[[bpmnMessageEventDefinition]]
== 8.2.5. Message Event Definitions

Message events are events which reference a named message. A message has
a name and a payload. Unlike a signal, a message event is always
directed at a single receiver.

A message event definition is declared using the
`messageEventDefinition` element. The attribute `messageRef` references
a `message` element declared as a child element of the `definitions`
root element. The following is an excerpt of a process where two message
events is declared and referenced by a start event and an intermediate
catching message event.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
----

[.tok-nt]#<definitions# [.tok-na]#id=#[.tok-s]#"definitions"#
[.tok-na]#xmlns=#[.tok-s]#"http://www.omg.org/spec/BPMN/20100524/MODEL"#
[.tok-na]#xmlns:activiti=#[.tok-s]#"http://activiti.org/bpmn"#
[.tok-na]#targetNamespace=#[.tok-s]#"Examples"#
[.tok-na]#xmlns:tns=#[.tok-s]#"Examples"#[.tok-nt]#>#
[.tok-nt]#<message# [.tok-na]#id=#[.tok-s]#"newInvoice"#
[.tok-na]#name=#[.tok-s]#"newInvoiceMessage"# [.tok-nt]#/>#
[.tok-nt]#<message# [.tok-na]#id=#[.tok-s]#"payment"#
[.tok-na]#name=#[.tok-s]#"paymentMessage"# [.tok-nt]#/>#
[.tok-nt]#<process# [.tok-na]#id=#[.tok-s]#"invoiceProcess"#[.tok-nt]#>#
[.tok-nt]#<startEvent# [.tok-na]#id=#[.tok-s]#"messageStart"#
[.tok-nt]#># [.tok-nt]#<messageEventDefinition#
[.tok-na]#messageRef=#[.tok-s]#"newInvoice"# [.tok-nt]#/>#
[.tok-nt]#</startEvent># ... [.tok-nt]#<intermediateCatchEvent#
[.tok-na]#id=#[.tok-s]#"paymentEvt"# [.tok-nt]#>#
[.tok-nt]#<messageEventDefinition#
[.tok-na]#messageRef=#[.tok-s]#"payment"# [.tok-nt]#/>#
[.tok-nt]#</intermediateCatchEvent># ... [.tok-nt]#</process>#
[.tok-nt]#</definitions>#

[[bpmnMessageEventDefinitionThrow]]
== Throwing a Message Event

As an embeddable process engine, Activiti is not concerned with actually
receiving a message. This would be environment dependent and entail
platform-specific activities like connecting to a JMS (Java Messaging
Service) Queue/Topic or processing a Webservice or REST request. The
reception of messages is therefore something you have to implement as
part of the application or infrastructure into which the process engine
is embedded.

After you have received a message inside your application, you must
decide what to do with it. If the message should trigger the start of a
new process instance, choose between the following methods offered by
the runtime service:

[source,pygments,highlight]
----
1
2
3
----

[.tok-n]#ProcessInstance#
[.tok-nf]#startProcessInstanceByMessage#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#messageName#[.tok-o]#);# [.tok-n]#ProcessInstance#
[.tok-nf]#startProcessInstanceByMessage#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#messageName#[.tok-o]#,#
[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#># [.tok-n]#processVariables#[.tok-o]#);#
[.tok-n]#ProcessInstance#
[.tok-nf]#startProcessInstanceByMessage#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#messageName#[.tok-o]#,# [.tok-n]#String#
[.tok-n]#businessKey#[.tok-o]#,#
[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#># [.tok-n]#processVariables#[.tok-o]#);#

These methods allow starting a process instance using the referenced
message.

If the message needs to be received by an existing process instance, you
first have to correlate the message to a specific process instance (see
next section) and then trigger the continuation of the waiting
execution. The runtime service offers the following methods for
triggering an execution based on a message event subscription:

[source,pygments,highlight]
----
1
2
----

[.tok-kt]#void#
[.tok-nf]#messageEventReceived#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#messageName#[.tok-o]#,# [.tok-n]#String#
[.tok-n]#executionId#[.tok-o]#);# [.tok-kt]#void#
[.tok-nf]#messageEventReceived#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#messageName#[.tok-o]#,# [.tok-n]#String#
[.tok-n]#executionId#[.tok-o]#,#
[.tok-n]#HashMap#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#># [.tok-n]#processVariables#[.tok-o]#);#

[[bpmnMessageEventDefinitionQuery]]
== Querying for Message Event subscriptions

* In the case of a message start event, the message event subscription
is associated with a particular _process definition_. Such message
subscriptions can be queried using a `ProcessDefinitionQuery`:

[source,pygments,highlight]
----
1
2
3
----

[.tok-n]#ProcessDefinition# [.tok-n]#processDefinition# [.tok-o]#=#
[.tok-n]#repositoryService#[.tok-o]#.#[.tok-na]#createProcessDefinitionQuery#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#messageEventSubscription#[.tok-o]#(#[.tok-s]#"newCallCenterBooking"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#singleResult#[.tok-o]#();#

Since there can only be one process definition for a specific message
subscription, the query always returns zero or one results. If a process
definition is updated, only the newest version of the process definition
has a subscription to the message event.

* In the case of an intermediate catch message event, the message event
subscription is associated with a particular _execution_. Such message
event subscriptions can be queried using a `ExecutionQuery`:

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-n]#Execution# [.tok-n]#execution# [.tok-o]#=#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#createExecutionQuery#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#messageEventSubscriptionName#[.tok-o]#(#[.tok-s]#"paymentReceived"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#variableValueEquals#[.tok-o]#(#[.tok-s]#"orderId"#[.tok-o]#,#
[.tok-n]#message#[.tok-o]#.#[.tok-na]#getOrderId#[.tok-o]#())#
[.tok-o]#.#[.tok-na]#singleResult#[.tok-o]#();#

Such queries are called correlation queries and usually require
knowledge about the processes (in this case that there will be at most
one process instance for a given orderId).

[[bpmnMessageEventDefinitionExample]]
== Message Event example(s)

The following is an example of a process which can be started using two
different messages:

image:images/bpmn.start.message.event.example.1.png[bpmn.start.message.event.example.1]

This is useful if the process needs alternative ways to react to
different start events but eventually continues in a uniform way.

[[bpmnStartEvents]]
== 8.2.6. Start Events

A start event indicates where a process starts. The type of start event
(process starts on arrival of message, on specific time intervals,
etc.), defining _how_ the process is started is shown as a small icon in
the visual representation of the event. In the XML representation, the
type is given by the declaration of a sub-element.

Start events *are always catching*: conceptually the event is (at any
time) waiting until a certain trigger happens.

In a start event, following Activiti-specific properties can be
specified:

* *initiator*: identifies the variable name in which the authenticated
user id will be stored when the process is started. Example:

[source,pygments,highlight]
----
1
----

[.tok-nt]#<startEvent# [.tok-na]#id=#[.tok-s]#"request"#
[.tok-na]#activiti:initiator=#[.tok-s]#"initiator"# [.tok-nt]#/>#

The authenticated user must be set with the method
`IdentityService.setAuthenticatedUserId(String)` in a try-finally block
like this:

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-k]#try# [.tok-o]#\{#
[.tok-n]#identityService#[.tok-o]#.#[.tok-na]#setAuthenticatedUserId#[.tok-o]#(#[.tok-s]#"bono"#[.tok-o]#);#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#startProcessInstanceByKey#[.tok-o]#(#[.tok-s]#"someProcessKey"#[.tok-o]#);#
[.tok-o]#}# [.tok-k]#finally# [.tok-o]#\{#
[.tok-n]#identityService#[.tok-o]#.#[.tok-na]#setAuthenticatedUserId#[.tok-o]#(#[.tok-kc]#null#[.tok-o]#);#
[.tok-o]#}#

This code is baked into the Activiti Explorer application. So it works
in combination with link:#forms[Forms].

[[bpmnNoneStartEvent]]
== 8.2.7. None Start Event

[[noneStartEventDescription]]
=== Description

A _none_ start event technically means that the trigger for starting the
process instance is unspecified. This means that the engine cannot
anticipate when the process instance must be started. The none start
event is used when the process instance is started through the API by
calling one of the _startProcessInstanceByXXX_ methods.

[source,pygments,highlight]
----
1
----

[.tok-n]#ProcessInstance# [.tok-n]#processInstance# [.tok-o]#=#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#startProcessInstanceByXXX#[.tok-o]#();#

_Note:_ a subprocess always has a none start event.

[[noneStartEventGraphicalNotation]]
== Graphical notation

A none start event is visualized as a circle with no inner icon (i.e. no
trigger type).

image:images/bpmn.none.start.event.png[bpmn.none.start.event]

[[noneStartEventXml]]
== XML representation

The XML representation of a none start event is the normal start event
declaration, without any sub-element (other start event types all have a
sub-element declaring the type).

[source,pygments,highlight]
----
1
----

[.tok-nt]#<startEvent# [.tok-na]#id=#[.tok-s]#"start"#
[.tok-na]#name=#[.tok-s]#"my start event"# [.tok-nt]#/>#

[[noneStartEventCustomExtension]]
== Custom extensions for the none start event

*formKey*: references to a form template that users have to fill in when
starting a new process instance. More information can be found in
link:#forms[the forms section] Example:

[source,pygments,highlight]
----
1
----

[.tok-nt]#<startEvent# [.tok-na]#id=#[.tok-s]#"request"#
[.tok-na]#activiti:formKey=#[.tok-s]#"org/activiti/examples/taskforms/request.form"#
[.tok-nt]#/>#

[[bpmnTimerStartEvent]]
== 8.2.8. Timer Start Event

[[timerStartEventDescription]]
=== Description

A timer start event is used to create process instance at given time. It
can be used both for processes which should start only once and for
processes that should start in specific time intervals.

_Note:_ a subprocess cannot have a timer start event.

_Note:_ a start timer event is scheduled as soon as process is deployed.
There is no need to call startProcessInstanceByXXX, although calling
start process methods is not restricted and will cause one more starting
of the process at the time of startProcessInstanceByXXX Invocation.

_Note:_ when a new version of a process with a start timer event is
deployed, the job corresponding with the previous timer will be removed.
The reasoning is that normally it is not wanted to keep automatically
starting new process instances of this old version of the process.

[[timerStartEventGraphicalNotation]]
=== Graphical notation

A none start event is visualized as a circle with clock inner icon.

image:images/bpmn.clock.start.event.png[bpmn.clock.start.event]

[[timerStartEventXml]]
=== XML representation

The XML representation of a timer start event is the normal start event
declaration, with timer definition sub-element. Please refer to
link:#timerEventDefinitions[timer definitions] for configuration
details.

Example: process will start 4 times, in 5 minute intervals, starting on
11th march 2011, 12:13

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<startEvent# [.tok-na]#id=#[.tok-s]#"theStart"#[.tok-nt]#>#
[.tok-nt]#<timerEventDefinition>#
[.tok-nt]##<timeCycle>##R4/2011-03-11T12:13/PT5M[.tok-nt]##</timeCycle>##
[.tok-nt]#</timerEventDefinition># [.tok-nt]#</startEvent>#

Example: process will start once, on selected date

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<startEvent# [.tok-na]#id=#[.tok-s]#"theStart"#[.tok-nt]#>#
[.tok-nt]#<timerEventDefinition>#
[.tok-nt]##<timeDate>##2011-03-11T12:13:14[.tok-nt]##</timeDate>##
[.tok-nt]#</timerEventDefinition># [.tok-nt]#</startEvent>#

[[bpmnMessageStartEvent]]
== 8.2.9. Message Start Event

[[messageStartEventDescription]]
=== Description

A link:#bpmnMessageEventDefinition[message] start event can be used to
start a process instance using a named message. This effectively allows
us to _select_ the right start event from a set of alternative start
events using the message name.

When *deploying* a process definition with one or more message start
events, the following considerations apply:

* The name of the message start event must be unique across a given
process definition. A process definition must not have multiple message
start events with the same name. Activiti throws an exception upon
deployment of a process definition such that two or more message start
events reference the same message of if two or more message start events
reference messages with the same message name.
* The name of the message start event must be unique across all deployed
process definitions. Activiti throws an exception upon deployment of a
process definition such that one or more message start events reference
a message with the same name as a message start event already deployed
by a different process definition.
* Process versioning: Upon deployment of a new version of a process
definition, the message subscriptions of the previous version are
cancelled. This is also true for message events that are not present in
the new version.

When *starting* a process instance, a message start event can be
triggered using the following methods on the `RuntimeService`:

[source,pygments,highlight]
----
1
2
3
----

[.tok-n]#ProcessInstance#
[.tok-nf]#startProcessInstanceByMessage#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#messageName#[.tok-o]#);# [.tok-n]#ProcessInstance#
[.tok-nf]#startProcessInstanceByMessage#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#messageName#[.tok-o]#,#
[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#># [.tok-n]#processVariables#[.tok-o]#);#
[.tok-n]#ProcessInstance#
[.tok-nf]#startProcessInstanceByMessage#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#messageName#[.tok-o]#,# [.tok-n]#String#
[.tok-n]#businessKey#[.tok-o]#,#
[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#<# [.tok-n]#processVariables#[.tok-o]#);#

The `messageName` is the name given in the `name` attribute of the
`message` element referenced by the `messageRef` attribute of the
`messageEventDefinition`. The following considerations apply when
*starting* a process instance:

* Message start events are only supported on top-level processes.
Message start events are not supported on embedded sub processes.
* If a process definition has multiple message start events,
`runtimeService.startProcessInstanceByMessage(…​)` allows to select the
appropriate start event.
* If a process definition has multiple message start events and a single
none start event, `runtimeService.startProcessInstanceByKey(…​)` and
`runtimeService.startProcessInstanceById(…​)` starts a process instance
using the none start event.
* If a process definition has multiple message start events and no none
start event, `runtimeService.startProcessInstanceByKey(…​)` and
`runtimeService.startProcessInstanceById(…​)` throw an exception.
* If a process definition has a single message start event,
`runtimeService.startProcessInstanceByKey(…​)` and
`runtimeService.startProcessInstanceById(…​)` start a new process
instance using the message start event.
* If a process is started from a call activity, message start event(s)
are only supported if
+
** in addition to the message start event(s), the process has a single
none start event
** the process has a single message start event and no other start
events.

[[messageStartEventGraphicalNotation]]
== Graphical notation

A message start event is visualized as a circle with a message event
symbol. The symbol is unfilled, to visualize the catching (receiving)
behavior.

image:images/bpmn.start.message.event.png[bpmn.start.message.event]

[[messageStartEventXml]]
== XML representation

The XML representation of a message start event is the normal start
event declaration with a messageEventDefinition child-element:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
----

[.tok-nt]#<definitions# [.tok-na]#id=#[.tok-s]#"definitions"#
[.tok-na]#xmlns=#[.tok-s]#"http://www.omg.org/spec/BPMN/20100524/MODEL"#
[.tok-na]#xmlns:activiti=#[.tok-s]#"http://activiti.org/bpmn"#
[.tok-na]#targetNamespace=#[.tok-s]#"Examples"#
[.tok-na]#xmlns:tns=#[.tok-s]#"Examples"#[.tok-nt]#>#
[.tok-nt]#<message# [.tok-na]#id=#[.tok-s]#"newInvoice"#
[.tok-na]#name=#[.tok-s]#"newInvoiceMessage"# [.tok-nt]#/>#
[.tok-nt]#<process# [.tok-na]#id=#[.tok-s]#"invoiceProcess"#[.tok-nt]#>#
[.tok-nt]#<startEvent# [.tok-na]#id=#[.tok-s]#"messageStart"#
[.tok-nt]#># [.tok-nt]#<messageEventDefinition#
[.tok-na]#messageRef=#[.tok-s]#"tns:newInvoice"# [.tok-nt]#/>#
[.tok-nt]#</startEvent># ... [.tok-nt]#</process>#
[.tok-nt]#</definitions>#

[[bpmnSignalStartEvent]]
== 8.2.10. Signal Start Event

[[bpmnSignalStartEventDescription]]
=== Description

A link:#bpmnSignalEventDefinition[signal] start event can be used to
start a process instance using a named signal. The signal can be _fired_
from within a process instance using the intermediary signal throw event
or through the API (_runtimeService.signalEventReceivedXXX_ methods). In
both cases, all process definitions that have a signal start event with
the same name will be started.

Note that in both cases, it is also possible to choose between a
synchronous and asynchronous starting of the process instances.

The `signalName` that must be passed in the API is the name given in the
`name` attribute of the `signal` element referenced by the `signalRef`
attribute of the `signalEventDefinition`.

[[signalStartEventGraphicalNotation]]
=== Graphical notation

A signal start event is visualized as a circle with a signal event
symbol. The symbol is unfilled, to visualize the catching (receiving)
behavior.

image:images/bpmn.start.signal.event.png[bpmn.start.signal.event]

[[signalStartEventXml]]
=== XML representation

The XML representation of a signal start event is the normal start event
declaration with a signalEventDefinition child-element:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
----

[.tok-nt]#<signal# [.tok-na]#id=#[.tok-s]#"theSignal"#
[.tok-na]#name=#[.tok-s]#"The Signal"# [.tok-nt]#/># [.tok-nt]#<process#
[.tok-na]#id=#[.tok-s]#"processWithSignalStart1"#[.tok-nt]#>#
[.tok-nt]#<startEvent# [.tok-na]#id=#[.tok-s]#"theStart"#[.tok-nt]#>#
[.tok-nt]#<signalEventDefinition#
[.tok-na]#id=#[.tok-s]#"theSignalEventDefinition"#
[.tok-na]#signalRef=#[.tok-s]#"theSignal"# [.tok-nt]#/>#
[.tok-nt]#</startEvent># [.tok-nt]#<sequenceFlow#
[.tok-na]#id=#[.tok-s]#"flow1"#
[.tok-na]#sourceRef=#[.tok-s]#"theStart"#
[.tok-na]#targetRef=#[.tok-s]#"theTask"# [.tok-nt]#/>#
[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"theTask"#
[.tok-na]#name=#[.tok-s]#"Task in process A"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow2"#
[.tok-na]#sourceRef=#[.tok-s]#"theTask"#
[.tok-na]#targetRef=#[.tok-s]#"theEnd"# [.tok-nt]#/>#
[.tok-nt]#<endEvent# [.tok-na]#id=#[.tok-s]#"theEnd"# [.tok-nt]#/>#
[.tok-nt]#</process>#

[[bpmnErrorStartEvent]]
== 8.2.11. Error Start Event

[[errorStartEventDescription]]
=== Description

An link:#bpmnErrorEventDefinition[error] start event can be used to
trigger an Event Sub-Process. *An error start event cannot be used for
starting a process instance*.

An error start event is always interrupting.

[[errorStartEventGraphicalNotation]]
=== Graphical notation

An error start event is visualized as a circle with an error event
symbol. The symbol is unfilled, to visualize the catching (receiving)
behavior.

image:images/bpmn.start.error.event.png[bpmn.start.error.event]

[[errorStartEventXml]]
=== XML representation

The XML representation of an error start event is the normal start event
declaration with an errorEventDefinition child-element:

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<startEvent# [.tok-na]#id=#[.tok-s]#"messageStart"#
[.tok-nt]#># [.tok-nt]#<errorEventDefinition#
[.tok-na]#errorRef=#[.tok-s]#"someError"# [.tok-nt]#/>#
[.tok-nt]#</startEvent>#

[[bpmnEndEvent]]
== 8.2.12. End Events

An end event signifies the end (of a path) of a (sub)process. An end
event is *always throwing*. This means that when process execution
arrives in the end event, a _result_ is thrown. The type of result is
depicted by the inner black icon of the event. In the XML
representation, the type is given by the declaration of a sub-element.

[[bpmnNoneEndEvent]]
== 8.2.13. None End Event

[[noneEndEventDescription]]
=== Description

A _none_ end event means that the _result_ thrown when the event is
reached is unspecified. As such, the engine will not do anything extra
besides ending the current path of execution.

[[bpmnNoneEndEventDescription]]
=== Graphical notation

A none end event is visualized as a circle with a thick border with no
inner icon (no result type).

image:images/bpmn.none.end.event.png[bpmn.none.end.event]

[[bpmnNoneStartEventXml]]
=== XML representation

The XML representation of a none end event is the normal end event
declaration, without any sub-element (other end event types all have a
sub-element declaring the type).

[source,pygments,highlight]
----
1
----

[.tok-nt]#<endEvent# [.tok-na]#id=#[.tok-s]#"end"#
[.tok-na]#name=#[.tok-s]#"my end event"# [.tok-nt]#/>#

[[bpmnErrorEndEvent]]
== 8.2.14. Error End Event

[[bpmnErrorEndEventDescription]]
=== Description

When process execution arrives in an *error end event*, the current path
of execution is ended and an error is thrown. This error can
link:#bpmnBoundaryErrorEvent[caught by a matching intermediate boundary
error event]. In case no matching boundary error event is found, an
exception will be thrown.

[[bpmnErrorEndEventGraphicalNotation]]
=== Graphical notation

An error end event is visualized as a typical end event (circle with
thick border), with the error icon inside. The error icon is completely
black, to indicate the throwing semantics.

image:images/bpmn.error.end.event.png[bpmn.error.end.event]

[[bpmnErrorEndEventXml]]
=== XML representation

And error end event is represented as an end event, with an
_errorEventDefinition_ child element.

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<endEvent#
[.tok-na]#id=#[.tok-s]#"myErrorEndEvent"#[.tok-nt]#>#
[.tok-nt]#<errorEventDefinition# [.tok-na]#errorRef=#[.tok-s]#"myError"#
[.tok-nt]#/># [.tok-nt]#</endEvent>#

The _errorRef_ attribute can reference an _error_ element that is
defined outside the process:

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-nt]#<error# [.tok-na]#id=#[.tok-s]#"myError"#
[.tok-na]#errorCode=#[.tok-s]#"123"# [.tok-nt]#/># ...
[.tok-nt]#<process# [.tok-na]#id=#[.tok-s]#"myProcess"#[.tok-nt]#># ...

The *errorCode* of the _error_ will be used to find the matching
catching boundary error event. If the _errorRef_ does not match any
defined _error_, then the _errorRef_ is used as a shortcut for the
_errorCode_. This is an Activiti specific shortcut. More concretely,
following snippets are equivalent in functionality.

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
----

[.tok-nt]#<error# [.tok-na]#id=#[.tok-s]#"myError"#
[.tok-na]#errorCode=#[.tok-s]#"error123"# [.tok-nt]#/># ...
[.tok-nt]#<process# [.tok-na]#id=#[.tok-s]#"myProcess"#[.tok-nt]#># ...
[.tok-nt]#<endEvent#
[.tok-na]#id=#[.tok-s]#"myErrorEndEvent"#[.tok-nt]#>#
[.tok-nt]#<errorEventDefinition# [.tok-na]#errorRef=#[.tok-s]#"myError"#
[.tok-nt]#/># [.tok-nt]#</endEvent># ...

is equivalent with

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<endEvent#
[.tok-na]#id=#[.tok-s]#"myErrorEndEvent"#[.tok-nt]#>#
[.tok-nt]#<errorEventDefinition#
[.tok-na]#errorRef=#[.tok-s]#"error123"# [.tok-nt]#/>#
[.tok-nt]#</endEvent>#

Note that the _errorRef_ must comply with the BPMN 2.0 schema, and must
be a valid QName.

[[bpmnCancelEndEvent]]
== 8.2.15. Terminate End Event

[[_description]]
=== Description

When a _terminate end event_ is reached, the current process instance or
sub-process will be terminated. Conceptually, when an execution arrives
in a terminate end event, the first _scope_ (process or sub-process)
will be determined and ended. Note that in BPMN 2.0, a sub-process can
be an embedded sub-process, call activity, event sub-process or
transaction sub-process. This rule applies in general: when for example
there is a multi-instance call activity or embedded subprocess, only
that instance will be ended, the other instances and the process
instance are not affected.

There is an optional attribute _terminateAll_ that can be added. When
_true_, regardless of the placement of the terminate end event in the
process definition and regardless of being in a sub-process (even
nested), the (root) process instance will be terminated.

[[_graphical_notation]]
=== Graphical notation

A cancel end event visualized as a typical end event (circle with thick
outline), with a full black circle inside.

image:images/bpmn.terminate.end.event.png[bpmn.terminate.end.event]

[[_xml_representation]]
=== XML representation

A terminate end event is represented as an end event, with a
_terminateEventDefinition_ child element.

Note that the _terminateAll_ attribute is optional (and _false_ by
default).

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<endEvent# [.tok-na]#id=#[.tok-s]#"myEndEvent ># [.tok-s]#
<terminateEventDefinition
activiti:terminateAll="#[.tok-err]#true"#[.tok-nt]#></terminateEventDefinition>#
[.tok-nt]#</endEvent>#

[[_cancel_end_event]]
== 8.2.16. Cancel End Event

link:#experimental[[EXPERIMENTAL]][#bpmnCancelEndEventDescription]##

[[_description_2]]
=== Description

The cancel end event can only be used in combination with a bpmn
transaction subprocess. When the cancel end event is reached, a cancel
event is thrown which must be caught by a cancel boundary event. The
cancel boundary event then cancels the transaction and triggers
compensation.

[[bpmnCancelEndEventGraphicalNotation]]
=== Graphical notation

A cancel end event visualized as a typical end event (circle with thick
outline), with the cancel icon inside. The cancel icon is completely
black, to indicate the throwing semantics.

image:images/bpmn.cancel.end.event.png[bpmn.cancel.end.event]

[[bpmnCancelEndEventXml]]
=== XML representation

A cancel end event is represented as an end event, with a
_cancelEventDefinition_ child element.

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<endEvent#
[.tok-na]#id=#[.tok-s]#"myCancelEndEvent"#[.tok-nt]#>#
[.tok-nt]#<cancelEventDefinition# [.tok-nt]#/># [.tok-nt]#</endEvent>#

[[bpmnBoundaryEvent]]
== 8.2.17. Boundary Events

Boundary events are _catching_ events that are attached to an activity
(a boundary event can never be throwing). This means that while the
activity is running, the event is _listening_ for a certain type of
trigger. When the event is _caught_, the activity is interrupted and the
sequence flow going out of the event are followed.

All boundary events are defined in the same way:

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<boundaryEvent# [.tok-na]#id=#[.tok-s]#"myBoundaryEvent"#
[.tok-na]#attachedToRef=#[.tok-s]#"theActivity"#[.tok-nt]#>#
[.tok-nt]#<XXXEventDefinition/># [.tok-nt]#</boundaryEvent>#

A boundary event is defined with

* A unique identifier (process-wide)
* A reference to the activity to which the event is attached through the
*attachedToRef* attribute. Note that a boundary event is defined on the
same level as the activities to which they are attached (i.e. no
inclusion of the boundary event inside the activity).
* An XML sub-element of the form _XXXEventDefinition_ (e.g.
_TimerEventDefinition_, _ErrorEventDefinition_, etc.) defining the type
of the boundary event. See the specific boundary event types for more
details.

[[bpmnTimerBoundaryEvent]]
== 8.2.18. Timer Boundary Event

[[timerBoundaryEventDescription]]
=== Description

A timer boundary event acts as a stopwatch and alarm clock. When an
execution arrives in the activity where the boundary event is attached
to, a timer is started. When the timer fires (e.g. after a specified
interval), the activity is interrupted boundary event are followed.

[[bpmnTimerBoundaryEventGraphicalNotation]]
=== Graphical Notation

A timer boundary event is visualized as a typical boundary event (i.e.
circle on the border), with the timer icon on the inside.

image:images/bpmn.boundary.timer.event.png[bpmn.boundary.timer.event]

[[bpmnTimerBoundaryEventXml]]
=== XML Representation

A timer boundary event is defined as a link:#bpmnBoundaryEvent[regular
boundary event]. The specific type sub-element is in this case a
*timerEventDefinition* element.

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<boundaryEvent# [.tok-na]#id=#[.tok-s]#"escalationTimer"#
[.tok-na]#cancelActivity=#[.tok-s]#"true"#
[.tok-na]#attachedToRef=#[.tok-s]#"firstLineSupport"#[.tok-nt]#>#
[.tok-nt]#<timerEventDefinition>#
[.tok-nt]##<timeDuration>##PT4H[.tok-nt]##</timeDuration>##
[.tok-nt]#</timerEventDefinition># [.tok-nt]#</boundaryEvent>#

Please refer to link:#timerEventDefinitions[timer event definition] for
details on timer configuration.

In the graphical representation, the line of the circle is dotted as you
can see in this example above:

image:images/bpmn.non.interrupting.boundary.timer.event.png[bpmn.non.interrupting.boundary.timer.event]

A typical use case is sending an escalation email additionally but not
interrupt the normal process flow.

Since BPMN 2.0 there is the difference between the interrupting and non
interrupting timer event. The interrupting is the default. The
non-interrupting leads to the original activity is *not* interrupted but
the activity stays there. Instead an additional executions is created
and send over the outgoing transition of the event. In the XML
representation, the _cancelActivity_ attribute is set to false:

[source,pygments,highlight]
----
1
----

[.tok-nt]#<boundaryEvent# [.tok-na]#id=#[.tok-s]#"escalationTimer"#
[.tok-na]#cancelActivity=#[.tok-s]#"false"#
[.tok-na]#attachedToRef=#[.tok-s]#"firstLineSupport"#[.tok-nt]#/>#

*Note:* boundary timer events are only fired when the job or async
executor is enabled (i.e. _jobExecutorActivate_ or
_asyncExecutorActivate_ needs to be set to `true` in the
`activiti.cfg.xml`, since the job and async executor are disabled by
default).

[[bpmnKnownIssueBoundaryEvent]]
== Known issue with boundary events

There is a known issue regarding concurrency when using boundary events
of any type. Currently, it is not possible to have multiple outgoing
sequence flow attached to a boundary event (see issue
https://activiti.atlassian.net/browse/ACT-47[ACT-47]). A solution to
this problem is to use one outgoing sequence flow that goes to a
parallel gateway.

image:images/bpmn.known.issue.boundary.event.png[bpmn.known.issue.boundary.event]

[[bpmnBoundaryErrorEvent]]
== 8.2.19. Error Boundary Event

[[bpmnBoundaryErrorEventDescription]]
=== Description

An intermediate _catching_ error on the boundary of an activity, or
*boundary error event* for short, catches errors that are thrown within
the scope of the activity on which it is defined.

Defining a boundary error event makes most sense on an
link:#bpmnSubProcess[embedded subprocess], or a
link:#bpmnCallActivity[call activity], as a subprocess creates a scope
for all activities inside the subprocess. Errors are thrown by
link:#bpmnErrorEndEvent[error end events]. Such an error will propagate
its parent scopes upwards until a scope is found on which a boundary
error event is defined that matches the error event definition.

When an error event is caught, the activity on which the boundary event
is defined is destroyed, also destroying all current executions within
(e.g. concurrent activities, nested subprocesses, etc.). Process
execution continues following the outgoing sequence flow of the boundary
event.

[[bpmnBoundaryErrorEventgraphicalNotation]]
=== Graphical notation

A boundary error event is visualized as a typical intermediate event
(circle with smaller circle inside) on the boundary, with the error icon
inside. The error icon is white, to indicate the _catch_ semantics.

image:images/bpmn.boundary.error.event.png[bpmn.boundary.error.event]

[[bpmnBoundaryErrorEventXml]]
=== Xml representation

A boundary error event is defined as a typical
link:#bpmnBoundaryEvent[boundary event]:

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<boundaryEvent# [.tok-na]#id=#[.tok-s]#"catchError"#
[.tok-na]#attachedToRef=#[.tok-s]#"mySubProcess"#[.tok-nt]#>#
[.tok-nt]#<errorEventDefinition#
[.tok-na]#errorRef=#[.tok-s]#"myError"#[.tok-nt]#/>#
[.tok-nt]#</boundaryEvent>#

As with the link:#bpmnErrorEndEvent[error end event], the _errorRef_
references an error defined outside the process element:

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-nt]#<error# [.tok-na]#id=#[.tok-s]#"myError"#
[.tok-na]#errorCode=#[.tok-s]#"123"# [.tok-nt]#/># ...
[.tok-nt]#<process# [.tok-na]#id=#[.tok-s]#"myProcess"#[.tok-nt]#># ...

The *errorCode* is used to match the errors that are caught:

* If _errorRef_ is omitted, the boundary error event will catch *any
error event*, regardless of the errorCode of the _error_.
* In case an _errorRef_ is provided and it references an existing
_error_, the boundary event will *only catch errors with the same error
code*.
* In case an _errorRef_ is provided, but no _error_ is defined in the
BPMN 2.0 file, then the *errorRef is used as errorCode* (similar for
with error end events).

[[bpmnBoundaryErrorEventExample]]
== Example

Following example process shows how an error end event can be used. When
the _'Review profitability'_ user task is completed by stating that not
enough information is provided, an error is thrown. When this error is
caught on the boundary of the subprocess, all active activities within
the _'Review sales lead'_ subprocess are destroyed (even if _'Review
customer rating'_ was not yet completed), and the _'Provide additional
details'_ user task is created.

image:images/bpmn.boundary.error.example.png[bpmn.boundary.error.example]

This process is shipped as example in the demo setup. The process XML
and unit test can be found in the
_org.activiti.examples.bpmn.event.error_ package.

[[bpmnBoundarySignalEvent]]
== 8.2.20. Signal Boundary Event

[[bpmnBoundarySignalEventDescription]]
=== Description

An attached intermediate _catching_
link:#bpmnSignalEventDefinition[signal] on the boundary of an activity,
or *boundary signal event* for short, catches signals with the same
signal name as the referenced signal definition.

*Note:* contrary to other events like the boundary error event, a
boundary signal event does not only catch signal events thrown from the
scope it is attached to. On the contrary, a signal event has global
scope (broadcast semantics) meaning that the signal can be thrown from
any place, even from a different process instance.

*Note:* contrary to other events like an error event, a signal is not
consumed if it is caught. If you have two active signal boundary events
catching the same signal event, both boundary events are triggered, even
if they are part of different process instances.

[[bpmnBoundarySignalEventGraphicalNotation]]
=== Graphical notation

A boundary signal event is visualized as a typical intermediate event
(Circle with smaller circle inside) on the boundary, with the signal
icon inside. The signal icon is white (unfilled), to indicate the
_catch_ semantics.

image:images/bpmn.boundary.signal.event.png[bpmn.boundary.signal.event]

[[bpmnBoundarySignalEventXml]]
=== XML representation

A boundary signal event is defined as a typical
link:#bpmnBoundaryEvent[boundary event]:

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<boundaryEvent# [.tok-na]#id=#[.tok-s]#"boundary"#
[.tok-na]#attachedToRef=#[.tok-s]#"task"#
[.tok-na]#cancelActivity=#[.tok-s]#"true"#[.tok-nt]#>#
[.tok-nt]#<signalEventDefinition#
[.tok-na]#signalRef=#[.tok-s]#"alertSignal"#[.tok-nt]#/>#
[.tok-nt]#</boundaryEvent>#

[[bpmnBoundarySignalEventExample]]
== Example

See section on link:#bpmnSignalEventDefinition[signal event
definitions].

[[bpmnBoundaryMessageEvent]]
== 8.2.21. Message Boundary Event

[[bpmnBoundaryMessageEventDescription]]
=== Description

An attached intermediate _catching_
link:#bpmnMessageEventDefinition[message] on the boundary of an
activity, or *boundary message event* for short, catches messages with
the same message name as the referenced message definition.

[[bpmnBoundaryMessageEventGraphicalNotation]]
=== Graphical notation

A boundary message event is visualized as a typical intermediate event
(Circle with smaller circle inside) on the boundary, with the message
icon inside. The message icon is white (unfilled), to indicate the
_catch_ semantics.

image:images/bpmn.boundary.message.event.png[bpmn.boundary.message.event]

Note that boundary message event can be both interrupting (right hand
side) and non-interrupting (left hand side).

[[bpmnBoundaryMessageEventXml]]
=== XML representation

A boundary message event is defined as a typical
link:#bpmnBoundaryEvent[boundary event]:

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<boundaryEvent# [.tok-na]#id=#[.tok-s]#"boundary"#
[.tok-na]#attachedToRef=#[.tok-s]#"task"#
[.tok-na]#cancelActivity=#[.tok-s]#"true"#[.tok-nt]#>#
[.tok-nt]#<messageEventDefinition#
[.tok-na]#messageRef=#[.tok-s]#"newCustomerMessage"#[.tok-nt]#/>#
[.tok-nt]#</boundaryEvent>#

[[bpmnBoundaryMessageEventExample]]
== Example

See section on link:#bpmnMessageEventDefinition[message event
definitions].

[[bpmnBoundaryCancelEvent]]
== 8.2.22. Cancel Boundary Event

link:#experimental[[EXPERIMENTAL]][#bpmnBoundaryCancelEventDescription]##

[[_description_3]]
=== Description

An attached intermediate _catching_ cancel on the boundary of a
transaction subprocess, or *boundary cancel event* for short, is
triggered when a transaction is cancelled. When the cancel boundary
event is triggered, it first interrupts all executions active in the
current scope. Next, it starts compensation of all active compensation
boundary events in the scope of the transaction. Compensation is
performed synchronously, i.e. the boundary event waits before
compensation is completed before leaving the transaction. When
compensation is completed, the transaction subprocess is left using the
sequence flow(s) running out of the cancel boundary event.

*Note:* Only a single cancel boundary event is allowed for a transaction
subprocess.

*Note:* If the transaction subprocess hosts nested subprocesses,
compensation is only triggered for subprocesses that have completed
successfully.

*Note:* If a cancel boundary event is placed on a transaction subprocess
with multi instance characteristics, if one instance triggers
cancellation, the boundary event cancels all instances.

[[bpmnBoundaryCancelEventGraphicalNotation]]
=== Graphical notation

A cancel boundary event is visualized as a typical intermediate event
(Circle with smaller circle inside) on the boundary, with the cancel
icon inside. The cancel icon is white (unfilled), to indicate the
_catching_ semantics.

image:images/bpmn.boundary.cancel.event.png[bpmn.boundary.cancel.event]

[[bpmnBoundarySignalEventXml]]
=== XML representation

A cancel boundary event is defined as a typical
link:#bpmnBoundaryEvent[boundary event]:

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<boundaryEvent# [.tok-na]#id=#[.tok-s]#"boundary"#
[.tok-na]#attachedToRef=#[.tok-s]#"transaction"# [.tok-nt]#>#
[.tok-nt]#<cancelEventDefinition# [.tok-nt]#/>#
[.tok-nt]#</boundaryEvent>#

Since the cancel boundary event is always interrupting, the
`cancelActivity` attribute is not required.

[[bpmnBoundaryCompensationEvent]]
== 8.2.23. Compensation Boundary Event

link:#experimental[[EXPERIMENTAL]][#bpmnBoundaryCompensationEventDescription]##

[[_description_4]]
=== Description

An attached intermediate _catching_ compensation on the boundary of an
activity or *compensation boundary event* for short, can be used to
attach a compensation handler to an activity.

The compensation boundary event must reference a single compensation
handler using a directed association.

A compensation boundary event has a different activation policy from
other boundary events. Other boundary events like for instance the
signal boundary event are activated when the activity they are attached
to is started. When the activity is left, they are deactivated and the
corresponding event subscription is cancelled. The compensation boundary
event is different. The compensation boundary event is activated when
the activity it is attached to *completes successfully*. At this point,
the corresponding subscription to the compensation events is created.
The subscription is removed either when a compensation event is
triggered or when the corresponding process instance ends. From this, it
follows:

* When compensation is triggered, the compensation handler associated
with the compensation boundary event is invoked the same number of times
the activity it is attached to completed successfully.
* If a compensation boundary event is attached to an activity with
multiple instance characteristics, a compensation event subscription is
created for each instance.
* If a compensation boundary event is attached to an activity which is
contained inside a loop, a compensation event subscription is created
for each time the activity is executed.
* If the process instance ends, the subscriptions to compensation events
are cancelled.

*Note:* the compensation boundary event is not supported on embedded
subprocesses.

[[bpmnBoundaryCompensationEventGraphicalNotation]]
=== Graphical notation

A compensation boundary event is visualized as a typical intermediate
event (Circle with smaller circle inside) on the boundary, with the
compensation icon inside. The compensation icon is white (unfilled), to
indicate the _catching_ semantics. In addition to a compensation
boundary event, the following figure shows a compensation handler
associated with the boundary event using a unidirectional association:

image:images/bpmn.boundary.compensation.event.png[bpmn.boundary.compensation.event]

[[bpmnBoundaryCompensationEventXml]]
=== XML representation

A compensation boundary event is defined as a typical
link:#bpmnBoundaryEvent[boundary event]:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-nt]#<boundaryEvent#
[.tok-na]#id=#[.tok-s]#"compensateBookHotelEvt"#
[.tok-na]#attachedToRef=#[.tok-s]#"bookHotel"# [.tok-nt]#>#
[.tok-nt]#<compensateEventDefinition# [.tok-nt]#/>#
[.tok-nt]#</boundaryEvent># [.tok-nt]#<association#
[.tok-na]#associationDirection=#[.tok-s]#"One"#
[.tok-na]#id=#[.tok-s]#"a1"#
[.tok-na]#sourceRef=#[.tok-s]#"compensateBookHotelEvt"#
[.tok-na]#targetRef=#[.tok-s]#"undoBookHotel"# [.tok-nt]#/>#
[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"undoBookHotel"#
[.tok-na]#isForCompensation=#[.tok-s]#"true"#
[.tok-na]#activiti:class=#[.tok-s]#"..."# [.tok-nt]#/>#

Since the compensation boundary event is activated after the activity
has completed successfully, the `cancelActivity` attribute is not
supported.

[[bpmnIntermediateCatchingEvent]]
== 8.2.24. Intermediate Catching Events

All intermediate catching events are defined in the same way:

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<intermediateCatchEvent#
[.tok-na]#id=#[.tok-s]#"myIntermediateCatchEvent"# [.tok-nt]#>#
[.tok-nt]#<XXXEventDefinition/># [.tok-nt]#</intermediateCatchEvent>#

An intermediate catching event is defined with

* A unique identifier (process-wide)
* An XML sub-element of the form _XXXEventDefinition_ (e.g.
_TimerEventDefinition_, etc.) defining the type of the intermediate
catching event. See the specific catching event types for more details.

[[bpmnTimerIntermediateEvent]]
== 8.2.25. Timer Intermediate Catching Event

[[bpmnTimerIntermediateEventDescription]]
=== Description

A timer intermediate event acts as a stopwatch. When an execution
arrives in catching event activity, a timer is started. When the timer
fires (e.g. after a specified interval), the sequence flow going out of
the timer intermediate event is followed.

[[bpmnTimerIntermediateEventGraphicalNotation]]
=== Graphical Notation

A timer intermediate event is visualized as an intermediate catching
event, with the timer icon on the inside.

image:images/bpmn.intermediate.timer.event.png[bpmn.intermediate.timer.event]

[[bpmnTimerIntermediateEventXml]]
=== XML Representation

A timer intermediate event is defined as an
link:#bpmnIntermediateCatchingEvent[intermediate catching event]. The
specific type sub-element is in this case a *timerEventDefinition*
element.

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<intermediateCatchEvent#
[.tok-na]#id=#[.tok-s]#"timer"#[.tok-nt]#>#
[.tok-nt]#<timerEventDefinition>#
[.tok-nt]##<timeDuration>##PT5M[.tok-nt]##</timeDuration>##
[.tok-nt]#</timerEventDefinition># [.tok-nt]#</intermediateCatchEvent>#

See link:#timerEventDefinitions[timer event definitions] for
configuration details.

[[bpmnIntermediateSignalEvent]]
== 8.2.26. Signal Intermediate Catching Event

[[bpmnIntermediateSignalEventDescription]]
=== Description

An intermediate _catching_ link:#bpmnSignalEventDefinition[signal] event
catches signals with the same signal name as the referenced signal
definition.

*Note:* contrary to other events like an error event, a signal is not
consumed if it is caught. If you have two active signal boundary events
catching the same signal event, both boundary events are triggered, even
if they are part of different process instances.

[[bpmnIntermediateSignalEventGraphicalNotation]]
=== Graphical notation

An intermediate signal catch event is visualized as a typical
intermediate event (Circle with smaller circle inside), with the signal
icon inside. The signal icon is white (unfilled), to indicate the
_catch_ semantics.

image:images/bpmn.intermediate.signal.catch.event.png[bpmn.intermediate.signal.catch.event]

[[bpmnIntermediateSignalEventXml]]
=== XML representation

A signal intermediate event is defined as an
link:#bpmnIntermediateCatchingEvent[intermediate catching event]. The
specific type sub-element is in this case a *signalEventDefinition*
element.

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<intermediateCatchEvent#
[.tok-na]#id=#[.tok-s]#"signal"#[.tok-nt]#>#
[.tok-nt]#<signalEventDefinition#
[.tok-na]#signalRef=#[.tok-s]#"newCustomerSignal"# [.tok-nt]#/>#
[.tok-nt]#</intermediateCatchEvent>#

[[bpmnIntermediateSignalEventExample]]
== Example

See section on link:#bpmnSignalEventDefinition[signal event
definitions].

[[bpmnIntermediateMessageEvent]]
== 8.2.27. Message Intermediate Catching Event

[[bpmnIntermediateMessageEventDescription]]
=== Description

An intermediate _catching_ link:#bpmnMessageEventDefinition[message]
event catches messages with a specified name.

[[bpmnIntermediateMessageEventGraphicalNotation]]
=== Graphical notation

An intermediate catching message event is visualized as a typical
intermediate event (Circle with smaller circle inside), with the message
icon inside. The message icon is white (unfilled), to indicate the
_catch_ semantics.

image:images/bpmn.intermediate.message.catch.event.png[bpmn.intermediate.message.catch.event]

[[bpmnIntermediateSignalEventXml]]
=== XML representation

A message intermediate event is defined as an
link:#bpmnIntermediateCatchingEvent[intermediate catching event]. The
specific type sub-element is in this case a *messageEventDefinition*
element.

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<intermediateCatchEvent#
[.tok-na]#id=#[.tok-s]#"message"#[.tok-nt]#>#
[.tok-nt]#<messageEventDefinition#
[.tok-na]#signalRef=#[.tok-s]#"newCustomerMessage"# [.tok-nt]#/>#
[.tok-nt]#</intermediateCatchEvent>#

[[bpmnIntermediateMessageEventExample]]
== Example

See section on link:#bpmnMessageEventDefinition[message event
definitions].

[[bpmnIntermediateThrowEvent]]
== 8.2.28. Intermediate Throwing Event

All intermediate throwing events are defined in the same way:

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<intermediateThrowEvent#
[.tok-na]#id=#[.tok-s]#"myIntermediateThrowEvent"# [.tok-nt]#>#
[.tok-nt]#<XXXEventDefinition/># [.tok-nt]#</intermediateThrowEvent>#

An intermediate throwing event is defined with

* A unique identifier (process-wide)
* An XML sub-element of the form _XXXEventDefinition_ (e.g.
_signalEventDefinition_, etc.) defining the type of the intermediate
throwing event. See the specific throwing event types for more details.

[[bpmnIntermediateThrowNoneEvent]]
== 8.2.29. Intermediate Throwing None Event

The following process diagram shows a simple example of an intermediate
none event, which is often used to indicate some state achieved in the
process.

image:images/bpmn.intermediate.none.event.png[bpmn.intermediate.none.event]

This can be a good hook to monitor some KPI’s, basically by adding an
link:#executionListeners[execution listener].

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<intermediateThrowEvent#
[.tok-na]#id=#[.tok-s]#"noneEvent"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:executionListener#
[.tok-na]#class=#[.tok-s]#"org.activiti.engine.test.bpmn.event.IntermediateNoneEventTest$MyExecutionListener"#
[.tok-na]#event=#[.tok-s]#"start"# [.tok-nt]#/>#
[.tok-nt]#</extensionElements># [.tok-nt]#</intermediateThrowEvent>#

There you can add some own code to maybe send some event to your BAM
tool or DWH. The engine itself doesn’t do anything in that event, it
just passes through.

[[bpmnIntermediateThrowSignalEvent]]
== 8.2.30. Signal Intermediate Throwing Event

[[bpmnIntermediateThrowSignalEventDescription]]
=== Description

An intermediate _throwing_ link:#bpmnSignalEventDefinition[signal] event
throws a signal event for a defined signal.

In Activiti, the signal is broadcast to all active handlers (i.e. all
catching signal events). Signals can be published synchronous or
asynchronous.

* In the default configuration, the signal is delivered *synchronously*.
This means that the throwing process instance waits until the signal is
delivered to all catching process instances. The catching process
instances are also notified in the same transaction as the throwing
process instance, which means that if one of the notified instances
produces a technical error (throws an exception), all involved instances
fail.
* A signal can also be delivered *asynchronously*. In that case it is
determined which handlers are active at the time the throwing signal
event is reached. For each active handler, an asynchronous notification
message (Job) is stored and delivered by the JobExecutor.

[[bpmnIntermediateThrowSignalEventGraphicalNotation]]
=== Graphical notation

An intermediate signal throw event is visualized as a typical
intermediate event (Circle with smaller circle inside), with the signal
icon inside. The signal icon is black (filled), to indicate the _throw_
semantics.

image:images/bpmn.intermediate.signal.throw.event.png[bpmn.intermediate.signal.throw.event]

[[bpmnIntermediateThrowSignalEventXml]]
=== XML representation

A signal intermediate event is defined as an
link:#bpmnIntermediateThrowEvent[intermediate throwing event]. The
specific type sub-element is in this case a *signalEventDefinition*
element.

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<intermediateThrowEvent#
[.tok-na]#id=#[.tok-s]#"signal"#[.tok-nt]#>#
[.tok-nt]#<signalEventDefinition#
[.tok-na]#signalRef=#[.tok-s]#"newCustomerSignal"# [.tok-nt]#/>#
[.tok-nt]#</intermediateThrowEvent>#

An asynchronous signal event would look like this:

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<intermediateThrowEvent#
[.tok-na]#id=#[.tok-s]#"signal"#[.tok-nt]#>#
[.tok-nt]#<signalEventDefinition#
[.tok-na]#signalRef=#[.tok-s]#"newCustomerSignal"#
[.tok-na]#activiti:async=#[.tok-s]#"true"# [.tok-nt]#/>#
[.tok-nt]#</intermediateThrowEvent>#

[[bpmnIntermediateSignalEventExample]]
== Example

See section on link:#bpmnSignalEventDefinition[signal event
definitions].

[[bpmnIntermediateThrowCompensationEvent]]
== 8.2.31. Compensation Intermediate Throwing Event

link:#experimental[[EXPERIMENTAL]][#bpmnIntermediateThrowCompensationEventDescription]##

[[_description_5]]
=== Description

An intermediate _throwing_ compensation event can be used to trigger
compensation.

*Triggering compensation:* Compensation can either be triggered for a
designated activity or for the scope which hosts the compensation event.
Compensation is performed through execution of the compensation handler
associated with an activity.

* When compensation is thrown for an activity, the associated
compensation handler is executed the same number of times the activity
competed successfully.
* If compensation is thrown for the current scope, all activities within
the current scope are compensated, which includes activities on
concurrent branches.
* Compensation is triggered hierarchically: if an activity to be
compensated is a subprocess, compensation is triggered for all
activities contained in the subprocess. If the subprocess has nested
activities, compensation is thrown recursively. However, compensation is
not propagated to the "upper levels" of the process: if compensation is
triggered within a subprocess, it is not propagated to activities
outside of the subprocess scope. The BPMN specification states that
compensation is triggered for activities at "the same level of
subprocess".
* In Activiti compensation is performed in reverse order of execution.
This means that whichever activity completed last is compensated first,
etc.
* The intermediate throwing compensation event can be used to compensate
transaction subprocesses which competed successfully.

*Note:* If compensation is thrown within a scope which contains a
subprocess and the subprocess contains activities with compensation
handlers, compensation is only propagated to the subprocess if it has
completed successfully when compensation is thrown. If some of the
activities nested inside the subprocess have completed and have attached
compensation handlers, the compensation handlers are not executed if the
subprocess containing these activities is not completed yet. Consider
the following example:

image:images/bpmn.throw.compensation.example1.png[bpmn.throw.compensation.example1]

In this process we have two concurrent executions, one executing the
embedded subprocess and one executing the "charge credit card" activity.
Let’s assume both executions are started and the first concurrent
execution is waiting for a user to complete the "review bookings" task.
The second execution performs the "charge credit card" activity and an
error is thrown, which causes the "cancel reservations" event to trigger
compensation. At this point the parallel subprocess is not yet completed
which means that the compensation event is not propagated to the
subprocess and thus the "cancel hotel reservation" compensation handler
is not executed. If the user task (and thus the embedded subprocess)
completes before the "cancel reservations" is performed, compensation is
propagated to the embedded subprocess.

*Process variables:* When compensating an embedded subprocess, the
execution used for executing the compensation handlers has access to the
local process variables of the subprocess in the state they were in when
the subprocess completed execution. To achieve this, a snapshot of the
process variables associated with the scope execution (execution created
for executing the subprocess) is taken. Form this, a couple of
implications follow:

* The compensation handler does not have access to variables added to
concurrent executions created inside the subprocess scope.
* Process variables associated with executions higher up in the
hierarchy, (for instance process variables associated with the process
instance execution are not contained in the snapshot: the compensation
handler has access to these process variables in the state they are in
when compensation is thrown.
* A variable snapshot is only taken for embedded subprocesses, not for
other activities.

*Current limitations:*

* `waitForCompletion="false"` is currently unsupported. When
compensation is triggered using the intermediate throwing compensation
event, the event is only left, after compensation completed
successfully.
* Compensation itself is currently performed by concurrent executions.
The concurrent executions are started in reverse order in which the
compensated activities completed. Future versions of activity might
include an option to perform compensation sequentially.
* Compensation is not propagated to sub process instances spawned by
call activities.

[[bpmnIntermediateThrowCompensationEventGraphicalNotation]]
=== Graphical notation

An intermediate compensation throw event is visualized as a typical
intermediate event (Circle with smaller circle inside), with the
compensation icon inside. The compensation icon is black (filled), to
indicate the _throw_ semantics.

image:images/bpmn.intermediate.compensation.throw.event.png[bpmn.intermediate.compensation.throw.event]

[[bpmnIntermediateThrowSignalEventXml]]
=== Xml representation

A compensation intermediate event is defined as an
link:#bpmnIntermediateThrowEvent[intermediate throwing event]. The
specific type sub-element is in this case a *compensateEventDefinition*
element.

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<intermediateThrowEvent#
[.tok-na]#id=#[.tok-s]#"throwCompensation"#[.tok-nt]#>#
[.tok-nt]#<compensateEventDefinition# [.tok-nt]#/>#
[.tok-nt]#</intermediateThrowEvent>#

In addition, the optional argument `activityRef` can be used to trigger
compensation of a specific scope / activity:

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<intermediateThrowEvent#
[.tok-na]#id=#[.tok-s]#"throwCompensation"#[.tok-nt]#>#
[.tok-nt]#<compensateEventDefinition#
[.tok-na]#activityRef=#[.tok-s]#"bookHotel"# [.tok-nt]#/>#
[.tok-nt]#</intermediateThrowEvent>#

[[bpmnSequenceFlow]]
== 8.3. Sequence Flow

[[sequenceFlowDescription]]
=== 8.3.1. Description

A sequence flow is the connector between two elements of a process.
After an element is visited during process execution, all outgoing
sequence flow will be followed. This means that the default nature of
BPMN 2.0 is to be parallel: two outgoing sequence flow will create two
separate, parallel paths of execution.

[[sequenceFlowGraphicalNotation]]
=== 8.3.2. Graphical notation

A sequence flow is visualized as an arrow going from the source element
towards the target element. The arrow always points towards the target.

image:images/bpmn.sequence.flow.png[bpmn.sequence.flow]

[[sequenceFlowXml]]
=== 8.3.3. XML representation

Sequence flow need to have a process-unique *id*, and a reference to an
existing *source* and *target* element.

[source,pygments,highlight]
----
1
----

[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow1"#
[.tok-na]#sourceRef=#[.tok-s]#"theStart"#
[.tok-na]#targetRef=#[.tok-s]#"theTask"# [.tok-nt]#/>#

[[bpmnConditionalSequenceFlow]]
== 8.3.4. Conditional sequence flow

[[condSeqFlowDescription]]
=== Description

A sequence flow can have a condition defined on it. When a BPMN 2.0
activity is left, the default behavior is to evaluate the conditions on
the outgoing sequence flow. When a condition evaluates to _true_, that
outgoing sequence flow is selected. When multiple sequence flow are
selected that way, multiple _executions_ will be generated and the
process will be continued in a parallel way.

*Note:* the above holds for BPMN 2.0 activities (and events), but not
for gateways. Gateways will handle sequence flow with conditions in
specific ways, depending on the gateway type.

[[conditionalSequenceFlowGraphicalNotation]]
=== Graphical notation

A conditional sequence flow is visualized as a regular sequence flow,
with a small diamond at the beginning. The condition expression is shown
next to the sequence flow.

image:images/bpmn.conditional.sequence.flow.png[bpmn.conditional.sequence.flow]

[[conditionalSequenceFlowXml]]
=== XML representation

A conditional sequence flow is represented in XML as a regular sequence
flow, containing a *conditionExpression* sub-element. Note that for the
moment only _tFormalExpressions_ are supported, Omitting the
_xsi:type=""_ definition will simply default to this only supported type
of expressions.

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow"#
[.tok-na]#sourceRef=#[.tok-s]#"theStart"#
[.tok-na]#targetRef=#[.tok-s]#"theTask"#[.tok-nt]#>#
[.tok-nt]#<conditionExpression#
[.tok-na]#xsi:type=#[.tok-s]#"tFormalExpression"#[.tok-nt]#>#
[.tok-cp]#<![CDATA[$\{order.price > 100 && order.price < 250}]]>#
[.tok-nt]#</conditionExpression># [.tok-nt]#</sequenceFlow>#

Currently conditionalExpressions can *only be used with UEL*, detailed
info about these can be found in section
link:#apiExpressions[Expressions]. The expression used should resolve to
a boolean value, otherwise an exception is thrown while evaluating the
condition.

* The example below references data of a process variable, in the
typical JavaBean style through getters.

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<conditionExpression#
[.tok-na]#xsi:type=#[.tok-s]#"tFormalExpression"#[.tok-nt]#>#
[.tok-cp]#<![CDATA[$\{order.price > 100 && order.price < 250}]]>#
[.tok-nt]#</conditionExpression>#

* This example invokes a method that resolves to a boolean value.

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<conditionExpression#
[.tok-na]#xsi:type=#[.tok-s]#"tFormalExpression"#[.tok-nt]#>#
[.tok-cp]#<![CDATA[$\{order.isStandardOrder()}]]>#
[.tok-nt]#</conditionExpression>#

The Activiti distribution contains the following example process using
value and method expressions (see
_org.activiti.examples.bpmn.expression)_:

image:images/bpmn.uel-expression.on.seq.flow.png[bpmn.uel
expression.on.seq.flow]

[[bpmnDefaultSequenceFlow]]
== 8.3.5. Default sequence flow

[[bpmnDefaultSequenceFlowDescription]]
=== Description

All BPMN 2.0 tasks and gateways can have a *default sequence flow*. This
sequence flow is only selected as the outgoing sequence flow for that
activity if and only if none of the other sequence flow could be
selected. Conditions on a default sequence flow are always ignored.

[[bpmnDefaultSequenceFlowGraphicalNotation]]
=== Graphical notation

A default sequence flow is visualized as a regular sequence flow, with a
_slash_ marker at the beginning.

image:images/bpmn.default.sequence.flow.png[bpmn.default.sequence.flow]

[[bpmnDefaultSequenceFlowXmlRepresentation]]
=== XML representation

A default sequence flow for a certain activity is defined by the
*default attribute* on that activity. The following XML snippet shows
for example an exclusive gateway that has as default sequence flow _flow
2_. Only when _conditionA_ and _conditionB_ both evaluate to false, will
it be chosen as outgoing sequence flow for the gateway.

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
----

[.tok-nt]#<exclusiveGateway# [.tok-na]#id=#[.tok-s]#"exclusiveGw"#
[.tok-na]#name=#[.tok-s]#"Exclusive Gateway"#
[.tok-na]#default=#[.tok-s]#"flow2"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow1"#
[.tok-na]#sourceRef=#[.tok-s]#"exclusiveGw"#
[.tok-na]#targetRef=#[.tok-s]#"task1"#[.tok-nt]#>#
[.tok-nt]#<conditionExpression#
[.tok-na]#xsi:type=#[.tok-s]#"tFormalExpression"#[.tok-nt]##>##$\{conditionA}[.tok-nt]#</conditionExpression>#
[.tok-nt]#</sequenceFlow># [.tok-nt]#<sequenceFlow#
[.tok-na]#id=#[.tok-s]#"flow2"#
[.tok-na]#sourceRef=#[.tok-s]#"exclusiveGw"#
[.tok-na]#targetRef=#[.tok-s]#"task2"#[.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow3"#
[.tok-na]#sourceRef=#[.tok-s]#"exclusiveGw"#
[.tok-na]#targetRef=#[.tok-s]#"task3"#[.tok-nt]#>#
[.tok-nt]#<conditionExpression#
[.tok-na]#xsi:type=#[.tok-s]#"tFormalExpression"#[.tok-nt]##>##$\{conditionB}[.tok-nt]#</conditionExpression>#
[.tok-nt]#</sequenceFlow>#

Which corresponds with the following graphical representation:

[[bpmnGateways]]
== 8.4. Gateways

A gateway is used to control the flow of execution (or as the BPMN 2.0
describes, the _tokens_ of execution). A gateway is capable of
_consuming_ or _generating_ tokens.

A gateway is graphically visualized as a diamond shape, with an icon
inside. The icon shows the type of gateway.

image:images/bpmn.gateway.png[bpmn.gateway]

[[bpmnExclusiveGateway]]
=== 8.4.1. Exclusive Gateway

[[exclusiveGatewayDescription]]
==== Description

An exclusive gateway (also called the _XOR gateway_ or more technical
the _exclusive data-based gateway_), is used to model a *decision* in
the process. When the execution arrives at this gateway, all outgoing
sequence flow are evaluated in the order in which they are defined. The
sequence flow which condition evaluates to true (or which doesn’t have a
condition set, conceptually having a _'true'_ defined on the sequence
flow) is selected for continuing the process.

*Note that the semantics of outgoing sequence flow is different to that
of the general case in BPMN 2.0. While in general all sequence flow
which condition evaluates to true are selected to continue in a parallel
way, only one sequence flow is selected when using the exclusive
gateway. In case multiple sequence flow have a condition that evaluates
to true, the first one defined in the XML (and only that one!) is
selected for continuing the process. If no sequence flow can be
selected, an exception will be thrown.*

[[exclusiveGatewayGraphNotation]]
==== Graphical notation

An exclusive gateway is visualized as a typical gateway (i.e. a diamond
shape) with an _X_ icon inside, referring to the _XOR_ semantics. Note
that a gateway without an icon inside defaults to an exclusive gateway.
The BPMN 2.0 specification does not allow mixing the diamond with and
without an X in the same process definition.

image:images/bpmn.exclusive.gateway.notation.png[bpmn.exclusive.gateway.notation]

[[exclusiveGatewayXML]]
==== XML representation

The XML representation of an exclusive gateway is straight-forward: one
line defining the gateway and condition expressions defined on the
outgoing sequence flow. See the section on
link:#bpmnConditionalSequenceFlow[conditional sequence flow] to see
which options are available for such expressions.

Take for example the following model:

image:images/bpmn.exclusive.gateway.png[bpmn.exclusive.gateway]

Which is represented in XML as follows:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
----

[.tok-nt]#<exclusiveGateway# [.tok-na]#id=#[.tok-s]#"exclusiveGw"#
[.tok-na]#name=#[.tok-s]#"Exclusive Gateway"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow2"#
[.tok-na]#sourceRef=#[.tok-s]#"exclusiveGw"#
[.tok-na]#targetRef=#[.tok-s]#"theTask1"#[.tok-nt]#>#
[.tok-nt]#<conditionExpression#
[.tok-na]#xsi:type=#[.tok-s]#"tFormalExpression"#[.tok-nt]##>##$\{input
== 1}[.tok-nt]#</conditionExpression># [.tok-nt]#</sequenceFlow>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow3"#
[.tok-na]#sourceRef=#[.tok-s]#"exclusiveGw"#
[.tok-na]#targetRef=#[.tok-s]#"theTask2"#[.tok-nt]#>#
[.tok-nt]#<conditionExpression#
[.tok-na]#xsi:type=#[.tok-s]#"tFormalExpression"#[.tok-nt]##>##$\{input
== 2}[.tok-nt]#</conditionExpression># [.tok-nt]#</sequenceFlow>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow4"#
[.tok-na]#sourceRef=#[.tok-s]#"exclusiveGw"#
[.tok-na]#targetRef=#[.tok-s]#"theTask3"#[.tok-nt]#>#
[.tok-nt]#<conditionExpression#
[.tok-na]#xsi:type=#[.tok-s]#"tFormalExpression"#[.tok-nt]##>##$\{input
== 3}[.tok-nt]#</conditionExpression># [.tok-nt]#</sequenceFlow>#

[[bpmnParallelGateway]]
== 8.4.2. Parallel Gateway

[[bpmnParallelGatewayDescription]]
=== Description

Gateways can also be used to model concurrency in a process. The most
straightforward gateway to introduce concurrency in a process model, is
the *Parallel Gateway*, which allows to _fork_ into multiple paths of
execution or _join_ multiple incoming paths of execution.

The functionality of the parallel gateway is based on the incoming and
outgoing sequence flow:

* *fork:* all outgoing sequence flow are followed in parallel, creating
one concurrent execution for each sequence flow.
* *join:* all concurrent executions arriving at the parallel gateway
wait in the gateway until an execution has arrived for each of the
incoming sequence flow. Then the process continues past the joining
gateway.

Note that a parallel gateway can have *both fork and join behavior*, if
there are multiple incoming and outgoing sequence flow for the same
parallel gateway. In that case, the gateway will first join all incoming
sequence flow, before splitting into multiple concurrent paths of
executions.

*An important difference with other gateway types is that the parallel
gateway does not evaluate conditions. If conditions are defined on the
sequence flow connected with the parallel gateway, they are simply
neglected.*

[[bpmnParallelGatewayGraphicalNotation]]
=== Graphical Notation

A parallel gateway is visualized as a gateway (diamond shape) with the
_plus_ symbol inside, referring to the _AND_ semantics.

image:images/bpmn.parallel.gateway.png[bpmn.parallel.gateway]

[[bpmnParallelGatewayXML]]
=== XML representation

Defining a parallel gateway needs one line of XML:

[source,pygments,highlight]
----
1
----

[.tok-nt]#<parallelGateway# [.tok-na]#id=#[.tok-s]#"myParallelGateway"#
[.tok-nt]#/>#

The actual behavior (fork, join or both), is defined by the sequence
flow connected to the parallel gateway.

For example, the model above comes down to the following XML:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
----

[.tok-nt]#<startEvent# [.tok-na]#id=#[.tok-s]#"theStart"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow1"#
[.tok-na]#sourceRef=#[.tok-s]#"theStart"#
[.tok-na]#targetRef=#[.tok-s]#"fork"# [.tok-nt]#/>#
[.tok-nt]#<parallelGateway# [.tok-na]#id=#[.tok-s]#"fork"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#sourceRef=#[.tok-s]#"fork"#
[.tok-na]#targetRef=#[.tok-s]#"receivePayment"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#sourceRef=#[.tok-s]#"fork"#
[.tok-na]#targetRef=#[.tok-s]#"shipOrder"# [.tok-nt]#/>#
[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"receivePayment"#
[.tok-na]#name=#[.tok-s]#"Receive Payment"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#sourceRef=#[.tok-s]#"receivePayment"#
[.tok-na]#targetRef=#[.tok-s]#"join"# [.tok-nt]#/># [.tok-nt]#<userTask#
[.tok-na]#id=#[.tok-s]#"shipOrder"# [.tok-na]#name=#[.tok-s]#"Ship
Order"# [.tok-nt]#/># [.tok-nt]#<sequenceFlow#
[.tok-na]#sourceRef=#[.tok-s]#"shipOrder"#
[.tok-na]#targetRef=#[.tok-s]#"join"# [.tok-nt]#/>#
[.tok-nt]#<parallelGateway# [.tok-na]#id=#[.tok-s]#"join"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#sourceRef=#[.tok-s]#"join"#
[.tok-na]#targetRef=#[.tok-s]#"archiveOrder"# [.tok-nt]#/>#
[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"archiveOrder"#
[.tok-na]#name=#[.tok-s]#"Archive Order"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#sourceRef=#[.tok-s]#"archiveOrder"#
[.tok-na]#targetRef=#[.tok-s]#"theEnd"# [.tok-nt]#/>#
[.tok-nt]#<endEvent# [.tok-na]#id=#[.tok-s]#"theEnd"# [.tok-nt]#/>#

In the above example, after the process is started, two tasks will be
created:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
----

[.tok-n]#ProcessInstance# [.tok-n]#pi# [.tok-o]#=#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#startProcessInstanceByKey#[.tok-o]#(#[.tok-s]#"forkJoin"#[.tok-o]#);#
[.tok-n]#TaskQuery# [.tok-n]#query# [.tok-o]#=#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#createTaskQuery#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#processInstanceId#[.tok-o]#(#[.tok-n]#pi#[.tok-o]#.#[.tok-na]#getId#[.tok-o]#())#
[.tok-o]#.#[.tok-na]#orderByTaskName#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#asc#[.tok-o]#();#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#Task#[.tok-o]#># [.tok-n]#tasks#
[.tok-o]#=# [.tok-n]#query#[.tok-o]#.#[.tok-na]#list#[.tok-o]#();#
[.tok-n]#assertEquals#[.tok-o]#(#[.tok-mi]#2#[.tok-o]#,#
[.tok-n]#tasks#[.tok-o]#.#[.tok-na]#size#[.tok-o]#());# [.tok-n]#Task#
[.tok-n]#task1# [.tok-o]#=#
[.tok-n]#tasks#[.tok-o]#.#[.tok-na]#get#[.tok-o]#(#[.tok-mi]#0#[.tok-o]#);#
[.tok-n]#assertEquals#[.tok-o]#(#[.tok-s]#"Receive Payment"#[.tok-o]#,#
[.tok-n]#task1#[.tok-o]#.#[.tok-na]#getName#[.tok-o]#());#
[.tok-n]#Task# [.tok-n]#task2# [.tok-o]#=#
[.tok-n]#tasks#[.tok-o]#.#[.tok-na]#get#[.tok-o]#(#[.tok-mi]#1#[.tok-o]#);#
[.tok-n]#assertEquals#[.tok-o]#(#[.tok-s]#"Ship Order"#[.tok-o]#,#
[.tok-n]#task2#[.tok-o]#.#[.tok-na]#getName#[.tok-o]#());#

When these two tasks are completed, the second parallel gateway will
join the two executions and since there is only one outgoing sequence
flow, no concurrent paths of execution will be created, and only the
_Archive Order_ task will be active.

Note that a parallel gateway does not need to be _balanced_ (i.e. a
matching number of incoming/outgoing sequence flow for corresponding
parallel gateways). A parallel gateway will simply wait for all incoming
sequence flow and create a concurrent path of execution for each
outgoing sequence flow, not influenced by other constructs in the
process model. So, the following process is legal in BPMN 2.0:

image:images/bpmn.unbalanced.parallel.gateway.png[bpmn.unbalanced.parallel.gateway]

[[bpmnInclusiveGateway]]
== 8.4.3. Inclusive Gateway

[[bpmnInclusiveGatewayDescription]]
=== Description

The *Inclusive Gateway* can be seen as a combination of an exclusive and
a parallel gateway. Like an exclusive gateway you can define conditions
on outgoing sequence flows and the inclusive gateway will evaluate them.
But the main difference is that the inclusive gateway can take more than
one sequence flow, like the parallel gateway.

The functionality of the inclusive gateway is based on the incoming and
outgoing sequence flow:

* *fork:* all outgoing sequence flow conditions are evaluated and for
the sequence flow conditions that evaluate to true the flows are
followed in parallel, creating one concurrent execution for each
sequence flow.
* *join:* all concurrent executions arriving at the inclusive gateway
wait in the gateway until an execution has arrived for each of the
incoming sequence flows that have a process token. This is an important
difference with the parallel gateway. So in other words, the inclusive
gateway will only wait for the incoming sequence flows that will be
executed. After the join, the process continues past the joining
inclusive gateway.

Note that an inclusive gateway can have *both fork and join behavior*,
if there are multiple incoming and outgoing sequence flow for the same
inclusive gateway. In that case, the gateway will first join all
incoming sequence flows that have a process token, before splitting into
multiple concurrent paths of executions for the outgoing sequence flows
that have a condition that evaluates to true.

[[bpmnInclusiveGatewayGraphicalNotation]]
=== Graphical Notation

An inclusive gateway is visualized as a gateway (diamond shape) with the
_circle_ symbol inside.

image:images/bpmn.inclusive.gateway.png[bpmn.inclusive.gateway]

[[bpmnInclusiveGatewayXML]]
=== XML representation

Defining an inclusive gateway needs one line of XML:

[source,pygments,highlight]
----
1
----

[.tok-nt]#<inclusiveGateway#
[.tok-na]#id=#[.tok-s]#"myInclusiveGateway"# [.tok-nt]#/>#

The actual behavior (fork, join or both), is defined by the sequence
flows connected to the inclusive gateway.

For example, the model above comes down to the following XML:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
----

[.tok-nt]#<startEvent# [.tok-na]#id=#[.tok-s]#"theStart"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow1"#
[.tok-na]#sourceRef=#[.tok-s]#"theStart"#
[.tok-na]#targetRef=#[.tok-s]#"fork"# [.tok-nt]#/>#
[.tok-nt]#<inclusiveGateway# [.tok-na]#id=#[.tok-s]#"fork"#
[.tok-nt]#/># [.tok-nt]#<sequenceFlow#
[.tok-na]#sourceRef=#[.tok-s]#"fork"#
[.tok-na]#targetRef=#[.tok-s]#"receivePayment"# [.tok-nt]#>#
[.tok-nt]#<conditionExpression#
[.tok-na]#xsi:type=#[.tok-s]#"tFormalExpression"#[.tok-nt]##>##$\{paymentReceived
== false}[.tok-nt]#</conditionExpression># [.tok-nt]#</sequenceFlow>#
[.tok-nt]#<sequenceFlow# [.tok-na]#sourceRef=#[.tok-s]#"fork"#
[.tok-na]#targetRef=#[.tok-s]#"shipOrder"# [.tok-nt]#>#
[.tok-nt]#<conditionExpression#
[.tok-na]#xsi:type=#[.tok-s]#"tFormalExpression"#[.tok-nt]##>##$\{shipOrder
== true}[.tok-nt]#</conditionExpression># [.tok-nt]#</sequenceFlow>#
[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"receivePayment"#
[.tok-na]#name=#[.tok-s]#"Receive Payment"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#sourceRef=#[.tok-s]#"receivePayment"#
[.tok-na]#targetRef=#[.tok-s]#"join"# [.tok-nt]#/># [.tok-nt]#<userTask#
[.tok-na]#id=#[.tok-s]#"shipOrder"# [.tok-na]#name=#[.tok-s]#"Ship
Order"# [.tok-nt]#/># [.tok-nt]#<sequenceFlow#
[.tok-na]#sourceRef=#[.tok-s]#"shipOrder"#
[.tok-na]#targetRef=#[.tok-s]#"join"# [.tok-nt]#/>#
[.tok-nt]#<inclusiveGateway# [.tok-na]#id=#[.tok-s]#"join"#
[.tok-nt]#/># [.tok-nt]#<sequenceFlow#
[.tok-na]#sourceRef=#[.tok-s]#"join"#
[.tok-na]#targetRef=#[.tok-s]#"archiveOrder"# [.tok-nt]#/>#
[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"archiveOrder"#
[.tok-na]#name=#[.tok-s]#"Archive Order"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#sourceRef=#[.tok-s]#"archiveOrder"#
[.tok-na]#targetRef=#[.tok-s]#"theEnd"# [.tok-nt]#/>#
[.tok-nt]#<endEvent# [.tok-na]#id=#[.tok-s]#"theEnd"# [.tok-nt]#/>#

In the above example, after the process is started, two tasks will be
created if the process variables paymentReceived == false and shipOrder
== true. In case only one of these process variables equals to true only
one task will be created. If no condition evaluates to true and
exception is thrown. This can be prevented by specifying a default
outgoing sequence flow. In the following example one task will be
created, the ship order task:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
----

[.tok-n]#HashMap#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#># [.tok-n]#variableMap# [.tok-o]#=#
[.tok-k]#new# [.tok-n]#HashMap#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#>();#
[.tok-n]#variableMap#[.tok-o]#.#[.tok-na]#put#[.tok-o]#(#[.tok-s]#"receivedPayment"#[.tok-o]#,#
[.tok-kc]#true#[.tok-o]#);#
[.tok-n]#variableMap#[.tok-o]#.#[.tok-na]#put#[.tok-o]#(#[.tok-s]#"shipOrder"#[.tok-o]#,#
[.tok-kc]#true#[.tok-o]#);# [.tok-n]#ProcessInstance# [.tok-n]#pi#
[.tok-o]#=#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#startProcessInstanceByKey#[.tok-o]#(#[.tok-s]#"forkJoin"#[.tok-o]#);#
[.tok-n]#TaskQuery# [.tok-n]#query# [.tok-o]#=#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#createTaskQuery#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#processInstanceId#[.tok-o]#(#[.tok-n]#pi#[.tok-o]#.#[.tok-na]#getId#[.tok-o]#())#
[.tok-o]#.#[.tok-na]#orderByTaskName#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#asc#[.tok-o]#();#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#Task#[.tok-o]#># [.tok-n]#tasks#
[.tok-o]#=# [.tok-n]#query#[.tok-o]#.#[.tok-na]#list#[.tok-o]#();#
[.tok-n]#assertEquals#[.tok-o]#(#[.tok-mi]#1#[.tok-o]#,#
[.tok-n]#tasks#[.tok-o]#.#[.tok-na]#size#[.tok-o]#());# [.tok-n]#Task#
[.tok-n]#task# [.tok-o]#=#
[.tok-n]#tasks#[.tok-o]#.#[.tok-na]#get#[.tok-o]#(#[.tok-mi]#0#[.tok-o]#);#
[.tok-n]#assertEquals#[.tok-o]#(#[.tok-s]#"Ship Order"#[.tok-o]#,#
[.tok-n]#task#[.tok-o]#.#[.tok-na]#getName#[.tok-o]#());#

When this task is completed, the second inclusive gateway will join the
two executions and since there is only one outgoing sequence flow, no
concurrent paths of execution will be created, and only the _Archive
Order_ task will be active.

Note that an inclusive gateway does not need to be _balanced_ (i.e. a
matching number of incoming/outgoing sequence flow for corresponding
inclusive gateways). An inclusive gateway will simply wait for all
incoming sequence flow and create a concurrent path of execution for
each outgoing sequence flow, not influenced by other constructs in the
process model.

[[bpmnEventbasedGateway]]
== 8.4.4. Event-based Gateway

[[eventBasedGatewayDescription]]
=== Description

The Event-based Gateway allows to take a decision based on events. Each
outgoing sequence flow of the gateway needs to be connected to an
intermediate catching event. When process execution reaches an
Event-based Gateway, the gateway acts like a wait state: execution is
suspended. In addition, for each outgoing sequence flow, an event
subscription is created.

Note the sequence flows running out of an Event-based Gateway are
different from ordinary sequence flows. These sequence flows are never
actually "executed". On the contrary, they allow the process engine to
determine which events an execution arriving at an Event-based Gateway
needs to subscribe to. The following restrictions apply:

* An Event-based Gateway must have two or more outgoing sequence flows.
* An Event-based Gateway must only be connected to elements of type
`intermediateCatchEvent` only. (Receive Tasks after an Event-based
Gateway are not supported by Activiti.)
* An `intermediateCatchEvent` connected to an Event-based Gateway must
have a single incoming sequence flow.

[[eventBasedGatewayGraphNotation]]
=== Graphical notation

An Event-based Gateway is visualized as a diamond shape like other BPMN
gateways with a special icon inside.

image:images/bpmn.event.based.gateway.notation.png[bpmn.event.based.gateway.notation]

[[eventBasedGatewayXML]]
=== XML representation

The XML element used to define an Event-based Gateway is
`eventBasedGateway`.

[[eventBasedGatewayExample]]
=== Example(s)

The following process is an example of a process with an Event-based
Gateway. When the execution arrives at the Event-based Gateway, process
execution is suspended. In addition, the process instance subscribes to
the alert signal event and created a timer which fires after 10 minutes.
This effectively causes the process engine to wait for ten minutes for a
signal event. If the signal occurs within 10 minutes, the timer is
cancelled and execution continues after the signal. If the signal is not
fired, execution continues after the timer and the signal subscription
is cancelled.

image:images/bpmn.event.based.gateway.example.png[bpmn.event.based.gateway.example]

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
----

[.tok-nt]#<definitions# [.tok-na]#id=#[.tok-s]#"definitions"#
[.tok-na]#xmlns=#[.tok-s]#"http://www.omg.org/spec/BPMN/20100524/MODEL"#
[.tok-na]#xmlns:activiti=#[.tok-s]#"http://activiti.org/bpmn"#
[.tok-na]#targetNamespace=#[.tok-s]#"Examples"#[.tok-nt]#>#
[.tok-nt]#<signal# [.tok-na]#id=#[.tok-s]#"alertSignal"#
[.tok-na]#name=#[.tok-s]#"alert"# [.tok-nt]#/># [.tok-nt]#<process#
[.tok-na]#id=#[.tok-s]#"catchSignal"#[.tok-nt]#># [.tok-nt]#<startEvent#
[.tok-na]#id=#[.tok-s]#"start"# [.tok-nt]#/># [.tok-nt]#<sequenceFlow#
[.tok-na]#sourceRef=#[.tok-s]#"start"#
[.tok-na]#targetRef=#[.tok-s]#"gw1"# [.tok-nt]#/>#
[.tok-nt]#<eventBasedGateway# [.tok-na]#id=#[.tok-s]#"gw1"#
[.tok-nt]#/># [.tok-nt]#<sequenceFlow#
[.tok-na]#sourceRef=#[.tok-s]#"gw1"#
[.tok-na]#targetRef=#[.tok-s]#"signalEvent"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#sourceRef=#[.tok-s]#"gw1"#
[.tok-na]#targetRef=#[.tok-s]#"timerEvent"# [.tok-nt]#/>#
[.tok-nt]#<intermediateCatchEvent# [.tok-na]#id=#[.tok-s]#"signalEvent"#
[.tok-na]#name=#[.tok-s]#"Alert"#[.tok-nt]#>#
[.tok-nt]#<signalEventDefinition#
[.tok-na]#signalRef=#[.tok-s]#"alertSignal"# [.tok-nt]#/>#
[.tok-nt]#</intermediateCatchEvent># [.tok-nt]#<intermediateCatchEvent#
[.tok-na]#id=#[.tok-s]#"timerEvent"#
[.tok-na]#name=#[.tok-s]#"Alert"#[.tok-nt]#>#
[.tok-nt]#<timerEventDefinition>#
[.tok-nt]##<timeDuration>##PT10M[.tok-nt]##</timeDuration>##
[.tok-nt]#</timerEventDefinition># [.tok-nt]#</intermediateCatchEvent>#
[.tok-nt]#<sequenceFlow# [.tok-na]#sourceRef=#[.tok-s]#"timerEvent"#
[.tok-na]#targetRef=#[.tok-s]#"exGw1"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#sourceRef=#[.tok-s]#"signalEvent"#
[.tok-na]#targetRef=#[.tok-s]#"task"# [.tok-nt]#/># [.tok-nt]#<userTask#
[.tok-na]#id=#[.tok-s]#"task"# [.tok-na]#name=#[.tok-s]#"Handle
alert"#[.tok-nt]#/># [.tok-nt]#<exclusiveGateway#
[.tok-na]#id=#[.tok-s]#"exGw1"# [.tok-nt]#/># [.tok-nt]#<sequenceFlow#
[.tok-na]#sourceRef=#[.tok-s]#"task"#
[.tok-na]#targetRef=#[.tok-s]#"exGw1"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#sourceRef=#[.tok-s]#"exGw1"#
[.tok-na]#targetRef=#[.tok-s]#"end"# [.tok-nt]#/># [.tok-nt]#<endEvent#
[.tok-na]#id=#[.tok-s]#"end"# [.tok-nt]#/># [.tok-nt]#</process>#
[.tok-nt]#</definitions>#

[[bpmnTask]]
== 8.5. Tasks

[[bpmnUserTask]]
=== 8.5.1. User Task

[[bpmnUserTaskDescription]]
==== Description

A _user task_ is used to model work that needs to be done by a human
actor. When the process execution arrives at such a user task, a new
task is created in the task list of the user(s) or group(s) assigned to
that task.

[[bpmnUserTaskGraphicalNotation]]
==== Graphical notation

A user task is visualized as a typical task (rounded rectangle), with a
small user icon in the left upper corner.

image:images/bpmn.user.task.png[bpmn.user.task]

[[bpmnUserTaskXml]]
==== XML representation

A user task is defined in XML as follows. The _id_ attribute is
required, the _name_ attribute is optional.

[source,pygments,highlight]
----
1
----

[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"theTask"#
[.tok-na]#name=#[.tok-s]#"Important task"# [.tok-nt]#/>#

A user task can have also a description. In fact any BPMN 2.0 element
can have a description. A description is defined by adding the
*documentation* element.

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"theTask"#
[.tok-na]#name=#[.tok-s]#"Schedule meeting"# [.tok-nt]#>#
[.tok-nt]#<documentation># Schedule an engineering meeting for next week
with the new hire. [.tok-nt]#</documentation>#

The description text can be retrieved from the task in the standard Java
way:

[source,pygments,highlight]
----
1
----

[.tok-n]#task#[.tok-o]#.#[.tok-na]#getDescription#[.tok-o]#()#

[[bpmnUserTaskDueDate]]
== Due Date

Each task has a field, indicating the due date of that task. The Query
API can be used to query for tasks that are due on, before or after a
certain date.

There is an activity extension which allows you to specify an expression
in your task-definition to set the initial due date of a task when it is
created. The expression *should always resolve to a `java.util.Date`,
`java.util.String (ISO8601 formatted)`, ISO8601 time-duration (e.g.
PT50M) or `null`*. For example, you could use a date that was entered in
a previous form in the process or calculated in a previous Service Task.
In case a time-duration is used, the due-date is calculated based on the
current time, incremented by the given period. For example, when "PT30M"
is used as dueDate, the task is due in thirty minutes from now.

[source,pygments,highlight]
----
1
----

[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"theTask"#
[.tok-na]#name=#[.tok-s]#"Important task"#
[.tok-na]#activiti:dueDate=#[.tok-s]#"$\{dateVariable}"#[.tok-nt]#/>#

The due date of a task can also be altered using the `TaskService` or in
`TaskListener`s using the passed `DelegateTask`.

[[bpmnUserTaskAssignment]]
== User assignment

A user task can be directly assigned to a user. This is done by defining
a *humanPerformer* sub element. Such a _humanPerformer_ definition needs
a *resourceAssignmentExpression* that actually defines the user.
Currently, only *formalExpressions* are supported.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
----

[.tok-nt]#<process# [.tok-nt]#># ... [.tok-nt]#<userTask#
[.tok-na]#id=#[.tok-s]#'theTask'# [.tok-na]#name=#[.tok-s]#'important
task'# [.tok-nt]#># [.tok-nt]#<humanPerformer>#
[.tok-nt]#<resourceAssignmentExpression>#
[.tok-nt]##<formalExpression>##kermit[.tok-nt]##</formalExpression>##
[.tok-nt]#</resourceAssignmentExpression># [.tok-nt]#</humanPerformer>#
[.tok-nt]#</userTask>#

*Only one* user can be assigned as human performer to the task. In
Activiti terminology, this user is called the *assignee*. Tasks that
have an assignee are not visible in the task lists of other people and
can be found in the so-called *personal task list* of the assignee
instead.

Tasks directly assigned to users can be retrieved through the
TaskService as follows:

[source,pygments,highlight]
----
1
----

[.tok-n]#List#[.tok-o]#<#[.tok-n]#Task#[.tok-o]#># [.tok-n]#tasks#
[.tok-o]#=#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#createTaskQuery#[.tok-o]#().#[.tok-na]#taskAssignee#[.tok-o]#(#[.tok-s]#"kermit"#[.tok-o]#).#[.tok-na]#list#[.tok-o]#();#

Tasks can also be put in the so-called *candidate task list* of people.
In that case, the *potentialOwner* construct must be used. The usage is
similar to the _humanPerformer_ construct. Do note that it is required
to define for each element in the formal expression to specify if it is
a user or a group (the engine cannot guess this).

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
----

[.tok-nt]#<process# [.tok-nt]#># ... [.tok-nt]#<userTask#
[.tok-na]#id=#[.tok-s]#'theTask'# [.tok-na]#name=#[.tok-s]#'important
task'# [.tok-nt]#># [.tok-nt]#<potentialOwner>#
[.tok-nt]#<resourceAssignmentExpression>#
[.tok-nt]##<formalExpression>##user(kermit),
group(management)[.tok-nt]#</formalExpression>#
[.tok-nt]#</resourceAssignmentExpression># [.tok-nt]#</potentialOwner>#
[.tok-nt]#</userTask>#

Tasks defines with the _potential owner_ construct, can be retrieved as
follows (or a similar _TaskQuery_ usage as for the tasks with an
assignee):

[source,pygments,highlight]
----
1
----

[.tok-n]#List#[.tok-o]#<#[.tok-n]#Task#[.tok-o]#># [.tok-n]#tasks#
[.tok-o]#=#
[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#createTaskQuery#[.tok-o]#().#[.tok-na]#taskCandidateUser#[.tok-o]#(#[.tok-s]#"kermit"#[.tok-o]#);#

This will retrieve all tasks where kermit is a *candidate user*, i.e.
the formal expression contains _user(kermit)_. This will also retrieve
all tasks that are *assigned to a group where kermit is a member of*
(e.g. _group(management)_, if kermit is a member of that group and the
Activiti identity component is used). The groups of a user are resolved
at runtime and these can be managed through the
link:#apiEngine[IdentityService].

If no specifics are given whether the given text string is a user or
group, the engine defaults to group. So the following would be the same
as when _group(accountancy) was declared_.

[source,pygments,highlight]
----
1
----

[.tok-nt]##<formalExpression>##accountancy[.tok-nt]##</formalExpression>##

[[bpmnUserTaskUserAssignmentExtension]]
== Activiti extensions for task assignment

It is clear that user and group assignments are quite cumbersome for use
cases where the assignment is not complex. To avoid these complexities,
link:#bpmnCustomExtensions[custom extensions] on the user task are
possible.

* *assignee attribute*: this custom extension allows to directly assign
a user task to a given user.

[source,pygments,highlight]
----
1
----

[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"theTask"#
[.tok-na]#name=#[.tok-s]#"my task"#
[.tok-na]#activiti:assignee=#[.tok-s]#"kermit"# [.tok-nt]#/>#

This is exactly the same as using a *humanPerformer* construct as
defined link:#bpmnUserTaskAssignment[above].

* *candidateUsers attribute*: this custom extension allows to make a
user a candidate for a task.

[source,pygments,highlight]
----
1
----

[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"theTask"#
[.tok-na]#name=#[.tok-s]#"my task"#
[.tok-na]#activiti:candidateUsers=#[.tok-s]#"kermit, gonzo"#
[.tok-nt]#/>#

This is exactly the same as using a *potentialOwner* construct as
defined link:#bpmnUserTaskAssignment[above]. Note that it is not
required to use the _user(kermit)_ declaration as is the case with the
_potential owner_ construct, since the attribute can only be used for
users.

* *candidateGroups attribute*: this custom extension allows to make a
group a candidate for a task.

[source,pygments,highlight]
----
1
----

[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"theTask"#
[.tok-na]#name=#[.tok-s]#"my task"#
[.tok-na]#activiti:candidateGroups=#[.tok-s]#"management, accountancy"#
[.tok-nt]#/>#

This is exactly the same as using a *potentialOwner* construct as
defined link:#bpmnUserTaskAssignment[above]. Note that it is not
required to use the _group(management)_ declaration as is the case with
the _potential owner_ construct, since the attribute can only be used
for groups.

* _candidateUsers_ and _candidateGroups_ can both be defined on the same
user task.

Note: Although Activiti provides an identity management component, which
is exposed through the link:#apiEngine[IdentityService], no check is
done whether a provided user is known by the identity component. This
allows Activiti to integrate with existing identity management solutions
when it is embedded into an application.

[[bpmnUserTaskUserCustomIdentityLinkAssignmentExtension]]
== Custom identity link types (Experimental)

link:#experimental[[EXPERIMENTAL]]

The BPMN standard supports a single assigned user or *humanPerformer* or
a set of users that form a potential pool of *potentialOwners* as
defined in link:#bpmnUserTaskAssignment[User assignment]. In addition,
Activiti defines link:#bpmnUserTaskUserAssignmentExtension[extension
attribute elements] for the User Task that can represent the task
*assignee* or *candidate owner*.

The supported Activiti identity link types are:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
----

[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#IdentityLinkType#
[.tok-o]#\{# [.tok-cm]#/* Activiti native roles */# [.tok-kd]#public#
[.tok-kd]#static# [.tok-kd]#final# [.tok-n]#String# [.tok-n]#ASSIGNEE#
[.tok-o]#=# [.tok-s]#"assignee"#[.tok-o]#;# [.tok-kd]#public#
[.tok-kd]#static# [.tok-kd]#final# [.tok-n]#String# [.tok-n]#CANDIDATE#
[.tok-o]#=# [.tok-s]#"candidate"#[.tok-o]#;# [.tok-kd]#public#
[.tok-kd]#static# [.tok-kd]#final# [.tok-n]#String# [.tok-n]#OWNER#
[.tok-o]#=# [.tok-s]#"owner"#[.tok-o]#;# [.tok-kd]#public#
[.tok-kd]#static# [.tok-kd]#final# [.tok-n]#String# [.tok-n]#STARTER#
[.tok-o]#=# [.tok-s]#"starter"#[.tok-o]#;# [.tok-kd]#public#
[.tok-kd]#static# [.tok-kd]#final# [.tok-n]#String#
[.tok-n]#PARTICIPANT# [.tok-o]#=# [.tok-s]#"participant"#[.tok-o]#;#
[.tok-o]#}#

The BPMN standard and Activiti example authorization identities are
*user* and *group*. As mentioned in the previous section, the Activiti
identity management implementation is not intended for production use,
but should be extended depending upon the supported authorization
scheme.

If additional link types are required, custom resources can be defined
as extension elements with the following syntax:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"theTask"#
[.tok-na]#name=#[.tok-s]#"make profit"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:customResource#
[.tok-na]#activiti:name=#[.tok-s]#"businessAdministrator"#[.tok-nt]#>#
[.tok-nt]#<resourceAssignmentExpression>#
[.tok-nt]##<formalExpression>##user(kermit),
group(management)[.tok-nt]#</formalExpression>#
[.tok-nt]#</resourceAssignmentExpression>#
[.tok-nt]#</activiti:customResource># [.tok-nt]#</extensionElements>#
[.tok-nt]#</userTask>#

The custom link expressions are added to the _TaskDefinition_ class:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
----

[.tok-kd]#protected# [.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Set#[.tok-o]#<#[.tok-n]#Expression#[.tok-o]#>>#
[.tok-n]#customUserIdentityLinkExpressions# [.tok-o]#=# [.tok-k]#new#
[.tok-n]#HashMap#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Set#[.tok-o]#<#[.tok-n]#Expression#[.tok-o]#>>();#
[.tok-kd]#protected# [.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Set#[.tok-o]#<#[.tok-n]#Expression#[.tok-o]#>>#
[.tok-n]#customGroupIdentityLinkExpressions# [.tok-o]#=# [.tok-k]#new#
[.tok-n]#HashMap#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Set#[.tok-o]#<#[.tok-n]#Expression#[.tok-o]#>>();#
[.tok-kd]#public# [.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Set#[.tok-o]#<#[.tok-n]#Expression#[.tok-o]#>>#
[.tok-nf]#getCustomUserIdentityLinkExpressions#[.tok-o]#()# [.tok-o]#\{#
[.tok-k]#return# [.tok-n]#customUserIdentityLinkExpressions#[.tok-o]#;#
[.tok-o]#}# [.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#addCustomUserIdentityLinkExpression#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#identityLinkType#[.tok-o]#,#
[.tok-n]#Set#[.tok-o]#<#[.tok-n]#Expression#[.tok-o]#>#
[.tok-n]#idList#[.tok-o]#)#
[.tok-n]#customUserIdentityLinkExpressions#[.tok-o]#.#[.tok-na]#put#[.tok-o]#(#[.tok-n]#identityLinkType#[.tok-o]#,#
[.tok-n]#idList#[.tok-o]#);# [.tok-o]#}# [.tok-kd]#public#
[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Set#[.tok-o]#<#[.tok-n]#Expression#[.tok-o]#>>#
[.tok-nf]#getCustomGroupIdentityLinkExpressions#[.tok-o]#()#
[.tok-o]#\{# [.tok-k]#return#
[.tok-n]#customGroupIdentityLinkExpressions#[.tok-o]#;# [.tok-o]#}#
[.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#addCustomGroupIdentityLinkExpression#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#identityLinkType#[.tok-o]#,#
[.tok-n]#Set#[.tok-o]#<#[.tok-n]#Expression#[.tok-o]#>#
[.tok-n]#idList#[.tok-o]#)# [.tok-o]#\{#
[.tok-n]#customGroupIdentityLinkExpressions#[.tok-o]#.#[.tok-na]#put#[.tok-o]#(#[.tok-n]#identityLinkType#[.tok-o]#,#
[.tok-n]#idList#[.tok-o]#);# [.tok-o]#}#

which are populated at runtime by the _UserTaskActivityBehavior
handleAssignments_ method.

Finally, the _IdentityLinkType_ class must be extended to support the
custom identity link types:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-kn]#package# [.tok-nn]#com.yourco.engine.task#[.tok-o]#;#
[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#IdentityLinkType#
[.tok-kd]#extends#
[.tok-n]#org#[.tok-o]#.#[.tok-na]#activiti#[.tok-o]#.#[.tok-na]#engine#[.tok-o]#.#[.tok-na]#task#[.tok-o]#.#[.tok-na]#IdentityLinkType#
[.tok-o]#\{# [.tok-kd]#public# [.tok-kd]#static# [.tok-kd]#final#
[.tok-n]#String# [.tok-n]#ADMINISTRATOR# [.tok-o]#=#
[.tok-s]#"administrator"#[.tok-o]#;# [.tok-kd]#public# [.tok-kd]#static#
[.tok-kd]#final# [.tok-n]#String# [.tok-n]#EXCLUDED_OWNER# [.tok-o]#=#
[.tok-s]#"excludedOwner"#[.tok-o]#;# [.tok-o]#}#

[[bpmnUserTaskUserCustomAssignmentTaskListeners]]
== Custom Assignment via task listeners

In case the previous approaches are not sufficient, it is possible to
delegate to custom assignment logic using a link:#taskListeners[task
listener] on the create event:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"task1"#
[.tok-na]#name=#[.tok-s]#"My task"# [.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:taskListener#
[.tok-na]#event=#[.tok-s]#"create"#
[.tok-na]#class=#[.tok-s]#"org.activiti.MyAssignmentHandler"#
[.tok-nt]#/># [.tok-nt]#</extensionElements># [.tok-nt]#</userTask>#

The `DelegateTask` that is passed to the `TaskListener` implementation,
allows to set the assignee and candidate-users/groups:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
----

[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#MyAssignmentHandler#
[.tok-kd]#implements# [.tok-n]#TaskListener# [.tok-o]#\{#
[.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#notify#[.tok-o]#(#[.tok-n]#DelegateTask#
[.tok-n]#delegateTask#[.tok-o]#)# [.tok-o]#\{# [.tok-c1]#// Execute
custom identity lookups here# [.tok-c1]#// and then for example call
following methods:#
[.tok-n]#delegateTask#[.tok-o]#.#[.tok-na]#setAssignee#[.tok-o]#(#[.tok-s]#"kermit"#[.tok-o]#);#
[.tok-n]#delegateTask#[.tok-o]#.#[.tok-na]#addCandidateUser#[.tok-o]#(#[.tok-s]#"fozzie"#[.tok-o]#);#
[.tok-n]#delegateTask#[.tok-o]#.#[.tok-na]#addCandidateGroup#[.tok-o]#(#[.tok-s]#"management"#[.tok-o]#);#
[.tok-o]#...# [.tok-o]#}# [.tok-o]#}#

When using Spring it is possible to use the custom assignment attributes
as described in the section above, and delegate to a Spring bean using a
link:#taskListeners[task listener] with an
link:#springExpressions[expression] that listens to task _create_
events. In the following example, the assignee will be set by calling
the `findManagerOfEmployee` on the `ldapService` Spring bean. The _emp_
parameter that is passed, is a process variable>.

[source,pygments,highlight]
----
1
----

[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"task"#
[.tok-na]#name=#[.tok-s]#"My Task"#
[.tok-na]#activiti:assignee=#[.tok-s]#"$\{ldapService.findManagerForEmployee(emp)}"#[.tok-nt]#/>#

This also works similar for candidate users and groups:

[source,pygments,highlight]
----
1
----

[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"task"#
[.tok-na]#name=#[.tok-s]#"My Task"#
[.tok-na]#activiti:candidateUsers=#[.tok-s]#"$\{ldapService.findAllSales()}"#[.tok-nt]#/>#

Note that this will only work if the return type of the invoked methods
is `String` or `Collection<String>` (for candidate users and groups):

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
----

[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#FakeLdapService#
[.tok-o]#\{# [.tok-kd]#public# [.tok-n]#String#
[.tok-nf]#findManagerForEmployee#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#employee#[.tok-o]#)# [.tok-o]#\{# [.tok-k]#return#
[.tok-s]#"Kermit The Frog"#[.tok-o]#;# [.tok-o]#}# [.tok-kd]#public#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#String#[.tok-o]#>#
[.tok-nf]#findAllSales#[.tok-o]#()# [.tok-o]#\{# [.tok-k]#return#
[.tok-n]#Arrays#[.tok-o]#.#[.tok-na]#asList#[.tok-o]#(#[.tok-s]#"kermit"#[.tok-o]#,#
[.tok-s]#"gonzo"#[.tok-o]#,# [.tok-s]#"fozzie"#[.tok-o]#);# [.tok-o]#}#
[.tok-o]#}#

[[bpmnScriptTask]]
== 8.5.2. Script Task

[[bpmnScriptTaskDescription]]
=== Description

A script task is an automatic activity. When a process execution arrives
at the script task, the corresponding script is executed.

[[bpmnScriptTaskGraphicalNotation]]
=== Graphical Notation

A script task is visualized as a typical BPMN 2.0 task (rounded
rectangle), with a small _script_ icon in the top-left corner of the
rectangle.

image:images/bpmn.scripttask.png[bpmn.scripttask]

[[bpmnScriptTaskXml]]
=== XML representation

A script task is defined by specifying the *script* and the
*scriptFormat*.

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
----

[.tok-nt]#<scriptTask# [.tok-na]#id=#[.tok-s]#"theScriptTask"#
[.tok-na]#name=#[.tok-s]#"Execute script"#
[.tok-na]#scriptFormat=#[.tok-s]#"groovy"#[.tok-nt]#>#
[.tok-nt]#<script># sum = 0 for ( i in inputArray ) \{ sum += i }
[.tok-nt]#</script># [.tok-nt]#</scriptTask>#

The value of the *scriptFormat* attribute must be a name that is
compatible with the http://jcp.org/en/jsr/detail?id=223[JSR-223]
(scripting for the Java platform). By default JavaScript is included in
every JDK and as such doesn’t need any additional jars. If you want to
use another (JSR-223 compatible) scripting engine, it is sufficient to
add the corresponding jar to the classpath and use the appropriate name.
For example, the Activiti unit tests often use Groovy because the syntax
is pretty similar to that of Java.

Do note that the Groovy scripting engine is bundled with the groovy-all
jar. Before version 2.0, the scripting engine was part of the regular
Groovy jar. As such, one must now add following dependency:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<dependency>#
[.tok-nt]##<groupId>##org.codehaus.groovy[.tok-nt]##</groupId>##
[.tok-nt]##<artifactId>##groovy-all[.tok-nt]##</artifactId>##
[.tok-nt]##<version>##2.x.x[.tok-nt]##<version>##
[.tok-nt]#</dependency>#

[[bpmnScriptTaskVariables]]
== Variables in scripts

All process variables that are accessible through the execution that
arrives in the script task, can be used within the script. In the
example, the script variable _'inputArray'_ is in fact a process
variable (an array of integers).

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-nt]#<script># sum = 0 for ( i in inputArray ) \{ sum += i }
[.tok-nt]#</script>#

It’s also possible to set process variables in a script, simply by
calling _execution.setVariable("variableName", variableValue)_. By
default, no variables are stored automatically (*Note: before Activiti
5.12 this was the case!*). It is possible to automatically store any
variable defined in the script (e.g. _sum_ in the example above) by
setting the property `autoStoreVariables` on the `scriptTask` to `true`.
However, *the best practice is not to do this and use an explicit
execution.setVariable() call*, as on some recent versions of the JDK
auto storing of variables does not work for some scripting languages.
See
http://www.jorambarrez.be/blog/2013/03/25/bug-on-jdk-1-7-0_17-when-using-scripttask-in-activiti/[this
link] for more details.

[source,pygments,highlight]
----
1
----

[.tok-nt]#<scriptTask# [.tok-na]#id=#[.tok-s]#"script"#
[.tok-na]#scriptFormat=#[.tok-s]#"JavaScript"#
[.tok-na]#activiti:autoStoreVariables=#[.tok-s]#"false"#[.tok-nt]#>#

The default of this parameter is `false`, meaning that if the parameter
is omitted from the script task definition, all the declared variables
will only exist during the duration of the script.

Example on how to set a variable in a script:

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-nt]#<script># def scriptVar = "test123"
execution.setVariable("myVar", scriptVar) [.tok-nt]#</script>#

Note: the following names are reserved and *cannot be used* as variable
names: *out, out:print, lang:import, context, elcontext*.

[[bpmnScriptTaskResultValue]]
== Script results

The return value of a script task can be assigned to an already existing
or to a new process variable by specifying the process variable name as
a literal value for the _'activiti:resultVariable'_ attribute of a
script task definition. Any existing value for a specific process
variable will be overwritten by the result value of the script
execution. When not specifying a result variable name, the script result
value gets ignored.

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<scriptTask# [.tok-na]#id=#[.tok-s]#"theScriptTask"#
[.tok-na]#name=#[.tok-s]#"Execute script"#
[.tok-na]#scriptFormat=#[.tok-s]#"juel"#
[.tok-na]#activiti:resultVariable=#[.tok-s]#"myVar"#[.tok-nt]#>#
[.tok-nt]#<script>##\{echo}[.tok-nt]#</script># [.tok-nt]#</scriptTask>#

In the above example, the result of the script execution (the value of
the resolved expression _'#\{echo}'_) is set to the process variable
named _'myVar'_ after the script completes.

[[_security]]
== Security

It is also possible when using _javascript_ as scripting language to use
__secure scripting__. See the link:#advancedSecureScripting[secure
scripting section].

[[bpmnJavaServiceTask]]
== 8.5.3. Java Service Task

[[bpmnJavaServiceTaskDescription]]
=== Description

A Java service task is used to invoke an external Java class.

[[bpmnJavaServiceTaskGraphicalNotation]]
=== Graphical Notation

A service task is visualized as a rounded rectangle with a small gear
icon in the top-left corner.

image:images/bpmn.java.service.task.png[bpmn.java.service.task]

[[bpmnJavaServiceTaskXML]]
=== XML representation

There are 4 ways of declaring how to invoke Java logic:

* Specifying a class that implements JavaDelegate or ActivityBehavior
* Evaluating an expression that resolves to a delegation object
* Invoking a method expression
* Evaluating a value expression

To specify a class that is called during process execution, the fully
qualified classname needs to be provided by the *_activiti:class_*
attribute.

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"javaService"#
[.tok-na]#name=#[.tok-s]#"My Java Service Task"#
[.tok-na]#activiti:class=#[.tok-s]#"org.activiti.MyJavaDelegate"#
[.tok-nt]#/>#

See link:#bpmnJavaServiceTaskImplementation[the implementation section]
for more details on how to use such a class.

It is also possible to use an expression that resolves to an object.
This object must follow the same rules as objects that are created when
the `activiti:class` attribute is used (see
link:#bpmnJavaServiceTaskImplementation[further]).

[source,pygments,highlight]
----
1
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"serviceTask"#
[.tok-na]#activiti:delegateExpression=#[.tok-s]#"$\{delegateExpressionBean}"#
[.tok-nt]#/>#

Here, the `delegateExpressionBean` is a bean that implements the
`JavaDelegate` interface, defined in for example the Spring container.

To specify a UEL method expression that should be evaluated, use
attribute *activiti:expression*.

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"javaService"#
[.tok-na]#name=#[.tok-s]#"My Java Service Task"#
[.tok-na]#activiti:expression=#[.tok-s]#"#\{printer.printMessage()}"#
[.tok-nt]#/>#

Method `printMessage` (without parameters) will be called on the named
object called `printer`.

It’s also possible to pass parameters with an method used in the
expression.

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"javaService"#
[.tok-na]#name=#[.tok-s]#"My Java Service Task"#
[.tok-na]#activiti:expression=#[.tok-s]#"#\{printer.printMessage(execution,
myVar)}"# [.tok-nt]#/>#

Method `printMessage` will be called on the object named `printer`. The
first parameter passed is the `DelegateExecution`, which is available in
the expression context by default available as `execution`. The second
parameter passed, is the value of the variable with name `myVar` in the
current execution.

To specify a UEL value expression that should be evaluated, use
attribute *activiti:expression*.

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"javaService"#
[.tok-na]#name=#[.tok-s]#"My Java Service Task"#
[.tok-na]#activiti:expression=#[.tok-s]#"#\{split.ready}"# [.tok-nt]#/>#

The getter method of property `ready`, `getReady` (without parameters),
will be called on the named bean called `split`. The named objects are
resolved in the execution’s process variables and (if applicable) in the
Spring context.

[[bpmnJavaServiceTaskImplementation]]
== Implementation

To implement a class that can be called during process execution, this
class needs to implement the _org.activiti.engine.delegate.JavaDelegate_
interface and provide the required logic in the _execute_ method. When
process execution arrives at this particular step, it will execute this
logic defined in that method and leave the activity in the default BPMN
2.0 way.

Let’s create for example a Java class that can be used to change a
process variable String to uppercase. This class needs to implement the
_org.activiti.engine.delegate.JavaDelegate_ interface, which requires us
to implement the _execute(DelegateExecution)_ method. It’s this
operation that will be called by the engine and which needs to contain
the business logic. Process instance information such as process
variables and other can be accessed and manipulated through the
http://activiti.org/javadocs/org/activiti/engine/delegate/DelegateExecution.html[DelegateExecution]
interface (click on the link for a detailed Javadoc of its operations).

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#ToUppercase#
[.tok-kd]#implements# [.tok-n]#JavaDelegate# [.tok-o]#\{#
[.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#execute#[.tok-o]#(#[.tok-n]#DelegateExecution#
[.tok-n]#execution#[.tok-o]#)# [.tok-kd]#throws# [.tok-n]#Exception#
[.tok-o]#\{# [.tok-n]#String# [.tok-n]#var# [.tok-o]#=#
[.tok-o]#(#[.tok-n]#String#[.tok-o]#)#
[.tok-n]#execution#[.tok-o]#.#[.tok-na]#getVariable#[.tok-o]#(#[.tok-s]#"input"#[.tok-o]#);#
[.tok-n]#var# [.tok-o]#=#
[.tok-n]#var#[.tok-o]#.#[.tok-na]#toUpperCase#[.tok-o]#();#
[.tok-n]#execution#[.tok-o]#.#[.tok-na]#setVariable#[.tok-o]#(#[.tok-s]#"input"#[.tok-o]#,#
[.tok-n]#var#[.tok-o]#);# [.tok-o]#}# [.tok-o]#}#

Note: there will be *only one instance of that Java class created for
the serviceTask it is defined on*. All process-instances share the same
class instance that will be used to call _execute(DelegateExecution)_.
This means that the class must not use any member variables and must be
thread-safe, since it can be executed simultaneously from different
threads. This also influences the way
link:#serviceTaskFieldInjection[Field injection] is handled.

The classes that are referenced in the process definition (i.e. by using
`activiti:class`) are *NOT instantiated during deployment*. Only when a
process execution arrives for the first time at the point in the process
where the class is used, an instance of that class will be created. If
the class cannot be found, an `ActivitiException` will be thrown. The
reasoning for this is that the environment (and more specifically the
_classpath_) when you are deploying is often different from the actual
runtime environment. For example when using _ant_ or the business
archive upload in Activiti Explorer to deploy processes, the classpath
does not contain the referenced classes.

link:#internal[[INTERNAL: non-public implementation classes]] It is also
possible to provide a class that implements the
_org.activiti.engine.impl.pvm.delegate.ActivityBehavior_ interface.
Implementations have then access to the more powerful
_ActivityExecution_ that for example also allows to influence the
control flow of the process. Note however that this is not a very good
practice, and should be avoided as much as possible. So, it is advised
to use the _ActivityBehavior_ interface only for advanced use cases and
if you know exactly what you’re doing.

[[serviceTaskFieldInjection]]
== Field Injection

It’s possible to inject values into the fields of the delegated classes.
The following types of injection are supported:

* Fixed string values
* Expressions

If available, the value is injected through a public setter method on
your delegated class, following the Java Bean naming conventions (e.g.
field `firstName` has setter `setFirstName(…​)`). If no setter is
available for that field, the value of private member will be set on the
delegate. SecurityManagers in some environments don’t allow modifying
private fields, so it’s safer to expose a public setter-method for the
fields you want to have injected.

*Regardless of the type of value declared in the process-definition, the
type of the setter/private field on the injection target should always
be `org.activiti.engine.delegate.Expression`. When the expression is
resolved it can be cast to the appropriate type.*

Field injection is supported when using the _'actviiti:class'_
attribute. Field injection is also possible when using the
_activiti:delegateExpression_ attribute, however special rules with
regards to thread-safety apply (see next section).

The following code snippet shows how to inject a constant value into a
field declared on the class. Note that we need to *declare a
_extensionElements_ XML element before the actual field injection
declarations*, which is a requirement of the BPMN 2.0 XML Schema.

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"javaService"#
[.tok-na]#name=#[.tok-s]#"Java service invocation"#
[.tok-na]#activiti:class=#[.tok-s]#"org.activiti.examples.bpmn.servicetask.ToUpperCaseFieldInjected"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"text"# [.tok-na]#stringValue=#[.tok-s]#"Hello
World"# [.tok-nt]#/># [.tok-nt]#</extensionElements>#
[.tok-nt]#</serviceTask>#

The class `ToUpperCaseFieldInjected` has a field `text` which is of type
`org.activiti.engine.delegate.Expression`. When calling
`text.getValue(execution)`, the configured string value `Hello World`
will be returned:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#ToUpperCaseFieldInjected#
[.tok-kd]#implements# [.tok-n]#JavaDelegate# [.tok-o]#\{#
[.tok-kd]#private# [.tok-n]#Expression# [.tok-n]#text#[.tok-o]#;#
[.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#execute#[.tok-o]#(#[.tok-n]#DelegateExecution#
[.tok-n]#execution#[.tok-o]#)# [.tok-o]#\{#
[.tok-n]#execution#[.tok-o]#.#[.tok-na]#setVariable#[.tok-o]#(#[.tok-s]#"var"#[.tok-o]#,#
[.tok-o]#((#[.tok-n]#String#[.tok-o]#)#[.tok-n]#text#[.tok-o]#.#[.tok-na]#getValue#[.tok-o]#(#[.tok-n]#execution#[.tok-o]#)).#[.tok-na]#toUpperCase#[.tok-o]#());#
[.tok-o]#}# [.tok-o]#}#

Alternatively, for longs texts (e.g. an inline e-mail) the
_'activiti:string'_ sub element can be used:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"javaService"#
[.tok-na]#name=#[.tok-s]#"Java service invocation"#
[.tok-na]#activiti:class=#[.tok-s]#"org.activiti.examples.bpmn.servicetask.ToUpperCaseFieldInjected"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"text"#[.tok-nt]#>#
[.tok-nt]#<activiti:string># This is a long string with a lot of words
and potentially way longer even! [.tok-nt]#</activiti:string>#
[.tok-nt]#</activiti:field># [.tok-nt]#</extensionElements>#
[.tok-nt]#</serviceTask>#

To inject values that are dynamically resolved at runtime, expressions
can be used. Those expressions can use process variables, or Spring
defined beans (if Spring is used). As noted in
link:#bpmnJavaServiceTaskImplementation[Service Task Implementation], an
instance of the Java class is shared among all process-instances in a
service task when using the _activiti:class_ attribute. To have dynamic
injection of values in fields, you can inject value and method
expressions in a `org.activiti.engine.delegate.Expression` which can be
evaluated/invoked using the `DelegateExecution` passed in the `execute`
method.

The example class below uses the injected expressions and resolves them
using the current `DelegateExecution`. A _generBean_ method call is used
while passing the _gender_ variable. Full code and test can be found in
`org.activiti.examples.bpmn.servicetask.JavaServiceTaskTest.testExpressionFieldInjection`

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"javaService"#
[.tok-na]#name=#[.tok-s]#"Java service invocation"#
[.tok-na]#activiti:class=#[.tok-s]#"org.activiti.examples.bpmn.servicetask.ReverseStringsFieldInjected"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"text1"#[.tok-nt]#>#
[.tok-nt]##<activiti:expression>##$\{genderBean.getGenderString(gender)}[.tok-nt]#</activiti:expression>#
[.tok-nt]#</activiti:field># [.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"text2"#[.tok-nt]#>#
[.tok-nt]##<activiti:expression>##Hello $\{gender == 'male' ? 'Mr.' :
'Mrs.'} $\{name}[.tok-nt]#</activiti:expression>#
[.tok-nt]#</activiti:field># [.tok-nt]#</ extensionElements>#
[.tok-nt]#</ serviceTask>#

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
----

[.tok-kd]#public# [.tok-kd]#class#
[.tok-nc]#ReverseStringsFieldInjected# [.tok-kd]#implements#
[.tok-n]#JavaDelegate# [.tok-o]#\{# [.tok-kd]#private#
[.tok-n]#Expression# [.tok-n]#text1#[.tok-o]#;# [.tok-kd]#private#
[.tok-n]#Expression# [.tok-n]#text2#[.tok-o]#;# [.tok-kd]#public#
[.tok-kt]#void# [.tok-nf]#execute#[.tok-o]#(#[.tok-n]#DelegateExecution#
[.tok-n]#execution#[.tok-o]#)# [.tok-o]#\{# [.tok-n]#String#
[.tok-n]#value1# [.tok-o]#=# [.tok-o]#(#[.tok-n]#String#[.tok-o]#)#
[.tok-n]#text1#[.tok-o]#.#[.tok-na]#getValue#[.tok-o]#(#[.tok-n]#execution#[.tok-o]#);#
[.tok-n]#execution#[.tok-o]#.#[.tok-na]#setVariable#[.tok-o]#(#[.tok-s]#"var1"#[.tok-o]#,#
[.tok-k]#new#
[.tok-n]#StringBuffer#[.tok-o]#(#[.tok-n]#value1#[.tok-o]#).#[.tok-na]#reverse#[.tok-o]#().#[.tok-na]#toString#[.tok-o]#());#
[.tok-n]#String# [.tok-n]#value2# [.tok-o]#=#
[.tok-o]#(#[.tok-n]#String#[.tok-o]#)#
[.tok-n]#text2#[.tok-o]#.#[.tok-na]#getValue#[.tok-o]#(#[.tok-n]#execution#[.tok-o]#);#
[.tok-n]#execution#[.tok-o]#.#[.tok-na]#setVariable#[.tok-o]#(#[.tok-s]#"var2"#[.tok-o]#,#
[.tok-k]#new#
[.tok-n]#StringBuffer#[.tok-o]#(#[.tok-n]#value2#[.tok-o]#).#[.tok-na]#reverse#[.tok-o]#().#[.tok-na]#toString#[.tok-o]#());#
[.tok-o]#}# [.tok-o]#}#

Alternatively, you can also set the expressions as an attribute instead
of a child-element, to make the XML less verbose.

[source,pygments,highlight]
----
1
2
----

[.tok-nt]#<activiti:field# [.tok-na]#name=#[.tok-s]#"text1"#
[.tok-na]#expression=#[.tok-s]#"$\{genderBean.getGenderString(gender)}"#
[.tok-nt]#/># [.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"text1"# [.tok-na]#expression=#[.tok-s]#"Hello
$\{gender == 'male' ? 'Mr.' : 'Mrs.'} $\{name}"# [.tok-nt]#/>#

[[serviceTaskFieldInjectionThreadSafety]]
== Field injection and thread safety

In general, using service tasks with Java delegates and field injections
are thread-safe. However, there are a few situations where thread-safety
is not guaranteed, depending on the setup or environment Activiti is
running in.

When using the _activiti:class_ attribute, using field injection is
always thread safe. For each service task that references a certain
class, a new instance will be instantiated and fields will be injected
once when the instance is created. Reusing the same class in multiple
times in different tasks or process definitions is no problem.

When using the _activiti:expression_ attribute, using field injection is
not possible. Parameters are passed via method calls and these are
always thread-safe.

When using the _activiti:delegateExpression_ attribute, the
thread-safety of the delegate instance will depend on how the expression
is resolved. If the delegate expression is reused in various tasks
and/or process definitions and the expression always returns the same
instance, using field injection *is not thread-safe*. Let’s look at a
few examples to clarify.

Suppose the expression is _$\{factory.createDelegate(someVariable)}_,
where factory is a Java bean known to the engine (for example a Spring
bean when using the Spring integration) that creates a new instance each
time the expression is resolved. When using field injection in this
case, there is no problem with regards to thread-safety: each time the
expression is resolved, the fields are injected on this new instance.

However, suppose the expression is _$\{someJavaDelegateBean}_ that
resolves to an implementation of the JavaDelegate class and we’re
running in an environment that creates singleton instances of each bean
(like Spring, but many others too). When using this expression in
different tasks and/or process definitions, the expression will always
be resolved to the same instance. In this case, using field injection is
not thread-safe. For example:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"serviceTask1"#
[.tok-na]#activiti:delegateExpression=#[.tok-s]#"$\{someJavaDelegateBean}"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"someField"#
[.tok-na]#expression=#[.tok-s]#"$\{input * 2}"#[.tok-nt]#/>#
[.tok-nt]#</extensionElements># [.tok-nt]#</serviceTask># [.tok-c]#<!--
other process definition elements --># [.tok-nt]#<serviceTask#
[.tok-na]#id=#[.tok-s]#"serviceTask2"#
[.tok-na]#activiti:delegateExpression=#[.tok-s]#"$\{someJavaDelegateBean}"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"someField"#
[.tok-na]#expression=#[.tok-s]#"$\{input * 2000}"#[.tok-nt]#/>#
[.tok-nt]#</extensionElements># [.tok-nt]#</serviceTask>#

This example snippet has two service tasks that use the same delegate
expression, but injects different values for the _Expression_ field. *If
the expression resolves to the same instance, there can be race
conditions in concurrent scenarios* when it comes to injecting the field
_someField_ when the processes are executed.

The easiest solution to solve this, is to either

* rewrite the Java delegate to use an expression and passing the needed
data to the delegate via a method arguments.
* return a new instance of the delegate class each time the delegate
expression is resolved. For example when using Spring, this means that
the scope of the bean must be set to *prototype* (for example by adding
the @Scope(SCOPE_PROTOTYPE) annotation to the delegate class)

As of Activiti version 5.21, the process engine configuration can be
configured in a way to disable the use of field injection on delegate
epxressions, by setting the value of the
_delegateExpressionFieldInjectionMode_ property (which takes one of the
values in the
_org.activiti.engine.imp.cfg.DelegateExpressionFieldInjectionMode_
enum).

Following settings are possible:

* *DISABLED* : fully disables field injection when using delegate
expressions. No field injection will be attempted. This is the safest
mode, when it comes to thread-safety.
* *COMPATIBILITY*: in this mode, the behavior will be exactly as it was
before version 5.21: field injection is possible when using delegate
expressions and an exception will be thrown when the fields are not
defined on the delegate class. This is of course the least safe mode
with regards to thread-safety, but it can be needed for backwards
compatibility or can be used safely when the delegate expression is used
only on one task in a set of process definitions (and thus no concurrent
race conditions can happen).
* *MIXED*: Allows injection when using delegateExpressions but will not
throw an exception when the fields are not defined on the delegate. This
allows for mixed behaviors where some delegates have injection (for
example because they are not singletons) and some don’t.
* *The default mode for Activiti version 5.x is COMPATIBILITY.*
* *The default mode for Activiti version 6.x is MIXED.*

For example, suppose that we’re using _MIXED_ mode and we’re using the
Spring integration. Suppose that we have following beans in the Spring
configuration:

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-nt]#<bean#
[.tok-na]#id=#[.tok-s]#"singletonDelegateExpressionBean"#
[.tok-na]#class=#[.tok-s]#"org.activiti.spring.test.fieldinjection.SingletonDelegateExpressionBean"#
[.tok-nt]#/># [.tok-nt]#<bean#
[.tok-na]#id=#[.tok-s]#"prototypeDelegateExpressionBean"#
[.tok-na]#class=#[.tok-s]#"org.activiti.spring.test.fieldinjection.PrototypeDelegateExpressionBean"#
[.tok-na]#scope=#[.tok-s]#"prototype"# [.tok-nt]#/>#

The first bean is a regular Spring bean and thus a singleton. The second
one has _prototype_ as scope, and the Spring container will return a new
instance every time the bean is requested.

Given following process definition:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"serviceTask1"#
[.tok-na]#activiti:delegateExpression=#[.tok-s]#"$\{prototypeDelegateExpressionBean}"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"fieldA"#
[.tok-na]#expression=#[.tok-s]#"$\{input * 2}"#[.tok-nt]#/>#
[.tok-nt]#<activiti:field# [.tok-na]#name=#[.tok-s]#"fieldB"#
[.tok-na]#expression=#[.tok-s]#"$\{1 + 1}"#[.tok-nt]#/>#
[.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"resultVariableName"#
[.tok-na]#stringValue=#[.tok-s]#"resultServiceTask1"#[.tok-nt]#/>#
[.tok-nt]#</extensionElements># [.tok-nt]#</serviceTask>#
[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"serviceTask2"#
[.tok-na]#activiti:delegateExpression=#[.tok-s]#"$\{prototypeDelegateExpressionBean}"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"fieldA"#
[.tok-na]#expression=#[.tok-s]#"$\{123}"#[.tok-nt]#/>#
[.tok-nt]#<activiti:field# [.tok-na]#name=#[.tok-s]#"fieldB"#
[.tok-na]#expression=#[.tok-s]#"$\{456}"#[.tok-nt]#/>#
[.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"resultVariableName"#
[.tok-na]#stringValue=#[.tok-s]#"resultServiceTask2"#[.tok-nt]#/>#
[.tok-nt]#</extensionElements># [.tok-nt]#</serviceTask>#
[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"serviceTask3"#
[.tok-na]#activiti:delegateExpression=#[.tok-s]#"$\{singletonDelegateExpressionBean}"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"fieldA"#
[.tok-na]#expression=#[.tok-s]#"$\{input * 2}"#[.tok-nt]#/>#
[.tok-nt]#<activiti:field# [.tok-na]#name=#[.tok-s]#"fieldB"#
[.tok-na]#expression=#[.tok-s]#"$\{1 + 1}"#[.tok-nt]#/>#
[.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"resultVariableName"#
[.tok-na]#stringValue=#[.tok-s]#"resultServiceTask1"#[.tok-nt]#/>#
[.tok-nt]#</extensionElements># [.tok-nt]#</serviceTask>#
[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"serviceTask4"#
[.tok-na]#activiti:delegateExpression=#[.tok-s]#"$\{singletonDelegateExpressionBean}"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"fieldA"#
[.tok-na]#expression=#[.tok-s]#"$\{123}"#[.tok-nt]#/>#
[.tok-nt]#<activiti:field# [.tok-na]#name=#[.tok-s]#"fieldB"#
[.tok-na]#expression=#[.tok-s]#"$\{456}"#[.tok-nt]#/>#
[.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"resultVariableName"#
[.tok-na]#stringValue=#[.tok-s]#"resultServiceTask2"#[.tok-nt]#/>#
[.tok-nt]#</extensionElements># [.tok-nt]#</serviceTask>#

We’ve got four service tasks, where the first and the second use the
_$\{prototypeDelegateExpressionBean}_ delegate expression and the third
and fourth use the _$\{singletonDelegateExpressionBean}_ delegate
expression.

Let’s look at the prototype bean first:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
----

[.tok-kd]#public# [.tok-kd]#class#
[.tok-nc]#PrototypeDelegateExpressionBean# [.tok-kd]#implements#
[.tok-n]#JavaDelegate# [.tok-o]#\{# [.tok-kd]#public# [.tok-kd]#static#
[.tok-n]#AtomicInteger# [.tok-n]#INSTANCE_COUNT# [.tok-o]#=#
[.tok-k]#new# [.tok-n]#AtomicInteger#[.tok-o]#(#[.tok-mi]#0#[.tok-o]#);#
[.tok-kd]#private# [.tok-n]#Expression# [.tok-n]#fieldA#[.tok-o]#;#
[.tok-kd]#private# [.tok-n]#Expression# [.tok-n]#fieldB#[.tok-o]#;#
[.tok-kd]#private# [.tok-n]#Expression#
[.tok-n]#resultVariableName#[.tok-o]#;# [.tok-kd]#public#
[.tok-nf]#PrototypeDelegateExpressionBean#[.tok-o]#()# [.tok-o]#\{#
[.tok-n]#INSTANCE_COUNT#[.tok-o]#.#[.tok-na]#incrementAndGet#[.tok-o]#();#
[.tok-o]#}# [.tok-nd]#@Override# [.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#execute#[.tok-o]#(#[.tok-n]#DelegateExecution#
[.tok-n]#execution#[.tok-o]#)# [.tok-kd]#throws# [.tok-n]#Exception#
[.tok-o]#\{# [.tok-n]#Number# [.tok-n]#fieldAValue# [.tok-o]#=#
[.tok-o]#(#[.tok-n]#Number#[.tok-o]#)#
[.tok-n]#fieldA#[.tok-o]#.#[.tok-na]#getValue#[.tok-o]#(#[.tok-n]#execution#[.tok-o]#);#
[.tok-n]#Number# [.tok-n]#fieldValueB# [.tok-o]#=#
[.tok-o]#(#[.tok-n]#Number#[.tok-o]#)#
[.tok-n]#fieldB#[.tok-o]#.#[.tok-na]#getValue#[.tok-o]#(#[.tok-n]#execution#[.tok-o]#);#
[.tok-kt]#int# [.tok-n]#result# [.tok-o]#=#
[.tok-n]#fieldAValue#[.tok-o]#.#[.tok-na]#intValue#[.tok-o]#()#
[.tok-o]#+#
[.tok-n]#fieldValueB#[.tok-o]#.#[.tok-na]#intValue#[.tok-o]#();#
[.tok-n]#execution#[.tok-o]#.#[.tok-na]#setVariable#[.tok-o]#(#[.tok-n]#resultVariableName#[.tok-o]#.#[.tok-na]#getValue#[.tok-o]#(#[.tok-n]#execution#[.tok-o]#).#[.tok-na]#toString#[.tok-o]#(),#
[.tok-n]#result#[.tok-o]#);# [.tok-o]#}# [.tok-o]#}#

When we check the _INSTANCE_COUNT_ after running a process instance of
the process definition above, we’ll get _two_ back, as a new instance is
created every time _$\{prototypeDelegateExpressionBean}_ is resolved.
Fields can be injected without any problem here and we can see the three
_Expression_ member fields here.

The singleton bean, however, looks slightly different:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
----

[.tok-kd]#public# [.tok-kd]#class#
[.tok-nc]#SingletonDelegateExpressionBean# [.tok-kd]#implements#
[.tok-n]#JavaDelegate# [.tok-o]#\{# [.tok-kd]#public# [.tok-kd]#static#
[.tok-n]#AtomicInteger# [.tok-n]#INSTANCE_COUNT# [.tok-o]#=#
[.tok-k]#new# [.tok-n]#AtomicInteger#[.tok-o]#(#[.tok-mi]#0#[.tok-o]#);#
[.tok-kd]#public# [.tok-nf]#SingletonDelegateExpressionBean#[.tok-o]#()#
[.tok-o]#\{#
[.tok-n]#INSTANCE_COUNT#[.tok-o]#.#[.tok-na]#incrementAndGet#[.tok-o]#();#
[.tok-o]#}# [.tok-nd]#@Override# [.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#execute#[.tok-o]#(#[.tok-n]#DelegateExecution#
[.tok-n]#execution#[.tok-o]#)# [.tok-kd]#throws# [.tok-n]#Exception#
[.tok-o]#\{# [.tok-n]#Expression# [.tok-n]#fieldAExpression# [.tok-o]#=#
[.tok-n]#DelegateHelper#[.tok-o]#.#[.tok-na]#getFieldExpression#[.tok-o]#(#[.tok-n]#execution#[.tok-o]#,#
[.tok-s]#"fieldA"#[.tok-o]#);# [.tok-n]#Number# [.tok-n]#fieldA#
[.tok-o]#=# [.tok-o]#(#[.tok-n]#Number#[.tok-o]#)#
[.tok-n]#fieldAExpression#[.tok-o]#.#[.tok-na]#getValue#[.tok-o]#(#[.tok-n]#execution#[.tok-o]#);#
[.tok-n]#Expression# [.tok-n]#fieldBExpression# [.tok-o]#=#
[.tok-n]#DelegateHelper#[.tok-o]#.#[.tok-na]#getFieldExpression#[.tok-o]#(#[.tok-n]#execution#[.tok-o]#,#
[.tok-s]#"fieldB"#[.tok-o]#);# [.tok-n]#Number# [.tok-n]#fieldB#
[.tok-o]#=# [.tok-o]#(#[.tok-n]#Number#[.tok-o]#)#
[.tok-n]#fieldBExpression#[.tok-o]#.#[.tok-na]#getValue#[.tok-o]#(#[.tok-n]#execution#[.tok-o]#);#
[.tok-kt]#int# [.tok-n]#result# [.tok-o]#=#
[.tok-n]#fieldA#[.tok-o]#.#[.tok-na]#intValue#[.tok-o]#()# [.tok-o]#+#
[.tok-n]#fieldB#[.tok-o]#.#[.tok-na]#intValue#[.tok-o]#();#
[.tok-n]#String# [.tok-n]#resultVariableName# [.tok-o]#=#
[.tok-n]#DelegateHelper#[.tok-o]#.#[.tok-na]#getFieldExpression#[.tok-o]#(#[.tok-n]#execution#[.tok-o]#,#
[.tok-s]#"resultVariableName"#[.tok-o]#).#[.tok-na]#getValue#[.tok-o]#(#[.tok-n]#execution#[.tok-o]#).#[.tok-na]#toString#[.tok-o]#();#
[.tok-n]#execution#[.tok-o]#.#[.tok-na]#setVariable#[.tok-o]#(#[.tok-n]#resultVariableName#[.tok-o]#,#
[.tok-n]#result#[.tok-o]#);# [.tok-o]#}# [.tok-o]#}#

The _INSTANCE_COUNT_ will always be _one_ here, as it is a singleton. In
this delegate, there are no _Expression_ member fields. This is possible
since we’re running in _MIXED_ mode. In _COMPATIBILITY_ mode, this would
throw an exception as it expects the member fields to be there.
_DISABLED_ mode would also work for this bean, but it would disallow the
use the prototype bean above that does use field injection.

In this delegate code, the *org.activiti.engine.delegate.DelegateHelper*
class is used, that has some useful utility methods to execute the same
logic, but in a thread-safe way when the delegate is a singleton.
Instead of injecting the _Expression_, it is fetched via the
_getFieldExpression_ method. This means that when it comes to the
service task xml, the fields are defined exactly the same as for the
singleton bean. If you look at the xml snippet above, you can see they
are equal in definition and only the implementation logic differs.

(Technical note: the _getFieldExpression_ will introspect the BpmnModel
and create the Expression on the fly when the method is executed, making
it thread-safe)

* For Activiti versions 5.x, the DelegateHelper cannot be used for an
_ExecutionListener_ or _TaskListener_ (due to an architectural flaw). To
make thread-safe instances of those listeners, use either an expression
or make sure a new instance is created every time the delegate
expression is resolved.
* For Activiti version 6.x the DelegateHelper does work in
_ExecutionListener_ and _TaskListener_ implementations. For example in
version 6.x, the following code can be written, using the
*DelegateHelper*:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:executionListener#
[.tok-na]#delegateExpression=#[.tok-s]#"$\{testExecutionListener}"#
[.tok-na]#event=#[.tok-s]#"start"#[.tok-nt]#>#
[.tok-nt]#<activiti:field# [.tok-na]#name=#[.tok-s]#"input"#
[.tok-na]#expression=#[.tok-s]#"$\{startValue}"# [.tok-nt]#/>#
[.tok-nt]#<activiti:field# [.tok-na]#name=#[.tok-s]#"resultVar"#
[.tok-na]#stringValue=#[.tok-s]#"processStartValue"# [.tok-nt]#/>#
[.tok-nt]#</activiti:executionListener># [.tok-nt]#</extensionElements>#

Where _testExecutionListener_ resolves to an instance implementing the
ExecutionListener interface:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
----

[.tok-nd]#@Component#[.tok-o]#(#[.tok-s]#"testExecutionListener"#[.tok-o]#)#
[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#TestExecutionListener#
[.tok-kd]#implements# [.tok-n]#ExecutionListener# [.tok-o]#\{#
[.tok-nd]#@Override# [.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#notify#[.tok-o]#(#[.tok-n]#DelegateExecution#
[.tok-n]#execution#[.tok-o]#)# [.tok-o]#\{# [.tok-n]#Expression#
[.tok-n]#inputExpression# [.tok-o]#=#
[.tok-n]#DelegateHelper#[.tok-o]#.#[.tok-na]#getFieldExpression#[.tok-o]#(#[.tok-n]#execution#[.tok-o]#,#
[.tok-s]#"input"#[.tok-o]#);# [.tok-n]#Number# [.tok-n]#input#
[.tok-o]#=# [.tok-o]#(#[.tok-n]#Number#[.tok-o]#)#
[.tok-n]#inputExpression#[.tok-o]#.#[.tok-na]#getValue#[.tok-o]#(#[.tok-n]#execution#[.tok-o]#);#
[.tok-kt]#int# [.tok-n]#result# [.tok-o]#=#
[.tok-n]#input#[.tok-o]#.#[.tok-na]#intValue#[.tok-o]#()# [.tok-o]#*#
[.tok-mi]#100#[.tok-o]#;# [.tok-n]#Expression#
[.tok-n]#resultVarExpression# [.tok-o]#=#
[.tok-n]#DelegateHelper#[.tok-o]#.#[.tok-na]#getFieldExpression#[.tok-o]#(#[.tok-n]#execution#[.tok-o]#,#
[.tok-s]#"resultVar"#[.tok-o]#);#
[.tok-n]#execution#[.tok-o]#.#[.tok-na]#setVariable#[.tok-o]#(#[.tok-n]#resultVarExpression#[.tok-o]#.#[.tok-na]#getValue#[.tok-o]#(#[.tok-n]#execution#[.tok-o]#).#[.tok-na]#toString#[.tok-o]#(),#
[.tok-n]#result#[.tok-o]#);# [.tok-o]#}# [.tok-o]#}#

[[serviceTaskResultValue]]
== Service task results

The return value of a service execution (for service task using
expression only) can be assigned to an already existing or to a new
process variable by specifying the process variable name as a literal
value for the _'activiti:resultVariable'_ attribute of a service task
definition. Any existing value for a specific process variable will be
overwritten by the result value of the service execution. When not
specifying a result variable name, the service execution result value
gets ignored.

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<serviceTask#
[.tok-na]#id=#[.tok-s]#"aMethodExpressionServiceTask"#
[.tok-na]#activiti:expression=#[.tok-s]#"#\{myService.doSomething()}"#
[.tok-na]#activiti:resultVariable=#[.tok-s]#"myVar"# [.tok-nt]#/>#

In the example above, the result of the service execution (the return
value of the _'doSomething()'_ method invocation on an object that is
made available under the name _'myService'_ either in the process
variables or as a Spring bean) is set to the process variable named
_'myVar'_ after the service execution completes.

[[serviceTaskExceptionHandling]]
== Handling exceptions

When custom logic is executed, it is often required to catch certain
business exceptions and handle them inside the surrounding process.
Activiti provides different options to do that.

[[serviceTaskBpmnErrors]]
=== Throwing BPMN Errors

It is possible to throw BPMN Errors from user code inside Service Tasks
or Script Tasks. In order to do this, a special ActivitiException called
_BpmnError_ can be thrown in JavaDelegates, scripts, expressions and
delegate expressions. The engine will catch this exception and forward
it to an appropriate error handler, e.g., a Boundary Error Event or an
Error Event Sub-Process.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
----

[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#ThrowBpmnErrorDelegate#
[.tok-kd]#implements# [.tok-n]#JavaDelegate# [.tok-o]#\{#
[.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#execute#[.tok-o]#(#[.tok-n]#DelegateExecution#
[.tok-n]#execution#[.tok-o]#)# [.tok-kd]#throws# [.tok-n]#Exception#
[.tok-o]#\{# [.tok-k]#try# [.tok-o]#\{#
[.tok-n]#executeBusinessLogic#[.tok-o]#();# [.tok-o]#}# [.tok-k]#catch#
[.tok-o]#(#[.tok-n]#BusinessException# [.tok-n]#e#[.tok-o]#)#
[.tok-o]#\{# [.tok-k]#throw# [.tok-k]#new#
[.tok-n]#BpmnError#[.tok-o]#(#[.tok-s]#"BusinessExceptionOccurred"#[.tok-o]#);#
[.tok-o]#}# [.tok-o]#}# [.tok-o]#}#

The constructor argument is an error code, which will be used to
determine the error handler that is responsible for the error. See
link:#bpmnBoundaryErrorEvent[Boundary Error Event] for information on
how to catch a BPMN Error.

This mechanism should be used *only for business faults* that shall be
handled by a Boundary Error Event or Error Event Sub-Process modeled in
the process definition. Technical errors should be represented by other
exception types and are usually not handled inside a process.

[[exceptionMapping]]
== Exception mapping

It is also possible to directly map a java exception to business
exception by using `mapException` extension. Single mapping is the
simplest form:

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"servicetask1"#
[.tok-na]#name=#[.tok-s]#"Service Task"#
[.tok-na]#activiti:class=#[.tok-s]#"..."#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:mapException#
[.tok-na]#errorCode=#[.tok-s]#"myErrorCode1"#[.tok-nt]##>##org.activiti.SomeException[.tok-nt]##</activiti:mapException>##
[.tok-nt]#</extensionElements># [.tok-nt]#</serviceTask>#

In above code, if an instance of `org.activiti.SomeException` is thrown
in service task, it would be caught and converted to a BPMN exception
with the given errorCode. From this point on, it will be handled exactly
like a normal BPMN exception. Any other exception will be treated as if
there is no mapping in place. It will be propagated to the API caller.

One can map all the child exception of a certain exception in a single
line by using `includeChildExceptions` attribute.

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"servicetask1"#
[.tok-na]#name=#[.tok-s]#"Service Task"#
[.tok-na]#activiti:class=#[.tok-s]#"..."#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:mapException#
[.tok-na]#errorCode=#[.tok-s]#"myErrorCode1"#
[.tok-na]#includeChildExceptions=#[.tok-s]#"true"#[.tok-nt]##>##org.activiti.SomeException[.tok-nt]##</activiti:mapException>##
[.tok-nt]#</extensionElements># [.tok-nt]#</serviceTask>#

The above code will cause activiti to convert any direct or indirect
descendent of `SomeException` to a BPMN error with the given error code.
`includeChildExceptions` will be considered "false" when not given.

The most generic mapping is a default map. Default map is a map with no
class. It will match any java exception:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"servicetask1"#
[.tok-na]#name=#[.tok-s]#"Service Task"#
[.tok-na]#activiti:class=#[.tok-s]#"..."#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:mapException#
[.tok-na]#errorCode=#[.tok-s]#"myErrorCode1"#[.tok-nt]#/>#
[.tok-nt]#</extensionElements># [.tok-nt]#</serviceTask>#

The mappings are checked in order, from top to bottom and the first
found match will be followed, except for the default map. Default map is
selected only after all maps are unsuccessfully checked. Only the first
map with no class will be considered as default map.
`includeChildExceptions` is ignored for default Map.

[[serviceTaskExceptionSequenceFlow]]
== Exception Sequence Flow

link:#internal[[INTERNAL: non-public implementation classes]]

Another option is to route process execution through another path in
case some exception occurs. The following example shows how this is
done.

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"javaService"#
[.tok-na]#name=#[.tok-s]#"Java service invocation"#
[.tok-na]#activiti:class=#[.tok-s]#"org.activiti.ThrowsExceptionBehavior"#[.tok-nt]#>#
[.tok-nt]#</serviceTask># [.tok-nt]#<sequenceFlow#
[.tok-na]#id=#[.tok-s]#"no-exception"#
[.tok-na]#sourceRef=#[.tok-s]#"javaService"#
[.tok-na]#targetRef=#[.tok-s]#"theEnd"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"exception"#
[.tok-na]#sourceRef=#[.tok-s]#"javaService"#
[.tok-na]#targetRef=#[.tok-s]#"fixException"# [.tok-nt]#/>#

Here, the service task has two outgoing sequence flow, called
`exception` and `no-exception`. This sequence flow id will be used to
direct process flow in case of an exception:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
----

[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#ThrowsExceptionBehavior#
[.tok-kd]#implements# [.tok-n]#ActivityBehavior# [.tok-o]#\{#
[.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#execute#[.tok-o]#(#[.tok-n]#ActivityExecution#
[.tok-n]#execution#[.tok-o]#)# [.tok-kd]#throws# [.tok-n]#Exception#
[.tok-o]#\{# [.tok-n]#String# [.tok-n]#var# [.tok-o]#=#
[.tok-o]#(#[.tok-n]#String#[.tok-o]#)#
[.tok-n]#execution#[.tok-o]#.#[.tok-na]#getVariable#[.tok-o]#(#[.tok-s]#"var"#[.tok-o]#);#
[.tok-n]#PvmTransition# [.tok-n]#transition# [.tok-o]#=#
[.tok-kc]#null#[.tok-o]#;# [.tok-k]#try# [.tok-o]#\{#
[.tok-n]#executeLogic#[.tok-o]#(#[.tok-n]#var#[.tok-o]#);#
[.tok-n]#transition# [.tok-o]#=#
[.tok-n]#execution#[.tok-o]#.#[.tok-na]#getActivity#[.tok-o]#().#[.tok-na]#findOutgoingTransition#[.tok-o]#(#[.tok-s]#"no-exception"#[.tok-o]#);#
[.tok-o]#}# [.tok-k]#catch# [.tok-o]#(#[.tok-n]#Exception#
[.tok-n]#e#[.tok-o]#)# [.tok-o]#\{# [.tok-n]#transition# [.tok-o]#=#
[.tok-n]#execution#[.tok-o]#.#[.tok-na]#getActivity#[.tok-o]#().#[.tok-na]#findOutgoingTransition#[.tok-o]#(#[.tok-s]#"exception"#[.tok-o]#);#
[.tok-o]#}#
[.tok-n]#execution#[.tok-o]#.#[.tok-na]#take#[.tok-o]#(#[.tok-n]#transition#[.tok-o]#);#
[.tok-o]#}# [.tok-o]#}#

[[serviceTaskCallActivitiService]]
== Using an Activiti service from within a JavaDelegate

For some use cases, it might be needed to use the Activiti services from
within a Java service task (e.g. starting a process instance through the
RuntimeService, if the callActivity doesn’t suit your needs). The
_org.activiti.engine.delegate.DelegateExecution_ allows to easily use
these services through the _org.activiti.engine.EngineServices_
interface:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
----

[.tok-kd]#public# [.tok-kd]#class#
[.tok-nc]#StartProcessInstanceTestDelegate# [.tok-kd]#implements#
[.tok-n]#JavaDelegate# [.tok-o]#\{# [.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#execute#[.tok-o]#(#[.tok-n]#DelegateExecution#
[.tok-n]#execution#[.tok-o]#)# [.tok-kd]#throws# [.tok-n]#Exception#
[.tok-o]#\{# [.tok-n]#RuntimeService# [.tok-n]#runtimeService#
[.tok-o]#=#
[.tok-n]#execution#[.tok-o]#.#[.tok-na]#getEngineServices#[.tok-o]#().#[.tok-na]#getRuntimeService#[.tok-o]#();#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#startProcessInstanceByKey#[.tok-o]#(#[.tok-s]#"myProcess"#[.tok-o]#);#
[.tok-o]#}# [.tok-o]#}#

All of the Activiti service API’s are available through this interface.

All data changes that occur as an effect of using these API calls, will
be part of the current transaction. This also works in environments with
dependency injection like Spring and CDI with or without a JTA enabled
datasource. For example, the following snippet of code will do the same
as the snippet above, but now the RuntimeService is injected rather than
it is being fetched through the _org.activiti.engine.EngineServices_
interface.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
----

[.tok-nd]#@Component#[.tok-o]#(#[.tok-s]#"startProcessInstanceDelegate"#[.tok-o]#)#
[.tok-kd]#public# [.tok-kd]#class#
[.tok-nc]#StartProcessInstanceTestDelegateWithInjection# [.tok-o]#\{#
[.tok-nd]#@Autowired# [.tok-kd]#private# [.tok-n]#RuntimeService#
[.tok-n]#runtimeService#[.tok-o]#;# [.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#startProcess#[.tok-o]#()# [.tok-o]#\{#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#startProcessInstanceByKey#[.tok-o]#(#[.tok-s]#"oneTaskProcess"#[.tok-o]#);#
[.tok-o]#}# [.tok-o]#}#

*Important technical note:* since the service call is being done as part
of the current transaction any data that was produced or altered
_before_ the service task is executed, is not yet flushed to the
database. All API calls work on the database data, which means that
these uncommitted changes are not be _visible_ within the api call of
the service task.

[[bpmnWebserviceTask]]
== 8.5.4. Web Service Task

link:#experimental[[EXPERIMENTAL]][#bpmnWebserviceTaskDescription]##

[[_description_6]]
=== Description

A Web Service task is used to synchronously invoke an external Web
service.

[[bpmnWebserviceTaskGraphicalNotation]]
=== Graphical Notation

A Web Service task is visualized the same as a Java service task.

image:images/bpmn.web.service.task.png[bpmn.web.service.task]

[[bpmnWebserviceTaskXML]]
=== XML representation

To use a Web service we need to import its operations and complex types.
This can be done automatically by using the import tag pointing to the
WSDL of the Web service:

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<import#
[.tok-na]#importType=#[.tok-s]#"http://schemas.xmlsoap.org/wsdl/"#
[.tok-na]#location=#[.tok-s]#"http://localhost:63081/counter?wsdl"#
[.tok-na]#namespace=#[.tok-s]#"http://webservice.activiti.org/"#
[.tok-nt]#/>#

The previous declaration tells Activiti to import the definitions but it
doesn’t create the item definitions and messages for you. Let’s suppose
we want to invoke a specific method called _prettyPrint_, therefore we
will need to create the corresponding message and item definitions for
the request and response messages:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<message#
[.tok-na]#id=#[.tok-s]#"prettyPrintCountRequestMessage"#
[.tok-na]#itemRef=#[.tok-s]#"tns:prettyPrintCountRequestItem"#
[.tok-nt]#/># [.tok-nt]#<message#
[.tok-na]#id=#[.tok-s]#"prettyPrintCountResponseMessage"#
[.tok-na]#itemRef=#[.tok-s]#"tns:prettyPrintCountResponseItem"#
[.tok-nt]#/># [.tok-nt]#<itemDefinition#
[.tok-na]#id=#[.tok-s]#"prettyPrintCountRequestItem"#
[.tok-na]#structureRef=#[.tok-s]#"counter:prettyPrintCount"#
[.tok-nt]#/># [.tok-nt]#<itemDefinition#
[.tok-na]#id=#[.tok-s]#"prettyPrintCountResponseItem"#
[.tok-na]#structureRef=#[.tok-s]#"counter:prettyPrintCountResponse"#
[.tok-nt]#/>#

Before declaring the service task, we have to define the BPMN interfaces
and operations that actually reference the Web service ones. Basically,
we define and _interface_ and the required _operation’s_. For each
operation we reuse the previous defined message for in and out. For
example, the following declaration defines the _counter_ interface and
the _prettyPrintCountOperation_ operation:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-nt]#<interface# [.tok-na]#name=#[.tok-s]#"Counter Interface"#
[.tok-na]#implementationRef=#[.tok-s]#"counter:Counter"#[.tok-nt]#>#
[.tok-nt]#<operation#
[.tok-na]#id=#[.tok-s]#"prettyPrintCountOperation"#
[.tok-na]#name=#[.tok-s]#"prettyPrintCount Operation"#
[.tok-na]#implementationRef=#[.tok-s]#"counter:prettyPrintCount"#[.tok-nt]#>#
[.tok-nt]##<inMessageRef>##tns:prettyPrintCountRequestMessage[.tok-nt]##</inMessageRef>##
[.tok-nt]##<outMessageRef>##tns:prettyPrintCountResponseMessage[.tok-nt]##</outMessageRef>##
[.tok-nt]#</operation># [.tok-nt]#</interface>#

Then we can declare a Web Service Task by using the ##WebService
implementation and a reference to the Web service operation.

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"webService"#
[.tok-na]#name=#[.tok-s]#"Web service invocation"#
[.tok-na]#implementation=#[.tok-s]#"##WebService"#
[.tok-na]#operationRef=#[.tok-s]#"tns:prettyPrintCountOperation"#[.tok-nt]#>#

[[bpmnWebserviceTaskIOSpecification]]
== Web Service Task IO Specification

Unless we are using the simplistic approach for data input and output
associations (See below), each Web Service Task needs to declare an IO
Specification which states which are the inputs and outputs of the task.
The approach is pretty straightforward and BPMN 2.0 complaint, for our
prettyPrint example we define the input and output sets according to the
previously declared item definitions:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
----

[.tok-nt]#<ioSpecification># [.tok-nt]#<dataInput#
[.tok-na]#itemSubjectRef=#[.tok-s]#"tns:prettyPrintCountRequestItem"#
[.tok-na]#id=#[.tok-s]#"dataInputOfServiceTask"# [.tok-nt]#/>#
[.tok-nt]#<dataOutput#
[.tok-na]#itemSubjectRef=#[.tok-s]#"tns:prettyPrintCountResponseItem"#
[.tok-na]#id=#[.tok-s]#"dataOutputOfServiceTask"# [.tok-nt]#/>#
[.tok-nt]#<inputSet>#
[.tok-nt]##<dataInputRefs>##dataInputOfServiceTask[.tok-nt]##</dataInputRefs>##
[.tok-nt]#</inputSet># [.tok-nt]#<outputSet>#
[.tok-nt]##<dataOutputRefs>##dataOutputOfServiceTask[.tok-nt]##</dataOutputRefs>##
[.tok-nt]#</outputSet># [.tok-nt]#</ioSpecification>#

[[bpmnWebserviceTaskDataInputAssociation]]
== Web Service Task data input associations

There are 2 ways of specifying data input associations:

* Using expressions
* Using the simplistic approach

To specify the data input association using expressions we need to
define the source and target items and specify the corresponding
assignments between the fields of each item. In the following example we
assign prefix and suffix fields of the items:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
----

[.tok-nt]#<dataInputAssociation>#
[.tok-nt]##<sourceRef>##dataInputOfProcess[.tok-nt]##</sourceRef>##
[.tok-nt]##<targetRef>##dataInputOfServiceTask[.tok-nt]##</targetRef>##
[.tok-nt]#<assignment>#
[.tok-nt]##<from>##$\{dataInputOfProcess.prefix}[.tok-nt]#</from>#
[.tok-nt]##<to>##$\{dataInputOfServiceTask.prefix}[.tok-nt]#</to>#
[.tok-nt]#</assignment># [.tok-nt]#<assignment>#
[.tok-nt]##<from>##$\{dataInputOfProcess.suffix}[.tok-nt]#</from>#
[.tok-nt]##<to>##$\{dataInputOfServiceTask.suffix}[.tok-nt]#</to>#
[.tok-nt]#</assignment># [.tok-nt]#</dataInputAssociation>#

On the other hand we can use the simplistic approach which is much more
simple. The _sourceRef_ element is an Activiti variable name and the
_targetRef_ element is a property of the item definition. In the
following example we assign to the _prefix_ field the value of the
variable _PrefixVariable_ and to the _suffix_ field the value of the
variable _SuffixVariable_.

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
----

[.tok-nt]#<dataInputAssociation>#
[.tok-nt]##<sourceRef>##PrefixVariable[.tok-nt]##</sourceRef>##
[.tok-nt]##<targetRef>##prefix[.tok-nt]##</targetRef>##
[.tok-nt]#</dataInputAssociation># [.tok-nt]#<dataInputAssociation>#
[.tok-nt]##<sourceRef>##SuffixVariable[.tok-nt]##</sourceRef>##
[.tok-nt]##<targetRef>##suffix[.tok-nt]##</targetRef>##
[.tok-nt]#</dataInputAssociation>#

[[bpmnWebserviceTaskDataOutputAssociation]]
== Web Service Task data output associations

There are 2 ways of specifying data out associations:

* Using expressions
* Using the simplistic approach

To specify the data out association using expressions we need to define
the target variable and the source expression. The approach is pretty
straightforward and similar data input associations:

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-nt]#<dataOutputAssociation>#
[.tok-nt]##<targetRef>##dataOutputOfProcess[.tok-nt]##</targetRef>##
[.tok-nt]##<transformation>##$\{dataOutputOfServiceTask.prettyPrint}[.tok-nt]#</transformation>#
[.tok-nt]#</dataOutputAssociation>#

On the other hand we can use the simplistic approach which is much more
simple. The _sourceRef_ element is a property of the item definition and
the _targetRef_ element is an Activiti variable name. The approach is
pretty straightforward and similar data input associations:

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-nt]#<dataOutputAssociation>#
[.tok-nt]##<sourceRef>##prettyPrint[.tok-nt]##</sourceRef>##
[.tok-nt]##<targetRef>##OutputVariable[.tok-nt]##</targetRef>##
[.tok-nt]#</dataOutputAssociation>#

[[bpmnBusinessRuleTask]]
== 8.5.5. Business Rule Task

link:#experimental[[EXPERIMENTAL]][#bpmnBusinessRuleTaskDescription]##

[[_description_7]]
=== Description

A Business Rule task is used to synchronously execute one or more rules.
Activiti uses Drools Expert, the Drools rule engine to execute business
rules. Currently, the .drl files containing the business rules have to
be deployed together with the process definition that defines a business
rule task to execute those rules. This means that all .drl files that
are used in a process have to be packaged in the process BAR file like
for example the task forms. For more information about creating business
rules for Drools Expert please refer to the Drools documentation at
http://www.jboss.org/drools/documentation[JBoss Drools]

If you want to plug in your implementation of the rule task, e.g.
because you want to use Drools differently or you want to use a
completely different rule engine, then you can use the class or
expression attribute on the BusinessRuleTask and it will behave exactly
like a link:#bpmnJavaServiceTask[ServiceTask]

[[bpmnBusinessRuleTaskGraphicalNotation]]
=== Graphical Notation

A Business Rule task is visualized the with a table icon.

image:images/bpmn.business.rule.task.png[bpmn.business.rule.task]

[[bpmnBusinessRuleTaskXML]]
=== XML representation

To execute one or more business rules that are deployed in the same BAR
file as the process definition, we need to define the input and result
variables. For the input variable definition a list of process variables
can be defined separated by a comma. The output variable definition can
only contain one variable name that will be used to store the output
objects of the executed business rules in a process variable. Note that
the result variable will contain a List of objects. If no result
variable name is specified by default org.activiti.engine.rules.OUTPUT
is used.

The following business rule task executes all business rules deployed
with the process definition:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
----

[.tok-nt]#<process#
[.tok-na]#id=#[.tok-s]#"simpleBusinessRuleProcess"#[.tok-nt]#>#
[.tok-nt]#<startEvent# [.tok-na]#id=#[.tok-s]#"theStart"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#sourceRef=#[.tok-s]#"theStart"#
[.tok-na]#targetRef=#[.tok-s]#"businessRuleTask"# [.tok-nt]#/>#
[.tok-nt]#<businessRuleTask# [.tok-na]#id=#[.tok-s]#"businessRuleTask"#
[.tok-na]#activiti:ruleVariablesInput=#[.tok-s]#"$\{order}"#
[.tok-na]#activiti:resultVariable=#[.tok-s]#"rulesOutput"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow#
[.tok-na]#sourceRef=#[.tok-s]#"businessRuleTask"#
[.tok-na]#targetRef=#[.tok-s]#"theEnd"# [.tok-nt]#/>#
[.tok-nt]#<endEvent# [.tok-na]#id=#[.tok-s]#"theEnd"# [.tok-nt]#/>#
[.tok-nt]#</process>#

The business rule task can also be configured to execute only a defined
set of rules from the deployed .drl files. A list of rule names
separated by a comma must be specified for this.

[source,pygments,highlight]
----
1
2
----

[.tok-nt]#<businessRuleTask# [.tok-na]#id=#[.tok-s]#"businessRuleTask"#
[.tok-na]#activiti:ruleVariablesInput=#[.tok-s]#"$\{order}"#
[.tok-na]#activiti:rules=#[.tok-s]#"rule1, rule2"# [.tok-nt]#/>#

In this case only rule1 and rule2 are executed.

You can also define a list of rules that should be excluded from
execution.

[source,pygments,highlight]
----
1
2
----

[.tok-nt]#<businessRuleTask# [.tok-na]#id=#[.tok-s]#"businessRuleTask"#
[.tok-na]#activiti:ruleVariablesInput=#[.tok-s]#"$\{order}"#
[.tok-na]#activiti:rules=#[.tok-s]#"rule1, rule2"#
[.tok-na]#exclude=#[.tok-s]#"true"# [.tok-nt]#/>#

In this case all rules deployed in the same BAR file as the process
definition will be executed, except for rule1 and rule2.

As mentioned earlier another option is to hook in the implementation of
the BusinessRuleTask yourself:

[source,pygments,highlight]
----
1
----

[.tok-nt]#<businessRuleTask# [.tok-na]#id=#[.tok-s]#"businessRuleTask"#
[.tok-na]#activiti:class=#[.tok-s]#"$\{MyRuleServiceDelegate}"#
[.tok-nt]#/>#

Now the BusinessRuleTask behaves exactly like a ServiceTask, but still
keeps the BusinessRuleTask icon to visualize that we do business rule
processing here.

[[bpmnEmailTask]]
== 8.5.6. Email Task

Activiti allows to enhance business processes with automatic mail
service tasks that send e-mails to one or more recipients, including
support for cc, bcc, HTML content, …​ etc. Note that the mail task is
*not* an _official_ task of the BPMN 2.0 spec (and it does not have a
dedicated icon as a consequence). Hence, in Activiti the mail task is
implemented as a dedicated service task.

[[bpmnEmailTaskServerConfiguration]]
=== Mail server configuration

The Activiti engine sends e-mails trough an external mail server with
SMTP capabilities. To actually send e-mails, the engine needs to know
how to reach the mail server. Following properties can be set in the
_activiti.cfg.xml_ configuration file:

[width="100%",cols="34%,33%,33%",options="header",]
|===
|Property |Required? |Description
|mailServerHost |no |The hostname of your mail server (e.g.
mail.mycorp.com). Default is `localhost`

|mailServerPort |yes, if not on the default port |The port for SMTP
traffic on the mail server. The default is _25_

|mailServerDefaultFrom |no |The default e-mail address of the sender of
e-mails, when none is provided by the user. By default this is
_activiti@activiti.org_

|mailServerUsername |if applicable for your server |Some mail servers
require credentials for sending e-mail. By default not set.

|mailServerPassword |if applicable for your server |Some mail servers
require credentials for sending e-mail. By default not set.

|mailServerUseSSL |if applicable for your server |Some mail servers
require ssl communication. By default set to false.

|mailServerUseTLS |if applicable for your server |Some mail servers (for
instance gmail) require TLS communication. By default set to false.
|===

[[bpmnEmailTaskUsage]]
=== Defining an Email Task

The Email task is implemented as a dedicated
link:#bpmnJavaServiceTask[Service Task] and is defined by setting
_'mail'_ for the _type_ of the service task.

[source,pygments,highlight]
----
1
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"sendMail"#
[.tok-na]#activiti:type=#[.tok-s]#"mail"#[.tok-nt]#>#

The Email task is configured by link:#serviceTaskFieldInjection[field
injection]. All the values for these properties can contain EL
expression, which are resolved at runtime during process execution.
Following properties can be set:

[width="100%",cols="34%,33%,33%",options="header",]
|===
|Property |Required? |Description
|to |yes |The recipients if the e-mail. Multiple recipients are defined
in a comma-separated list

|from |no |The sender e-mail address. If not provided, the
link:#bpmnEmailTaskServerConfiguration[default configured] from address
is used.

|subject |no |The subject of the e-mail.

|cc |no |The cc’s of the e-mail. Multiple recipients are defined in a
comma-separated list

|bcc |no |The bcc’s of the e-mail. Multiple recipients are defined in a
comma-separated list

|charset |no |Allows to change the charset of the email, which is
necessary for many non-English languages.

|html |no |A piece of HTML that is the content of the e-mail.

|text |no |The content of the e-mail, in case one needs to send plain
none-rich e-mails. Can be used in combination with _html_, for e-mail
clients that don’t support rich content. The client will then fall back
to this text-only alternative.

|htmlVar |no |The name of a process variable that holds the HTML that is
the content of the e-mail. The key difference between this and html is
that this content will have expressions replaced before being sent by
the mail task.

|textVar |no |The name of a process variable that holds the plain text
content of the e-mail. The key difference between this and html is that
this content will have expressions replaced before being sent by the
mail task.

|ignoreException |no |Whether an failure when handling the e-mail throws
an ActivitiException. By default this is set to false.

|exceptionVariableName |no |When email handling does not throw an
exception since _ignoreException = true_ a variable with the given name
is used to hold a failure message
|===

[[bpmnEmailTaskExampleUsage]]
== Example usage

The following XML snippet shows an example of using the Email Task.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"sendMail"#
[.tok-na]#activiti:type=#[.tok-s]#"mail"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"from"#
[.tok-na]#stringValue=#[.tok-s]#"order-shipping@thecompany.com"#
[.tok-nt]#/># [.tok-nt]#<activiti:field# [.tok-na]#name=#[.tok-s]#"to"#
[.tok-na]#expression=#[.tok-s]#"$\{recipient}"# [.tok-nt]#/>#
[.tok-nt]#<activiti:field# [.tok-na]#name=#[.tok-s]#"subject"#
[.tok-na]#expression=#[.tok-s]#"Your order $\{orderId} has been
shipped"# [.tok-nt]#/># [.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"html"#[.tok-nt]#>#
[.tok-nt]#<activiti:expression># [.tok-cp]#<![CDATA[# [.tok-cp]# <html>#
[.tok-cp]# <body># [.tok-cp]# Hello $\{male ? 'Mr.' : 'Mrs.' }
$\{recipientName},<br/><br/># [.tok-cp]# As of $\{now}, your order has
been <b>processed and shipped</b>.<br/><br/># [.tok-cp]# Kind
regards,<br/># [.tok-cp]# TheCompany.# [.tok-cp]# </body># [.tok-cp]#
</html># [.tok-cp]# ]]># [.tok-nt]#</activiti:expression>#
[.tok-nt]#</activiti:field># [.tok-nt]#</extensionElements>#
[.tok-nt]#</serviceTask>#

with the following result:

image:images/email.task.result.png[email.task.result]

[[bpmnMuleTask]]
== 8.5.7. Mule Task

The mule task allows to send messages to Mule enhancing the integration
features of Activiti. Note that the mule task is *not* an _official_
task of the BPMN 2.0 spec (and it does not have a dedicated icon as a
consequence). Hence, in Activiti the mule task is implemented as a
dedicated service task.

[[bpmnMuleTaskUsage]]
=== Defining an Mule Task

The Mule task is implemented as a dedicated
link:#bpmnJavaServiceTask[Service Task] and is defined by setting
_'mule'_ for the _type_ of the service task.

[source,pygments,highlight]
----
1
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"sendMule"#
[.tok-na]#activiti:type=#[.tok-s]#"mule"#[.tok-nt]#>#

The Mule task is configured by link:#serviceTaskFieldInjection[field
injection]. All the values for these properties can contain EL
expression, which are resolved at runtime during process execution.
Following properties can be set:

[width="100%",cols="34%,33%,33%",options="header",]
|===
|Property |Required? |Description
|endpointUrl |yes |The Mule endpoint you want to invoke.

|language |yes |The language you want to use to evaluate the
payloadExpression field.

|payloadExpression |yes |An expression that will be the message’s
payload.

|resultVariable |no |The name of the variable which will store the
result of the invocation.
|===

[[bpmnMuleTaskExampleUsage]]
== Example usage

The following XML snippet shows an example of using the Mule Task.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
----

[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"endpointUrl"#[.tok-nt]#>#
[.tok-nt]##<activiti:string>##vm://in[.tok-nt]##</activiti:string>##
[.tok-nt]#</activiti:field># [.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"language"#[.tok-nt]#>#
[.tok-nt]##<activiti:string>##juel[.tok-nt]##</activiti:string>##
[.tok-nt]#</activiti:field># [.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"payloadExpression"#[.tok-nt]#>#
[.tok-nt]#<activiti:string>#"hi"[.tok-nt]#</activiti:string>#
[.tok-nt]#</activiti:field># [.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"resultVariable"#[.tok-nt]#>#
[.tok-nt]##<activiti:string>##theVariable[.tok-nt]##</activiti:string>##
[.tok-nt]#</activiti:field># [.tok-nt]#</extensionElements>#

[[bpmnCamelTask]]
== 8.5.8. Camel Task

The Camel task allows to send messages to and receive messages from
Camel and thereby enhances the integration features of Activiti. Note
that the Camel task is *not* an _official_ task of the BPMN 2.0 spec
(and it does not have a dedicated icon as a consequence). Hence, in
Activiti the Camel task is implemented as a dedicated service task. Also
note to include the Activiti Camel module in your project to use the
Camel task functionality.

[[bpmnCamelTaskUsage]]
=== Defining a Camel Task

The Camel task is implemented as a dedicated
link:#bpmnJavaServiceTask[Service Task] and is defined by setting
_'camel'_ for the _type_ of the service task.

[source,pygments,highlight]
----
1
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"sendCamel"#
[.tok-na]#activiti:type=#[.tok-s]#"camel"#[.tok-nt]#>#

The process definition itself needs nothing else then the camel type
definition on a service task. The integration logic is all delegated to
the Camel container. By default the Activiti Engine looks for a
camelContext bean in the Spring container. The camelContext bean defines
the Camel routes that will be loaded by the Camel container. In the
following example the routes are loaded from a specific Java package,
but you can also define routes directly in the Spring configuration
itself.

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<camelContext# [.tok-na]#id=#[.tok-s]#"camelContext"#
[.tok-na]#xmlns=#[.tok-s]#"http://camel.apache.org/schema/spring"#[.tok-nt]#>#
[.tok-nt]#<packageScan>#
[.tok-nt]##<package>##org.activiti.camel.route[.tok-nt]##</package>##
[.tok-nt]#</packageScan># [.tok-nt]#</camelContext>#

For more documentation about Camel routes you can look on the
http://camel.apache.org/[Camel website]. The basic concepts are
demonstrated through a few small samples here in this document. In the
first sample, we will do the simplest form of Camel call from an
Activiti workflow. Let’s call it SimpleCamelCall.

If you want to define multiple Camel context beans and/or want to use a
different bean name, this can be overridden on the Camel task definition
like this:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"serviceTask1"#
[.tok-na]#activiti:type=#[.tok-s]#"camel"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"camelContext"#
[.tok-na]#stringValue=#[.tok-s]#"customCamelContext"# [.tok-nt]#/>#
[.tok-nt]#</extensionElements># [.tok-nt]#</serviceTask>#

[[bpmnCamelTaskSimpleCamelCall]]
== Simple Camel Call example

All the files related to this example can be found in
org.activiti.camel.examples.simpleCamelCall package of activiti-camel
module. The target is simply activating a specific camel route. First of
all we need an Spring context which contains the introduction to the
routes as mentioned previously. This part of the file serves this
purpose:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<camelContext# [.tok-na]#id=#[.tok-s]#"camelContext"#
[.tok-na]#xmlns=#[.tok-s]#"http://camel.apache.org/schema/spring"#[.tok-nt]#>#
[.tok-nt]#<packageScan>#
[.tok-nt]##<package>##org.activiti.camel.examples.simpleCamelCall[.tok-nt]##</package>##
[.tok-nt]#</packageScan># [.tok-nt]#</camelContext>#

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#SimpleCamelCallRoute#
[.tok-kd]#extends# [.tok-n]#RouteBuilder# [.tok-o]#\{#
[.tok-nd]#@Override# [.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#configure#[.tok-o]#()# [.tok-kd]#throws# [.tok-n]#Exception#
[.tok-o]#\{#
[.tok-n]#from#[.tok-o]#(#[.tok-s]#"activiti:SimpleCamelCallProcess:simpleCall"#[.tok-o]#).#[.tok-na]#to#[.tok-o]#(#[.tok-s]#"log:org.activiti.camel.examples.SimpleCamelCall"#[.tok-o]#);#
[.tok-o]#}# [.tok-o]#}#

The route just logs the message body and nothing more. Notice the format
of the from endpoint. It is consisted of three parts:

[width="100%",cols="50%,50%",options="header",]
|===
|Endpoint Url Part |Description
|activiti |refers to Activiti endpoint
|SimpleCamelCallProcess |name of the process
|simpleCall |name of the Camel service in the process
|===

Ok, our route is now properly configured and accessible to the Camel.
Now comes the workflow part. The workflow looks like:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-nt]#<process#
[.tok-na]#id=#[.tok-s]#"SimpleCamelCallProcess"#[.tok-nt]#>#
[.tok-nt]#<startEvent# [.tok-na]#id=#[.tok-s]#"start"#[.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow1"#
[.tok-na]#sourceRef=#[.tok-s]#"start"#
[.tok-na]#targetRef=#[.tok-s]#"simpleCall"#[.tok-nt]#/>#
[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"simpleCall"#
[.tok-na]#activiti:type=#[.tok-s]#"camel"#[.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow2"#
[.tok-na]#sourceRef=#[.tok-s]#"simpleCall"#
[.tok-na]#targetRef=#[.tok-s]#"end"#[.tok-nt]#/># [.tok-nt]#<endEvent#
[.tok-na]#id=#[.tok-s]#"end"#[.tok-nt]#/># [.tok-nt]#</process>#

[[bpmnCamelTaskPingPong]]
== Ping Pong example

Our example worked but nothing is really transferred between Camel and
Activiti and there is not much merit in it. In this example we try to
send and receive data to and from Camel. We send a string, camel
concatenates something to it and returns back the result. The sender
part is trivial, we send our message in form of a variable to Camel
Task. Here is our caller code:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
----

[.tok-nd]#@Deployment# [.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#testPingPong#[.tok-o]#()# [.tok-o]#\{#
[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#># [.tok-n]#variables# [.tok-o]#=#
[.tok-k]#new# [.tok-n]#HashMap#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#>();#
[.tok-n]#variables#[.tok-o]#.#[.tok-na]#put#[.tok-o]#(#[.tok-s]#"input"#[.tok-o]#,#
[.tok-s]#"Hello"#[.tok-o]#);#
[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#String#[.tok-o]#># [.tok-n]#outputMap# [.tok-o]#=#
[.tok-k]#new# [.tok-n]#HashMap#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#String#[.tok-o]#>();#
[.tok-n]#variables#[.tok-o]#.#[.tok-na]#put#[.tok-o]#(#[.tok-s]#"outputMap"#[.tok-o]#,#
[.tok-n]#outputMap#[.tok-o]#);#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#startProcessInstanceByKey#[.tok-o]#(#[.tok-s]#"PingPongProcess"#[.tok-o]#,#
[.tok-n]#variables#[.tok-o]#);#
[.tok-n]#assertEquals#[.tok-o]#(#[.tok-mi]#1#[.tok-o]#,#
[.tok-n]#outputMap#[.tok-o]#.#[.tok-na]#size#[.tok-o]#());#
[.tok-n]#assertNotNull#[.tok-o]#(#[.tok-n]#outputMap#[.tok-o]#.#[.tok-na]#get#[.tok-o]#(#[.tok-s]#"outputValue"#[.tok-o]#));#
[.tok-n]#assertEquals#[.tok-o]#(#[.tok-s]#"Hello World"#[.tok-o]#,#
[.tok-n]#outputMap#[.tok-o]#.#[.tok-na]#get#[.tok-o]#(#[.tok-s]#"outputValue"#[.tok-o]#));#
[.tok-o]#}#

The variable "input" is actually the input for the Camel route and
outputMap is there to capture the result back from Camel. The process
should be something like this:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-nt]#<process#
[.tok-na]#id=#[.tok-s]#"PingPongProcess"#[.tok-nt]#>#
[.tok-nt]#<startEvent# [.tok-na]#id=#[.tok-s]#"start"#[.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow1"#
[.tok-na]#sourceRef=#[.tok-s]#"start"#
[.tok-na]#targetRef=#[.tok-s]#"ping"#[.tok-nt]#/>#
[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"ping"#
[.tok-na]#activiti:type=#[.tok-s]#"camel"#[.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow2"#
[.tok-na]#sourceRef=#[.tok-s]#"ping"#
[.tok-na]#targetRef=#[.tok-s]#"saveOutput"#[.tok-nt]#/>#
[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"saveOutput"#
[.tok-na]#activiti:class=#[.tok-s]#"org.activiti.camel.examples.pingPong.SaveOutput"#
[.tok-nt]#/># [.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow3"#
[.tok-na]#sourceRef=#[.tok-s]#"saveOutput"#
[.tok-na]#targetRef=#[.tok-s]#"end"#[.tok-nt]#/># [.tok-nt]#<endEvent#
[.tok-na]#id=#[.tok-s]#"end"#[.tok-nt]#/># [.tok-nt]#</process>#

Note that SaveOutput Service task, stores the value of "Output" variable
from context to the previously mentioned OutputMap. Now we have to know
how the variables are send to Camel and returned back. Here comes the
notion of Camel behaviour into the play. The way variables are
communicated to Camel is configurable via CamelBehavior. Here we use
Default one in our sample, a short description of the other ones comes
afterwards. With such a code you can configure the desired camel
behaviour:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"serviceTask1"#
[.tok-na]#activiti:type=#[.tok-s]#"camel"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"camelBehaviorClass"#
[.tok-na]#stringValue=#[.tok-s]#"org.activiti.camel.impl.CamelBehaviorCamelBodyImpl"#
[.tok-nt]#/># [.tok-nt]#</extensionElements># [.tok-nt]#</serviceTask>#

If you do not specify and specific behaviour then,
org.activiti.camel.impl.CamelBehaviorDefaultImpl will be set. This
behaviour copies the variables to Camel properties of the same name. In
return regardless of selected behaviour, if the camel message body is a
map, then each of its elements is copied as a variable, else the whole
object is copied into a specific variable with the name of "camelBody".
Knowing that, this camel route concludes our second example:

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-nd]#@Override# [.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#configure#[.tok-o]#()# [.tok-kd]#throws# [.tok-n]#Exception#
[.tok-o]#\{#
[.tok-n]#from#[.tok-o]#(#[.tok-s]#"activiti:PingPongProcess:ping"#[.tok-o]#).#[.tok-na]#transform#[.tok-o]#().#[.tok-na]#simple#[.tok-o]#(#[.tok-s]#"$\{property.input}
World"#[.tok-o]#);# [.tok-o]#}#

In this route, the string "world" is concatenated to the end of property
named "input" and the result will be in the message body. It is
accessible by checking "camelBody" variable in the java service task and
copied to "outputMap" and checked in test case. Now that the example on
its default behaviour works, lets see what are the other possibilities.
In starting every camel route, the Process Instance ID will be copied
into a camel property with the specific name of "PROCESS_ID_PROPERTY".
It is later used for correlating the process instance and camel route.
Also it can be exploited in the Camel route.

There are three different behaviours already available out of the box in
Activiti. The behaviour can be overwritten by a specific phrase in the
route URL. Here is an example of overriding the already defined
behaviour in URL:

[source,pygments,highlight]
----
1
----

[.tok-n]#from#[.tok-o]#(#[.tok-s]#"activiti:asyncCamelProcess:serviceTaskAsync2?copyVariablesToProperties=true"#[.tok-o]#).#

the following table provides an overview of three available camel
behaviours:

[width="100%",cols="34%,33%,33%",options="header",]
|===
|Behaviour |In Url |Description
|CamelBehaviorDefaultImpl |copyVariablesToProperties |Copy Activiti
variables as Camel properties

|CamelBehaviorCamelBodyImpl |copyCamelBodyToBody |Copy only Activiti
variable named "camelBody" as camel message body

|CamelBehaviorBodyAsMapImpl |copyVariablesToBodyAsMap |Copy all the
Activiti variables in a map as Camel message body
|===

The above table explains how Activiti variables are going to be
transferred to Camel. The following table explains how the Camel
variables are returned back to Activiti. This can only be configured in
route URLs.

[width="100%",cols="50%,50%",options="header",]
|===
|Url |Description
|Default |If Camel body is a map, copy each element as Activiti
variable, otherwise copy the whole Camel body as "camelBody" Activiti
variable

|copyVariablesFromProperties |Copy Camel properties as Activiti
variables of the same name

|copyCamelBodyToBodyAsString |like default, but if camel Body is not a
map, first convert it to String and then copy it in "camelBody"

|copyVariablesFromHeader |Additionally copy camel headers to Activiti
variables of the same names
|===

[[_returning_back_the_variables]]
== Returning back the variables

What is mentioned above about passing variables, only holds for start
side of the variable transfer, in both directions from Camel to Activiti
and vice versa. +
It is important to notice that because of special non blocking behavior
of Activiti, variables are not automatically returned back from Activiti
to Camel. For that to happen, a special syntax is available. There can
be one or more parameters in Camel route URL in format of
`var.return.someVariableName`. All variables having a name equal to one
of these parameters without `var.return` part, will be considered as
output variables and will be copied back as camel properties with the
same names. +
For example in a route like:

....
from("direct:start").to("activiti:process?var.return.exampleVar").to("mock:result");
....

Activiti variable with the name of `exampleVar` will be considered as
output variable and will be copied back as a property in camel with the
same name.

[[bpmnCamelTaskAsyncPingPong]]
== Asynchronous Ping Pong example

Previous examples were all synchronous. The workflow stops, until the
camel route is concluded and returned. In some cases, we might need the
Activiti workflow to continue. For such purposes the asynchronous
capability of the Camel service task is useful. You can make use of this
feature by setting the async property of the Camel service task to true.

[source,pygments,highlight]
----
1
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"serviceAsyncPing"#
[.tok-na]#activiti:type=#[.tok-s]#"camel"#
[.tok-na]#activiti:async=#[.tok-s]#"true"#[.tok-nt]#/>#

By setting this feature the specified Camel route is activated
asynchronously by the Activiti job executor. When you define a queue in
the Camel route the Activiti process will continue with the activities
after the Camel service task. The Camel route will be executed fully
asynchronously from the process execution. If you want to wait for a
response of the Camel service task somewhere in your process definition,
you can use a receive task.

[source,pygments,highlight]
----
1
----

[.tok-nt]#<receiveTask# [.tok-na]#id=#[.tok-s]#"receiveAsyncPing"#
[.tok-na]#name=#[.tok-s]#"Wait State"# [.tok-nt]#/>#

The process instance will wait until a signal is received, for example
from Camel. In Camel you can send a signal to the process instance by
sending a message to the proper Activiti endpoint.

[source,pygments,highlight]
----
1
----

[.tok-n]#from#[.tok-o]#(#[.tok-s]#"activiti:asyncPingProcess:serviceAsyncPing"#[.tok-o]#).#[.tok-na]#to#[.tok-o]#(#[.tok-s]#"activiti:asyncPingProcess:receiveAsyncPing"#[.tok-o]#);#

* constant string "activiti"
* process name
* receive task name

[[bpmnCamelTaskAsyncPingPong]]
== Instantiate workflow from Camel route

In our all previous examples Activiti workflow started first and the
Camel route was started within workflow. It is also possible from the
other side. It is possible that a workflow is instantiated from an
already started camel route. It is very similar to signalling receive
task, except that the last part is not there. Here is a sample route:

[source,pygments,highlight]
----
1
----

[.tok-n]#from#[.tok-o]#(#[.tok-s]#"direct:start"#[.tok-o]#).#[.tok-na]#to#[.tok-o]#(#[.tok-s]#"activiti:camelProcess"#[.tok-o]#);#

as you see the url has two parts, the first is constant string
"activiti" and the second name is the name of the process. Obviously the
process should already be deployed and startable by engine
configuration.

It is also possible to set the initiator of the process to some
authenticated user id that is provided in a Camel header. To achieve
this first of all an initiator variable must be specified in the process
definition:

[source,pygments,highlight]
----
1
----

[.tok-nt]#<startEvent# [.tok-na]#id=#[.tok-s]#"start"#
[.tok-na]#activiti:initiator=#[.tok-s]#"initiator"# [.tok-nt]#/>#

Then given that the user id is contained in a Camel header named
_CamelProcessInitiatorHeader_ the Camel route could be defined as
follows:

[source,pygments,highlight]
----
1
2
3
----

[.tok-n]#from#[.tok-o]#(#[.tok-s]#"direct:startWithInitiatorHeader"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#setHeader#[.tok-o]#(#[.tok-s]#"CamelProcessInitiatorHeader"#[.tok-o]#,#
[.tok-n]#constant#[.tok-o]#(#[.tok-s]#"kermit"#[.tok-o]#))#
[.tok-o]#.#[.tok-na]#to#[.tok-o]#(#[.tok-s]#"activiti:InitiatorCamelCallProcess?processInitiatorHeaderName=CamelProcessInitiatorHeader"#[.tok-o]#);#

[[bpmnManualTask]]
== 8.5.9. Manual Task

[[bpmnManualTaskDescription]]
=== Description

A _Manual Task_ defines a task that is external to the BPM engine. It is
used to model work that is done by somebody, which the engine does not
need to know of, nor is there a system or UI interface. For the engine,
a manual task is handled as a *pass-through activity*, automatically
continuing the process from the moment process execution arrives into
it.

[[bpmnManualTaskGraphicalNotation]]
=== Graphical Notation

A manual task is visualized as a rounded rectangle, with a little _hand_
icon in the upper left corner

image:images/bpmn.manual.task.png[bpmn.manual.task]

[[bpmnManualTaskXml]]
=== XML representation

[source,pygments,highlight]
----
1
----

[.tok-nt]#<manualTask# [.tok-na]#id=#[.tok-s]#"myManualTask"#
[.tok-na]#name=#[.tok-s]#"Call client for more information"#
[.tok-nt]#/>#

[[bpmnReceiveTask]]
== 8.5.10. Java Receive Task

[[bpmnReceiveTaskDescription]]
=== Description

A Receive Task is a simple task that waits for the arrival of a certain
message. Currently, we have only implemented Java semantics for this
task. When process execution arrives at a Receive Task, the process
state is committed to the persistence store. This means that the process
will stay in this wait state, until a specific message is received by
the engine, which triggers the continuation of the process past the
Receive Task.

[[_graphical_notation_2]]
=== Graphical notation

A Receive Task is visualized as a task (rounded rectangle) with a
message icon in the top left corner. The message is white (a black
message icon would have send semantics)

image:images/bpmn.receive.task.png[bpmn.receive.task]

[[_xml_representation_2]]
=== XML representation

[source,pygments,highlight]
----
1
----

[.tok-nt]#<receiveTask# [.tok-na]#id=#[.tok-s]#"waitState"#
[.tok-na]#name=#[.tok-s]#"wait"# [.tok-nt]#/>#

To continue a process instance that is currently waiting at such a
Receive Task, the _runtimeService.signal(executionId)_ must be called
using the id of the execution that arrived in the Receive Task. The
following code snippet shows how this works in practice:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
----

[.tok-n]#ProcessInstance# [.tok-n]#pi# [.tok-o]#=#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#startProcessInstanceByKey#[.tok-o]#(#[.tok-s]#"receiveTask"#[.tok-o]#);#
[.tok-n]#Execution# [.tok-n]#execution# [.tok-o]#=#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#createExecutionQuery#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#processInstanceId#[.tok-o]#(#[.tok-n]#pi#[.tok-o]#.#[.tok-na]#getId#[.tok-o]#())#
[.tok-o]#.#[.tok-na]#activityId#[.tok-o]#(#[.tok-s]#"waitState"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#singleResult#[.tok-o]#();#
[.tok-n]#assertNotNull#[.tok-o]#(#[.tok-n]#execution#[.tok-o]#);#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#signal#[.tok-o]#(#[.tok-n]#execution#[.tok-o]#.#[.tok-na]#getId#[.tok-o]#());#

[[bpmnShellTask]]
== 8.5.11. Shell Task

[[bpmnShellTaskDescription]]
=== Description

The shell task allows to run shell scripts and commands. Note that the
Shell task is *not* an _official_ task of BPMN 2.0 spec (and it does not
have a dedicated icon as a consequence).

[[bpmnShellTaskUsage]]
=== Defining a shell task

The shell task is implemented as a dedicated
link:#bpmnJavaServiceTask[Service Task] and is defined by setting
_'shell'_ for the _type_ of the service task.

[source,pygments,highlight]
----
1
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"shellEcho"#
[.tok-na]#activiti:type=#[.tok-s]#"shell"#[.tok-nt]#>#

The Shell task is configured by link:#serviceTaskFieldInjection[field
injection]. All the values for these properties can contain EL
expression, which are resolved at runtime during process execution.
Following properties could be set:

[width="100%",cols="20%,20%,20%,20%,20%",options="header",]
|===
|Property |Required? |Type |Description |Default
|command |yes |String |Shell command to execute. |

|arg0-5 |no |String |Parameter 0 to Parameter 5 |

|wait |no |true/false |wait if necessary, until the shell process has
terminated. |true

|redirectError |no |true/false |Merge standard error with the standard
output. |false

|cleanEnv |no |true/false |Shell process does not inherit current
environment. |false

|outputVariable |no |String |Name of variable to contain the output
|Output is not recorded.

|errorCodeVariable |no |String |Name of variable to contain result error
code |Error level is not registered.

|directory |no |String |Default directory of shell process |Current
directory
|===

[[bpmnShellTaskExampleUsage]]
== Example usage

The following XML snippet shows an example of using the shell Task. It
runs shell script "cmd /c echo EchoTest", waits for it to be terminated
and puts the result in resultVar

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"shellEcho"#
[.tok-na]#activiti:type=#[.tok-s]#"shell"# [.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"command"#
[.tok-na]#stringValue=#[.tok-s]#"cmd"# [.tok-nt]#/>#
[.tok-nt]#<activiti:field# [.tok-na]#name=#[.tok-s]#"arg1"#
[.tok-na]#stringValue=#[.tok-s]#"/c"# [.tok-nt]#/>#
[.tok-nt]#<activiti:field# [.tok-na]#name=#[.tok-s]#"arg2"#
[.tok-na]#stringValue=#[.tok-s]#"echo"# [.tok-nt]#/>#
[.tok-nt]#<activiti:field# [.tok-na]#name=#[.tok-s]#"arg3"#
[.tok-na]#stringValue=#[.tok-s]#"EchoTest"# [.tok-nt]#/>#
[.tok-nt]#<activiti:field# [.tok-na]#name=#[.tok-s]#"wait"#
[.tok-na]#stringValue=#[.tok-s]#"true"# [.tok-nt]#/>#
[.tok-nt]#<activiti:field# [.tok-na]#name=#[.tok-s]#"outputVariable"#
[.tok-na]#stringValue=#[.tok-s]#"resultVar"# [.tok-nt]#/>#
[.tok-nt]#</extensionElements># [.tok-nt]#</serviceTask>#

[[executionListeners]]
== 8.5.12. Execution listener

*Compatibility note*: After releasing 5.3, we discovered that execution
listeners and task listeners and expressions were still in non-public
API. Those classes were in subpackages of `org.activiti.engine.impl…​`,
which has `impl` in it).
`org.activiti.engine.impl.pvm.delegate.ExecutionListener`,
`org.activiti.engine.impl.pvm.delegate.TaskListener` and
`org.activiti.engine.impl.pvm.el.Expression` have been deprecated. From
now on, you should use `org.activiti.engine.delegate.ExecutionListener`,
`org.activiti.engine.delegate.TaskListener` and
`org.activiti.engine.delegate.Expression`. In the new publicly available
API, access to `ExecutionListenerExecution.getEventSource()` has been
removed. Apart from the deprecation compiler warning, the existing code
should run fine. But consider switching to the new public API interfaces
(without .impl. in the package name).

Execution listeners allow you to execute external Java code or evaluate
an expression when certain events occur during process execution. The
events that can be captured are:

* Start and ending of a process instance.
* Taking a transition.
* Start and ending of an activity.
* Start and ending of a gateway.
* Start and ending of intermediate events.
* Ending a start event or starting an end event.

The following process definition contains 3 execution listeners:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
----

[.tok-nt]#<process#
[.tok-na]#id=#[.tok-s]#"executionListenersProcess"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:executionListener#
[.tok-na]#class=#[.tok-s]#"org.activiti.examples.bpmn.executionlistener.ExampleExecutionListenerOne"#
[.tok-na]#event=#[.tok-s]#"start"# [.tok-nt]#/>#
[.tok-nt]#</extensionElements># [.tok-nt]#<startEvent#
[.tok-na]#id=#[.tok-s]#"theStart"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#sourceRef=#[.tok-s]#"theStart"#
[.tok-na]#targetRef=#[.tok-s]#"firstTask"# [.tok-nt]#/>#
[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"firstTask"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#sourceRef=#[.tok-s]#"firstTask"#
[.tok-na]#targetRef=#[.tok-s]#"secondTask"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:executionListener#
[.tok-na]#class=#[.tok-s]#"org.activiti.examples.bpmn.executionListener.ExampleExecutionListenerTwo"#
[.tok-nt]#/># [.tok-nt]#</extensionElements># [.tok-nt]#</sequenceFlow>#
[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"secondTask"# [.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:executionListener#
[.tok-na]#expression=#[.tok-s]#"$\{myPojo.myMethod(execution.event)}"#
[.tok-na]#event=#[.tok-s]#"end"# [.tok-nt]#/>#
[.tok-nt]#</extensionElements># [.tok-nt]#</userTask>#
[.tok-nt]#<sequenceFlow# [.tok-na]#sourceRef=#[.tok-s]#"secondTask"#
[.tok-na]#targetRef=#[.tok-s]#"thirdTask"# [.tok-nt]#/>#
[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"thirdTask"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#sourceRef=#[.tok-s]#"thirdTask"#
[.tok-na]#targetRef=#[.tok-s]#"theEnd"# [.tok-nt]#/>#
[.tok-nt]#<endEvent# [.tok-na]#id=#[.tok-s]#"theEnd"# [.tok-nt]#/>#
[.tok-nt]#</process>#

The first execution listener is notified when the process starts. The
listener is an external Java-class (like `ExampleExecutionListenerOne`)
and should implement `org.activiti.engine.delegate.ExecutionListener`
interface. When the event occurs (in this case `end` event) the method
`notify(ExecutionListenerExecution execution)` is called.

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-kd]#public# [.tok-kd]#class#
[.tok-nc]#ExampleExecutionListenerOne# [.tok-kd]#implements#
[.tok-n]#ExecutionListener# [.tok-o]#\{# [.tok-kd]#public#
[.tok-kt]#void#
[.tok-nf]#notify#[.tok-o]#(#[.tok-n]#ExecutionListenerExecution#
[.tok-n]#execution#[.tok-o]#)# [.tok-kd]#throws# [.tok-n]#Exception#
[.tok-o]#\{#
[.tok-n]#execution#[.tok-o]#.#[.tok-na]#setVariable#[.tok-o]#(#[.tok-s]#"variableSetInExecutionListener"#[.tok-o]#,#
[.tok-s]#"firstValue"#[.tok-o]#);#
[.tok-n]#execution#[.tok-o]#.#[.tok-na]#setVariable#[.tok-o]#(#[.tok-s]#"eventReceived"#[.tok-o]#,#
[.tok-n]#execution#[.tok-o]#.#[.tok-na]#getEventName#[.tok-o]#());#
[.tok-o]#}# [.tok-o]#}#

It is also possible to use a delegation class that implements the
`org.activiti.engine.delegate.JavaDelegate` interface. These delegation
classes can then be reused in other constructs, such as a delegation for
a serviceTask.

The second execution listener is called when the transition is taken.
Note that the `listener` element doesn’t define an `event`, since only
`take` events are fired on transitions. *Values in the `event` attribute
are ignored when a listener is defined on a transition.*

The last execution listener is called when activity `secondTask` ends.
Instead of using the `class` on the listener declaration, a `expression`
is defined instead which is evaluated/invoked when the event is fired.

[source,pygments,highlight]
----
1
----

[.tok-nt]#<activiti:executionListener#
[.tok-na]#expression=#[.tok-s]#"$\{myPojo.myMethod(execution.eventName)}"#
[.tok-na]#event=#[.tok-s]#"end"# [.tok-nt]#/>#

As with other expressions, execution variables are resolved and can be
used. Because the execution implementation object has a property that
exposes the event name, it’s possible to pass the event-name to your
methods using `execution.eventName`.

Execution listeners also support using a `delegateExpression`,
link:#bpmnJavaServiceTaskXML[similar to a service task].

[source,pygments,highlight]
----
1
----

[.tok-nt]#<activiti:executionListener#
[.tok-na]#event=#[.tok-s]#"start"#
[.tok-na]#delegateExpression=#[.tok-s]#"$\{myExecutionListenerBean}"#
[.tok-nt]#/>#

In Activiti 5.12 we also introduced a new type of execution listener,
the org.activiti.engine.impl.bpmn.listener.ScriptExecutionListener. This
script execution listener allows you to execute a piece of script logic
for an execution listener event.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
----

[.tok-nt]#<activiti:executionListener#
[.tok-na]#event=#[.tok-s]#"start"#
[.tok-na]#class=#[.tok-s]#"org.activiti.engine.impl.bpmn.listener.ScriptExecutionListener"#
[.tok-nt]#># [.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"script"#[.tok-nt]#>#
[.tok-nt]#<activiti:string># def bar = "BAR"; // local variable foo =
"FOO"; // pushes variable to execution context
execution.setVariable("var1", "test"); // test access to execution
instance bar // implicit return value [.tok-nt]#</activiti:string>#
[.tok-nt]#</activiti:field># [.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"language"#
[.tok-na]#stringValue=#[.tok-s]#"groovy"# [.tok-nt]#/>#
[.tok-nt]#<activiti:field# [.tok-na]#name=#[.tok-s]#"resultVariable"#
[.tok-na]#stringValue=#[.tok-s]#"myVar"# [.tok-nt]#/>#
[.tok-nt]#</activiti:executionListener>#

[[executionListenerFieldInjection]]
== Field injection on execution listeners

When using an execution listener that is configured with the `class`
attribute, field injection can be applied. This is exactly the same
mechanism as used link:#serviceTaskFieldInjection[Service task field
injection], which contains an overview of the possibilities provided by
field injection.

The fragment below shows a simple example process with an execution
listener with fields injected.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
----

[.tok-nt]#<process#
[.tok-na]#id=#[.tok-s]#"executionListenersProcess"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:executionListener#
[.tok-na]#class=#[.tok-s]#"org.activiti.examples.bpmn.executionListener.ExampleFieldInjectedExecutionListener"#
[.tok-na]#event=#[.tok-s]#"start"#[.tok-nt]#>#
[.tok-nt]#<activiti:field# [.tok-na]#name=#[.tok-s]#"fixedValue"#
[.tok-na]#stringValue=#[.tok-s]#"Yes, I am "# [.tok-nt]#/>#
[.tok-nt]#<activiti:field# [.tok-na]#name=#[.tok-s]#"dynamicValue"#
[.tok-na]#expression=#[.tok-s]#"$\{myVar}"# [.tok-nt]#/>#
[.tok-nt]#</activiti:executionListener># [.tok-nt]#</extensionElements>#
[.tok-nt]#<startEvent# [.tok-na]#id=#[.tok-s]#"theStart"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#sourceRef=#[.tok-s]#"theStart"#
[.tok-na]#targetRef=#[.tok-s]#"firstTask"# [.tok-nt]#/>#
[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"firstTask"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#sourceRef=#[.tok-s]#"firstTask"#
[.tok-na]#targetRef=#[.tok-s]#"theEnd"# [.tok-nt]#/>#
[.tok-nt]#<endEvent# [.tok-na]#id=#[.tok-s]#"theEnd"# [.tok-nt]#/>#
[.tok-nt]#</process>#

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
----

[.tok-kd]#public# [.tok-kd]#class#
[.tok-nc]#ExampleFieldInjectedExecutionListener# [.tok-kd]#implements#
[.tok-n]#ExecutionListener# [.tok-o]#\{# [.tok-kd]#private#
[.tok-n]#Expression# [.tok-n]#fixedValue#[.tok-o]#;# [.tok-kd]#private#
[.tok-n]#Expression# [.tok-n]#dynamicValue#[.tok-o]#;# [.tok-kd]#public#
[.tok-kt]#void#
[.tok-nf]#notify#[.tok-o]#(#[.tok-n]#ExecutionListenerExecution#
[.tok-n]#execution#[.tok-o]#)# [.tok-kd]#throws# [.tok-n]#Exception#
[.tok-o]#\{#
[.tok-n]#execution#[.tok-o]#.#[.tok-na]#setVariable#[.tok-o]#(#[.tok-s]#"var"#[.tok-o]#,#
[.tok-n]#fixedValue#[.tok-o]#.#[.tok-na]#getValue#[.tok-o]#(#[.tok-n]#execution#[.tok-o]#).#[.tok-na]#toString#[.tok-o]#()#
[.tok-o]#+#
[.tok-n]#dynamicValue#[.tok-o]#.#[.tok-na]#getValue#[.tok-o]#(#[.tok-n]#execution#[.tok-o]#).#[.tok-na]#toString#[.tok-o]#());#
[.tok-o]#}# [.tok-o]#}#

The class `ExampleFieldInjectedExecutionListener` concatenates the 2
injected fields (one fixed an the other dynamic) and stores this in the
process variable _`var`_.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
----

[.tok-nd]#@Deployment#[.tok-o]#(#[.tok-n]#resources# [.tok-o]#=#
[.tok-o]#\{#[.tok-s]#"org/activiti/examples/bpmn/executionListener/ExecutionListenersFieldInjectionProcess.bpmn20.xml"#[.tok-o]#})#
[.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#testExecutionListenerFieldInjection#[.tok-o]#()# [.tok-o]#\{#
[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#># [.tok-n]#variables# [.tok-o]#=#
[.tok-k]#new# [.tok-n]#HashMap#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#>();#
[.tok-n]#variables#[.tok-o]#.#[.tok-na]#put#[.tok-o]#(#[.tok-s]#"myVar"#[.tok-o]#,#
[.tok-s]#"listening!"#[.tok-o]#);# [.tok-n]#ProcessInstance#
[.tok-n]#processInstance# [.tok-o]#=#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#startProcessInstanceByKey#[.tok-o]#(#[.tok-s]#"executionListenersProcess"#[.tok-o]#,#
[.tok-n]#variables#[.tok-o]#);# [.tok-n]#Object#
[.tok-n]#varSetByListener# [.tok-o]#=#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#getVariable#[.tok-o]#(#[.tok-n]#processInstance#[.tok-o]#.#[.tok-na]#getId#[.tok-o]#(),#
[.tok-s]#"var"#[.tok-o]#);#
[.tok-n]#assertNotNull#[.tok-o]#(#[.tok-n]#varSetByListener#[.tok-o]#);#
[.tok-n]#assertTrue#[.tok-o]#(#[.tok-n]#varSetByListener#
[.tok-k]#instanceof# [.tok-n]#String#[.tok-o]#);# [.tok-c1]#// Result is
a concatenation of fixed injected field and injected expression#
[.tok-n]#assertEquals#[.tok-o]#(#[.tok-s]#"Yes, I am
listening!"#[.tok-o]#,# [.tok-n]#varSetByListener#[.tok-o]#);#
[.tok-o]#}#

Note that the same rules with regards to thread-safety apply as for
service task. Please read the
link:#serviceTaskFieldInjectionThreadSafety[relevant section] for more
information.

[[taskListeners]]
== 8.5.13. Task listener

A _task listener_ is used to execute custom Java logic or an expression
upon the occurrence of a certain task-related event.

A task listener can only be added in the process definition as a child
element of a link:#bpmnUserTask[user task]. Note that this also must
happen as a child of the _BPMN 2.0 extensionElements_ and in the
_activiti_ namespace, since a task listener is an Activiti-specific
construct.

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"myTask"#
[.tok-na]#name=#[.tok-s]#"My Task"# [.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:taskListener#
[.tok-na]#event=#[.tok-s]#"create"#
[.tok-na]#class=#[.tok-s]#"org.activiti.MyTaskCreateListener"#
[.tok-nt]#/># [.tok-nt]#</extensionElements># [.tok-nt]#</userTask>#

A _task listener_ supports following attributes:

* *event* (required): the type of task event on which the task listener
will be invoked. Possible events are
+
** *create*: occurs when the task has been created an *all task
properties are set*.
** *assignment*: occurs when the task is assigned to somebody. Note:
when process execution arrives in a userTask, first an _assignment_
event will be fired, *before* the _create_ event is fired. This might
seem an unnatural order, but the reason is pragmatic: when receiving the
_create_ event, we usually want to inspect all properties of the task
including the assignee.
** *complete*: occurs when the task is completed and just before the
task is deleted from the runtime data.
** *delete*: occurs just before the task is going to be deleted. Notice
that it will also be executed when task is normally finished via
completeTask.
* *class*: the delegation class that must be called. This class must
implement the `org.activiti.engine.delegate.TaskListener` interface.

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#MyTaskCreateListener#
[.tok-kd]#implements# [.tok-n]#TaskListener# [.tok-o]#\{#
[.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#notify#[.tok-o]#(#[.tok-n]#DelegateTask#
[.tok-n]#delegateTask#[.tok-o]#)# [.tok-o]#\{# [.tok-c1]#// Custom logic
goes here# [.tok-o]#}# [.tok-o]#}#

It is also possible to use link:#serviceTaskFieldInjection[field
injection] to pass process variables or the execution to the delegation
class. Note that an instance of the delegation class is created upon
process deployment (as is the case with any class delegation in
Activiti), which means that the instance is shared between all process
instance executions.

* *expression*: (cannot be used together with the _class_ attribute):
specifies an expression that will be executed when the event happens. It
is possible to pass the `DelegateTask` object and the name of the event
(using `task.eventName`) as parameter to the called object.

[source,pygments,highlight]
----
1
----

[.tok-o]#<#[.tok-n]#activiti#[.tok-o]#:#[.tok-n]#taskListener#
[.tok-n]#event#[.tok-o]#=#[.tok-s]#"create"#
[.tok-n]#expression#[.tok-o]#=#[.tok-s]#"$\{myObject.callMethod(task,
task.eventName)}"# [.tok-o]#/>#

* *delegateExpression* allows to specify an expression that resolves to
an object implementing the `TaskListener` interface,
link:#bpmnJavaServiceTaskXML[similar to a service task].

[source,pygments,highlight]
----
1
----

[.tok-nt]#<activiti:taskListener# [.tok-na]#event=#[.tok-s]#"create"#
[.tok-na]#delegateExpression=#[.tok-s]#"$\{myTaskListenerBean}"#
[.tok-nt]#/>#

* In Activiti 5.12 we also introduced a new type of task listener, the
org.activiti.engine.impl.bpmn.listener.ScriptTaskListener. This script
task listener allows you to execute a piece of script logic for an task
listener event.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
----

[.tok-nt]#<activiti:taskListener# [.tok-na]#event=#[.tok-s]#"complete"#
[.tok-na]#class=#[.tok-s]#"org.activiti.engine.impl.bpmn.listener.ScriptTaskListener"#
[.tok-nt]#># [.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"script"#[.tok-nt]#>#
[.tok-nt]#<activiti:string># def bar = "BAR"; // local variable foo =
"FOO"; // pushes variable to execution context task.setOwner("kermit");
// test access to task instance bar // implicit return value
[.tok-nt]#</activiti:string># [.tok-nt]#</activiti:field>#
[.tok-nt]#<activiti:field# [.tok-na]#name=#[.tok-s]#"language"#
[.tok-na]#stringValue=#[.tok-s]#"groovy"# [.tok-nt]#/>#
[.tok-nt]#<activiti:field# [.tok-na]#name=#[.tok-s]#"resultVariable"#
[.tok-na]#stringValue=#[.tok-s]#"myVar"# [.tok-nt]#/>#
[.tok-nt]#</activiti:taskListener>#

[[bpmnMultiInstance]]
== 8.5.14. Multi-instance (for each)

[[bpmnMultiInstanceDescription]]
=== Description

A _multi-instance activity_ is a way of defining repetition for a
certain step in a business process. In programming concepts, a
multi-instance matches the *for each* construct: it allows to execute a
certain step or even a complete subprocess for each item in a given
collection, *sequentially or in parallel*.

A _multi-instance_ is a regular activity that has extra properties
defined (so-called _'multi-instance_ characteristics'') which will cause
the activity to be executed multiple times at runtime. Following
activities can become a _multi-instance activity:_

* link:#bpmnUserTask[User Task]
* link:#bpmnScriptTask[Script Task]
* link:#bpmnJavaServiceTask[Java Service Task]
* link:#bpmnWebserviceTask[Web Service Task]
* link:#bpmnBusinessRuleTask[Business Rule Task]
* link:#bpmnEmailTask[Email Task]
* link:#bpmnManualTask[Manual Task]
* link:#bpmnReceiveTask[Receive Task]
* link:#bpmnSubProcess[(Embedded) Sub-Process]
* link:#bpmnCallActivity[Call Activity]

A link:#bpmnGateways[Gateway] or link:#bpmnEvents[Event] *cannot* become
multi-instance.

As required by the spec, each parent execution of the created executions
for each instance will have following variables:

* *nrOfInstances*: the total number of instances
* *nrOfActiveInstances*: the number of currently active, i.e. not yet
finished, instances. For a sequential multi-instance, this will always
be 1.
* *nrOfCompletedInstances*: the number of already completed instances.

These values can be retrieved by calling the `execution.getVariable(x)`
method.

Additionally, each of the created executions will have an
execution-local variable (i.e. not visible for the other executions, and
not stored on process instance level) :

* *loopCounter*: indicates the _index in the for-each loop_ of that
particular instance. loopCounter variable can be renamed by Activiti
*elementIndexVariable* attribute.

[[bpmnMultiInstanceGraphicalNotation]]
=== Graphical notation

If an activity is multi-instance, this is indicated by three short lines
at the bottom of that activity. Three _vertical_ lines indicates that
the instances will be executed in parallel, while three _horizontal_
lines indicate sequential execution.

image:images/bpmn.multi.instance.png[bpmn.multi.instance]

[[bpmnMultiInstanceXml]]
=== Xml representation

To make an activity multi-instance, the activity xml element must have a
`multiInstanceLoopCharacteristics` child element.

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<multiInstanceLoopCharacteristics#
[.tok-na]#isSequential=#[.tok-s]#"false|true"#[.tok-nt]#># ...
[.tok-nt]#</multiInstanceLoopCharacteristics>#

The *isSequential* attribute indicates if the instances of that activity
are executed sequentially or parallel.

The number of instances are *calculated once, when entering the
activity*. There are a few ways of configuring this. On way is directly
specifying a number, by using the *loopCardinality* child element.

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<multiInstanceLoopCharacteristics#
[.tok-na]#isSequential=#[.tok-s]#"false|true"#[.tok-nt]#>#
[.tok-nt]##<loopCardinality>##5[.tok-nt]##</loopCardinality>##
[.tok-nt]#</multiInstanceLoopCharacteristics>#

Expressions that resolve to a positive number are also possible:

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<multiInstanceLoopCharacteristics#
[.tok-na]#isSequential=#[.tok-s]#"false|true"#[.tok-nt]#>#
[.tok-nt]##<loopCardinality>##$\{nrOfOrders-nrOfCancellations}[.tok-nt]#</loopCardinality>#
[.tok-nt]#</multiInstanceLoopCharacteristics>#

Another way to define the number of instances, is to specify the name of
a process variable which is a collection using the `loopDataInputRef`
child element. For each item in the collection, an instance will be
created. Optionally, it is possible to set that specific item of the
collection for the instance using the `inputDataItem` child element.
This is shown in the following XML example:

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"miTasks"#
[.tok-na]#name=#[.tok-s]#"My Task $\{loopCounter}"#
[.tok-na]#activiti:assignee=#[.tok-s]#"$\{assignee}"#[.tok-nt]#>#
[.tok-nt]#<multiInstanceLoopCharacteristics#
[.tok-na]#isSequential=#[.tok-s]#"false"#[.tok-nt]#>#
[.tok-nt]##<loopDataInputRef>##assigneeList[.tok-nt]##</loopDataInputRef>##
[.tok-nt]#<inputDataItem# [.tok-na]#name=#[.tok-s]#"assignee"#
[.tok-nt]#/># [.tok-nt]#</multiInstanceLoopCharacteristics>#
[.tok-nt]#</userTask>#

Suppose the variable `assigneeList` contains the values
`\[kermit, gonzo, fozzie\]`. In the snippet above, three user tasks will
be created in parallel. Each of the executions will have a process
variable named `assignee` containing one value of the collection, which
is used to assign the user task in this example.

The downside of the `loopDataInputRef` and `inputDataItem` is that 1)
the names are pretty hard to remember and 2) due to the BPMN 2.0 schema
restrictions they can’t contain expressions. Activiti solves this by
offering the *collection* and *elementVariable* attributes on the
`multiInstanceCharacteristics`:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"miTasks"#
[.tok-na]#name=#[.tok-s]#"My Task"#
[.tok-na]#activiti:assignee=#[.tok-s]#"$\{assignee}"#[.tok-nt]#>#
[.tok-nt]#<multiInstanceLoopCharacteristics#
[.tok-na]#isSequential=#[.tok-s]#"true"#
[.tok-na]#activiti:collection=#[.tok-s]#"$\{myService.resolveUsersForTask()}"#
[.tok-na]#activiti:elementVariable=#[.tok-s]#"assignee"# [.tok-nt]#>#
[.tok-nt]#</multiInstanceLoopCharacteristics># [.tok-nt]#</userTask>#

A multi-instance activity ends when all instances are finished. However,
it is possible to specify an expression that is evaluated every time one
instance ends. When this expression evaluates to true, all remaining
instances are destroyed and the multi-instance activity ends, continuing
the process. Such an expression must be defined in the
*completionCondition* child element.

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"miTasks"#
[.tok-na]#name=#[.tok-s]#"My Task"#
[.tok-na]#activiti:assignee=#[.tok-s]#"$\{assignee}"#[.tok-nt]#>#
[.tok-nt]#<multiInstanceLoopCharacteristics#
[.tok-na]#isSequential=#[.tok-s]#"false"#
[.tok-na]#activiti:collection=#[.tok-s]#"assigneeList"#
[.tok-na]#activiti:elementVariable=#[.tok-s]#"assignee"# [.tok-nt]#>#
[.tok-nt]##<completionCondition>##$\{nrOfCompletedInstances/nrOfInstances
>= 0.6 }[.tok-nt]#</completionCondition>#
[.tok-nt]#</multiInstanceLoopCharacteristics># [.tok-nt]#</userTask>#

In this example, there will be parallel instances created for each
element of the `assigneeList` collection. However, when 60% of the tasks
are completed, the other tasks are deleted and the process continues.

[[bpmnMultiInstanceBoundaryEvent]]
== Boundary events and multi-instance

Since a multi-instance is a regular activity, it is possible to define a
link:#bpmnBoundaryEvent[boundary event] on its boundary. In case of an
interrupting boundary event, when the event is caught, *all instances*
that are still active will be destroyed. Take for example following
multi-instance subprocess:

image:images/bpmn.multi.instance.boundary.event.png[bpmn.multi.instance.boundary.event]

Here, all instances of the subprocess will be destroyed when the timer
fires, regardless of how many instances there are or which inner
activities are currently not yet completed.

[[bpmnCompensationHandlers]]
== Multi instance and execution listeners

(Valid for Activiti 5.18 and up)

There is a caveat when using execution listeners in combination with
multi instance. Take for example the following snippet of BPMN 2.0 xml,
which is defined on the same level as the
_multiInstanceLoopCharacteristics_ xml element is set:

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:executionListener#
[.tok-na]#event=#[.tok-s]#"start"#
[.tok-na]#class=#[.tok-s]#"org.activiti.MyStartListener"#[.tok-nt]#/>#
[.tok-nt]#<activiti:executionListener# [.tok-na]#event=#[.tok-s]#"end"#
[.tok-na]#class=#[.tok-s]#"org.activiti.MyEndListener"#[.tok-nt]#/>#
[.tok-nt]#</extensionElements>#

For a normal BPMN activity, there would be an invocation of these
listeners when the activity is started and ended.

However, when the activity is multi instance, the behavior is different:

* When the multi instance activity is entered, before any of the _inner_
activities is executed, a start event is thrown. The _loopCounter_
variable is not yet set (is null).
* For each of the actual activities visited, a start event is thrown.
The _loopCounter_ variable is set.

The same reasoning applies for the end event:

* When the actual activity is left, an end even is thrown. The
_loopCounter_ variable is set.
* When the multi instance activity has finished as a whole, an end event
is thrown. The _loopCounter_ variable is not set.

For example:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
----

[.tok-nt]#<subProcess# [.tok-na]#id=#[.tok-s]#"subprocess1"#
[.tok-na]#name=#[.tok-s]#"Sub Process"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:executionListener#
[.tok-na]#event=#[.tok-s]#"start"#
[.tok-na]#class=#[.tok-s]#"org.activiti.MyStartListener"#[.tok-nt]#/>#
[.tok-nt]#<activiti:executionListener# [.tok-na]#event=#[.tok-s]#"end"#
[.tok-na]#class=#[.tok-s]#"org.activiti.MyEndListener"#[.tok-nt]#/>#
[.tok-nt]#</extensionElements>#
[.tok-nt]#<multiInstanceLoopCharacteristics#
[.tok-na]#isSequential=#[.tok-s]#"false"#[.tok-nt]#>#
[.tok-nt]##<loopDataInputRef>##assignees[.tok-nt]##</loopDataInputRef>##
[.tok-nt]#<inputDataItem#
[.tok-na]#name=#[.tok-s]#"assignee"#[.tok-nt]#></inputDataItem>#
[.tok-nt]#</multiInstanceLoopCharacteristics># [.tok-nt]#<startEvent#
[.tok-na]#id=#[.tok-s]#"startevent2"#
[.tok-na]#name=#[.tok-s]#"Start"#[.tok-nt]#></startEvent>#
[.tok-nt]#<endEvent# [.tok-na]#id=#[.tok-s]#"endevent2"#
[.tok-na]#name=#[.tok-s]#"End"#[.tok-nt]#></endEvent>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow3"#
[.tok-na]#name=#[.tok-s]#""#
[.tok-na]#sourceRef=#[.tok-s]#"startevent2"#
[.tok-na]#targetRef=#[.tok-s]#"endevent2"#[.tok-nt]#></sequenceFlow>#
[.tok-nt]#</subProcess>#

In this example, suppose the _assignees_ list has three items. The
following happens at runtime:

* A start event is thrown for the multi instance as a whole. The _start_
execution listener is invoked. The _loopCounter_ nor the _assignee_
variable will not be set (i.e. they will be null).
* A start event is thrown for each activity instance. The _start_
execution listener is invoked three times. The _loopCounter_ nor the
_assignee_ variable will be set (i.e. different from null).
* So in total, the start execution listener is invoked four times.

Note that the same applies when the _multiInstanceLoopCharacteristics_
are defined on something else than a subprocess too. For example in case
the example above would be a simple userTask, the same reasoning still
applies.

[[_compensation_handlers]]
== 8.5.15. Compensation Handlers

[[bpmnCompensationHandlerDescription]]
=== Description

link:#experimental[[EXPERIMENTAL]]

If an activity is used for compensating the effects of another activity,
it can be declared to be a compensation handler. Compensation handlers
are not contained in normal flow and are only executed when a
compensation event is thrown.

Compensation handlers must not have incoming or outgoing sequence flows.

A compensation handler must be associated with a compensation boundary
event using a directed association.

[[bpmnCompensationHandlerGraphicalNotation]]
=== Graphical notation

If an activity is a compensation handler, the compensation event icon is
displayed in the center bottom area. The following excerpt from a
process diagram shows a service task with an attached compensation
boundary event which is associated to a compensation handler. Notice the
compensation handler icon in the bottom canter area of the "cancel hotel
reservation" service task.

image:images/bpmn.boundary.compensation.event.png[bpmn.boundary.compensation.event]

[[bpmnCompensationHandlerXml]]
=== XML representation

In order to declare an activity to be a compensation handler, we need to
set the attribute isForCompensation to true:

[source,pygments,highlight]
----
1
2
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"undoBookHotel"#
[.tok-na]#isForCompensation=#[.tok-s]#"true"#
[.tok-na]#activiti:class=#[.tok-s]#"..."#[.tok-nt]#>#
[.tok-nt]#</serviceTask>#

[[bpmnSubprocessAndCallActivity]]
== 8.6. Sub-Processes and Call Activities

[[bpmnSubProcess]]
=== 8.6.1. Sub-Process

[[bpmnSubProcessDescription]]
==== Description

A _Sub-Process_ is an activity that contains other activities, gateways,
events, etc. which on itself form a process that is part of the bigger
process. A _Sub-Process_ is completely defined inside a parent process
(that’s why it’s often called an _embedded_ Sub-Process).

Sub-Processes have two major use cases:

* Sub-Processes allow *hierarchical modeling*. Many modeling tools allow
that Sub-Processes can be _collapsed_, hiding all the details of the
Sub-Process and displaying a high-level end-to-end overview of the
business process.
* A Sub-Process creates a new *scope for events*. Events that are thrown
during execution of the Sub-Process, can be caught by
link:#bpmnBoundaryEvent[a boundary event] on the boundary of the
Sub-Process, thus creating a scope for that event limited to the
Sub-Process.

Using a Sub-Process does impose some constraints:

* A Sub-Process can only have *one none start event*, no other start
event types are allowed. A Sub-Process must *at least have one end
event*. Note that the BPMN 2.0 specification allows to omit the start
and end events in a Sub-Process, but the current Activiti implementation
does not support this.
* *Sequence flow cannot cross Sub-Process boundaries.*

[[bpmnSubProcessGraphicalNotation]]
==== Graphical Notation

A Sub-Process is visualized as a typical activity, i.e. a rounded
rectangle. In case the Sub-Process is _collapsed_, only the name and a
plus-sign are displayed, giving a high-level overview of the process:

image:images/bpmn.collapsed.subprocess.png[bpmn.collapsed.subprocess]

In case the Sub-Process is _expanded_, the steps of the Sub-Process are
displayed within the Sub-Process boundaries:

image:images/bpmn.expanded.subprocess.png[bpmn.expanded.subprocess]

One of the main reasons to use a Sub-Process, is to define a scope for a
certain event. The following process model shows this: both the
_investigate software/investigate hardware_ tasks need to be done in
parallel, but both tasks need to be done within a certain time, before
_Level 2 support_ is consulted. Here, the scope of the timer (i.e. which
activities must be done in time) is constrained by the Sub-Process.

image:images/bpmn.subprocess.with.boundary.timer.png[bpmn.subprocess.with.boundary.timer]

[[bpmnSubProcessXML]]
==== XML representation

A Sub-Process is defined by the _subprocess_ element. All activities,
gateways, events, etc. that are part of the Sub-Process, need to be
enclosed within this element.

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-nt]#<subProcess# [.tok-na]#id=#[.tok-s]#"subProcess"#[.tok-nt]#>#
[.tok-nt]#<startEvent# [.tok-na]#id=#[.tok-s]#"subProcessStart"#
[.tok-nt]#/># ... other Sub-Process elements ... [.tok-nt]#<endEvent#
[.tok-na]#id=#[.tok-s]#"subProcessEnd"# [.tok-nt]#/>#
[.tok-nt]#</subProcess>#

[[bpmnEventSubprocess]]
== 8.6.2. Event Sub-Process

[[bpmnEventSubprocessDescription]]
=== Description

The Event Sub-Process is new in BPMN 2.0. An Event Sub-Process is a
subprocess that is triggered by an event. An Event Sub-Process can be
added at the process level or at any subprocess level. The event used to
trigger an event subprocess is configured using a start event. From
this, it follows that none start events are not supported for Event
Sub-Processes. An Event Sub-Process might be triggered using events like
message events, error events, signal events, timer events, or
compensation events. The subscription to the start event is created when
the scope (process instance or subprocess) hosting the Event Sub-Process
is created. The subscription is removed when the scope is destroyed.

An Event Sub-Process may be interrupting or non-interrupting. An
interrupting subprocess cancels any executions in the current scope. A
non-interrupting Event Sub-Process spawns a new concurrent execution.
While an interrupting Event Sub-Process can only be triggered once for
each activation of the scope hosting it, a non-interrupting Event
Sub-Process can be triggered multiple times. The fact whether the
subprocess is interrupting is configured using the start event
triggering the Event Sub-Process.

An Event Sub-Process must not have any incoming or outgoing sequence
flows. Since an Event Sub-Process is triggered by an event, an incoming
sequence flow makes no sense. When an Event Sub-Process is ended, either
the current scope is ended (in case of an interrupting Event
Sub-Process), or the concurrent execution spawned for the
non-interrupting subprocess is ended.

*Current limitations:*

* Activiti only supports interrupting Event Sub-Processes.
* Activiti only supports Event Sub-Process triggered using an Error
Start Event or Message Start Event.

[[bpmnEventSubprocessGraphicalNotation]]
=== Graphical Notation

An Event Sub-Process might be visualized as a an
link:#bpmnSubProcessGraphicalNotation[embedded subprocess] with a dotted
outline.

image:images/bpmn.subprocess.eventSubprocess.png[bpmn.subprocess.eventSubprocess]

[[bpmnEventSubprocessXMLRepresentation]]
=== XML representation

An Event Sub-Process is represented using XML in the same way as a an
embedded subprocess. In addition the attribute `triggeredByEvent` must
have the value `true`:

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<subProcess# [.tok-na]#id=#[.tok-s]#"eventSubProcess"#
[.tok-na]#triggeredByEvent=#[.tok-s]#"true"#[.tok-nt]#># ...
[.tok-nt]#</subProcess>#

[[bpmnEventSubprocessExample]]
== Example

The following is an example of an Event Sub-Process triggered using an
Error Start Event. The Event Sub-Process is located at the "process
level", i.e. is scoped to the process instance:

image:images/bpmn.subprocess.eventSubprocess.example.1.png[bpmn.subprocess.eventSubprocess.example.1]

This is how the Event Sub-Process would look like in XML:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-nt]#<subProcess# [.tok-na]#id=#[.tok-s]#"eventSubProcess"#
[.tok-na]#triggeredByEvent=#[.tok-s]#"true"#[.tok-nt]#>#
[.tok-nt]#<startEvent# [.tok-na]#id=#[.tok-s]#"catchError"#[.tok-nt]#>#
[.tok-nt]#<errorEventDefinition# [.tok-na]#errorRef=#[.tok-s]#"error"#
[.tok-nt]#/># [.tok-nt]#</startEvent># [.tok-nt]#<sequenceFlow#
[.tok-na]#id=#[.tok-s]#"flow2"#
[.tok-na]#sourceRef=#[.tok-s]#"catchError"#
[.tok-na]#targetRef=#[.tok-s]#"taskAfterErrorCatch"# [.tok-nt]#/>#
[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"taskAfterErrorCatch"#
[.tok-na]#name=#[.tok-s]#"Provide additional data"# [.tok-nt]#/>#
[.tok-nt]#</subProcess>#

As already stated, an Event Sub-Process can also be added to an embedded
subprocess. If it is added to an embedded subprocess, it becomes an
alternative to a boundary event. Consider the two following process
diagrams. In both cases the embedded subprocess throws an error event.
Both times the error is caught and handled using a user task.

image:images/bpmn.subprocess.eventSubprocess.example.2a.png[bpmn.subprocess.eventSubprocess.example.2a]

as opposed to:

image:images/bpmn.subprocess.eventSubprocess.example.2b.png[bpmn.subprocess.eventSubprocess.example.2b]

In both cases the same tasks are executed. However, there are
differences between both modelling alternatives:

* The embedded subprocess is executed using the same execution which
executed the scope it is hosted in. This means that an embedded
subprocess has access to the variables local to it’s scope. When using a
boundary event, the execution created for executing the embedded
subprocess is deleted by the sequence flow leaving the boundary event.
This means that the variables created by the embedded subprocess are not
available anymore.
* When using an Event Sub-Process, the event is completely handled by
the subprocess it is added to. When using a boundary event, the event is
handled by the parent process.

These two differences can help you decide whether a boundary event or an
embedded subprocess is better suited for solving a particular process
modeling / implementation problem.

[[bpmnTransactionSubprocess]]
== 8.6.3. Transaction subprocess

link:#experimental[[EXPERIMENTAL]][#bpmnTransactionSubprocessDescription]##

[[_description_8]]
=== Description

A transaction subprocess is an embedded subprocess, which can be used to
group multiple activities to a transaction. A transaction is a logical
unit of work which allows to group a set of individual activities, such
that they either succeed or fail collectively.

*Possible outcomes of a transaction:* A transaction can have three
different outcomes:

* A transaction is _successful_, if it is neither cancelled not
terminated by a hazard. If a transaction subprocess is successful, it is
left using the outgoing sequenceflow(s). A successful transaction might
be compensated if a compensation event is thrown later in the process.
_Note:_ just as "ordinary" embedded subprocesses, a transaction may be
compensated after successful completion using an intermediary throwing
compensation event.
* A transaction is _cancelled_, if an execution reaches the cancel end
event. In that case, all executions are terminated and removed. A single
remaining execution is then set to the cancel boundary event, which
triggers compensation. After compensation is completed, the transaction
subprocess is left using the outgoing sequence flow(s) of the cancel
boundary event.
* A transaction is ended by a _hazard_, if an error event is thrown,
that is not caught within the scope of the transaction subprocess. (This
also applies if the error is caught on the boundary of the transaction
subprocess.) In this case, compensation is not performed.

The following diagram illustrates the three different outcomes:

image:images/bpmn.transaction.subprocess.example.1.png[bpmn.transaction.subprocess.example.1]

*Relation to ACID transactions:* it is important not to confuse the bpmn
transaction subprocess with technical (ACID) transactions. The bpmn
transaction subprocess is not a way to scope technical transactions. In
order to understand transaction management in Activiti, read the section
on link:#bpmnConcurrencyAndTransactions[concurrency and transactions]. A
bpmn transaction is different from a technical transaction in the
following ways:

* While an ACID transaction is typically short lived, a bpmn transaction
may take hours, days or even months to complete. (Consider the case
where one of the activities grouped by a transaction is a usertask,
typically people have longer response times than applications. Or, in
another situation, a bpmn transaction might wait for some business event
to occur, like the fact that a particular order has been fulfilled.)
Such operations usually take considerably longer to complete than
updating a record in a database, or storing a message using a
transactional queue.
* Because it is impossible to scope a technical transaction to the
duration of a business activity, a bpmn transaction typically spans
multiple ACID transactions.
* Since a bpmn transaction spans multiple ACID transactions, we loose
ACID properties. For example, consider the example given above. Let’s
assume the "book hotel" and the "charge credit card" operations are
performed in separate ACID transactions. Let’s also assume that the
"book hotel" activity is successful. Now we have an intermediary
inconsistent state, because we have performed an hotel booking but have
not yet charged the credit card. Now, in an ACID transaction, we would
also perform different operations sequentially and thus also have an
intermediary inconsistent state. What is different here, is that the
inconsistent state is visible outside of the scope of the transaction.
For example, if the reservations are made using an external booking
service, other parties using the same booking service might already see
that the hotel is booked. This means, that when implementing business
transactions, we completely loose the isolation property (Granted: we
usually also relax isolation when working with ACID transactions to
allow for higher levels of concurrency, but there we have fine grained
control and intermediary inconsistencies are only present for very short
periods of times).
* A bpmn business transaction can also not be rolled back in the
traditional sense. Since it spans multiple ACID transactions, some of
these ACID transactions might already be committed at the time the bpmn
transaction is cancelled. At this point, they cannot be rolled back
anymore.

Since bpmn transactions are long-running in nature, the lack of
isolation and a rollback mechanism need to be dealt with differently. In
practice, there is usually no better solution than to deal with these
problems in a domain specific way:

* The rollback is performed using compensation. If a cancel event is
thrown in the scope of a transaction, the effects of all activities that
executed successfully and have a compensation handler are compensated.
* The lack of isolation is also often dealt with using domain specific
solutions. For instance, in the example above, an hotel room might
appear to be booked to a second customer, before we have actually made
sure that the first customer can pay for it. Since this might be
undesirable from a business perspective, a booking service might choose
to allow for a certain amount of overbooking.
* In addition, since the transaction can be aborted in case of a hazard,
the booking service has to deal with the situation where a hotel room is
booked but payment is never attempted (since the transaction was
aborted). In that case the booking service might choose a strategy where
a hotel room is reserved for a maximum period of time and if payment is
not received until then, the booking is cancelled.

To sum it up: while ACID transactions offer a generic solution to such
problems (rollback, isolation levels and heuristic outcomes), we need to
find domain specific solutions to these problems when implementing
business transactions.

*Current limitations:*

* The BPMN specification requires that the process engine reacts to
events issued by the underlying transaction protocol and for instance
that a transaction is cancelled, if a cancel event occurs in the
underlying protocol. As an embeddable engine, Activiti does currently
not support this. (For some ramifications of this, see paragraph on
consistency below.)

*Consistency on top of ACID transactions and optimistic concurrency:* A
bpmn transaction guarantees consistency in the sense that either all
activities compete successfully, or if some activity cannot be
performed, the effects of all other successful activities are
compensated. So either way we end up in a consistent state. However, it
is important to recognize that in Activiti, the consistency model for
bpmn transactions is superposed on top of the consistency model for
process execution. Activiti executes processes in a transactional way.
Concurrency is addressed using optimistic locking. In Activiti, bpmn
error, cancel and compensation events are built on top of the same acid
transactions and optimistic locking. For example, a cancel end event can
only trigger compensation if it is actually reached. It is not reached
if some undeclared exception is thrown by a service task before. Or, the
effects of a compensation handler cannot be committed if some other
participant in the underlying ACID transaction sets the transaction to
the state rollback-only. Or, when two concurrent executions reach a
cancel end event, compensation might be triggered twice and fail with an
optimistic locking exception. All of this is to say that when
implementing bpmn transactions in Activiti, the same set of rules apply
as when implementing "ordinary" processes and subprocesses. So to
effectively guarantee consistency, it is important to implement
processes in a way that does take the optimistic, transactional
execution model into consideration.

[[bpmnEventSubprocessGraphicalNotation]]
=== Graphical Notation

An transaction subprocess might be visualized as a an
link:#bpmnSubProcessGraphicalNotation[embedded subprocess] with a double
outline.

image:images/bpmn.transaction.subprocess.png[bpmn.transaction.subprocess]

[[bpmnEventSubprocessXMLRepresentation]]
=== XML representation

A transaction subprocess is represented using xml using the
`transaction` tag:

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<transaction# [.tok-na]#id=#[.tok-s]#"myTransaction"#
[.tok-nt]#># ... [.tok-nt]#</transaction>#

[[bpmnEventSubprocessExample]]
== Example

The following is an example of a transaction subprocess:

image:images/bpmn.transaction.subprocess.example.2.png[bpmn.transaction.subprocess.example.2]

[[bpmnCallActivity]]
== 8.6.4. Call activity (subprocess)

[[bpmnCallActivityDescription]]
=== Description

BPMN 2.0 makes a distinction between a regular
_link:#bpmnSubProcess[subprocess]_, often also called _embedded
subprocess_, and the call activity, which looks very similar. From a
conceptual point of view, both will call a subprocess when process
execution arrives at the activity.

The difference is that the call activity references a process that is
external to the process definition, whereas the
_link:#bpmnSubProcess[subprocess]_ is embedded within the original
process definition. The main use case for the call activity is to have a
reusable process definition that can be called from multiple other
process definitions.

When process execution arrives in the _call activity_, a new execution
is created that is a sub-execution of the execution that arrives in the
call activity. This sub-execution is then used to execute the
subprocess, potentially creating parallel child execution as within a
regular process. The super-execution waits until the subprocess is
completely ended, and continues the original process afterwards.

[[bpmnCallActivityGraphicalNotation]]
=== Graphical Notation

A call activity is visualized the same as a
link:#bpmnSubProcessGraphicalNotation[subprocess], however with a thick
border (collapsed and expanded). Depending on the modeling tool, a call
activity can also be expanded, but the default visualization is the
collapsed subprocess representation.

image:images/bpmn.collapsed.call.activity.png[bpmn.collapsed.call.activity]

[[bpmnCallActivityXMLRepresentation]]
=== XML representation

A call activity is a regular activity, that requires a _calledElement_
that references a process definition by its *key*. In practice, this
means that the *id of the process* is used in the _calledElement_.

[source,pygments,highlight]
----
1
----

[.tok-nt]#<callActivity#
[.tok-na]#id=#[.tok-s]#"callCheckCreditProcess"#
[.tok-na]#name=#[.tok-s]#"Check credit"#
[.tok-na]#calledElement=#[.tok-s]#"checkCreditProcess"# [.tok-nt]#/>#

Note that the process definition of the subprocess is *resolved at
runtime*. This means that the subprocess can be deployed independently
from the calling process, if needed.

[[bpmnCallActivityPassVariables]]
== Passing variables

You can pass process variables to the sub process and vice versa. The
data is copied into the subprocess when it is started and copied back
into the main process when it ends.

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-nt]#<callActivity# [.tok-na]#id=#[.tok-s]#"callSubProcess"#
[.tok-na]#calledElement=#[.tok-s]#"checkCreditProcess"# [.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:in#
[.tok-na]#source=#[.tok-s]#"someVariableInMainProcess"#
[.tok-na]#target=#[.tok-s]#"nameOfVariableInSubProcess"# [.tok-nt]#/>#
[.tok-nt]#<activiti:out#
[.tok-na]#source=#[.tok-s]#"someVariableInSubProcess"#
[.tok-na]#target=#[.tok-s]#"nameOfVariableInMainProcess"# [.tok-nt]#/>#
[.tok-nt]#</extensionElements># [.tok-nt]#</callActivity>#

We use an Activiti Extension as a shortcut for the BPMN standard
elements called _dataInputAssociation_ and _dataOutputAssociation_,
which only work if you declare process variables in the BPMN 2.0
standard way.

It is possible to use expressions here as well:

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-nt]#<callActivity# [.tok-na]#id=#[.tok-s]#"callSubProcess"#
[.tok-na]#calledElement=#[.tok-s]#"checkCreditProcess"# [.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:in#
[.tok-na]#sourceExpression=#[.tok-s]#"$\{x+5}"#
[.tok-na]#target=#[.tok-s]#"y"# [.tok-nt]#/># [.tok-nt]#<activiti:out#
[.tok-na]#source=#[.tok-s]#"$\{y+5}"# [.tok-na]#target=#[.tok-s]#"z"#
[.tok-nt]#/># [.tok-nt]#</extensionElements># [.tok-nt]#</callActivity>#

So in the end z = y+5 = x+5+5

The callActivity element also supports setting the business key on the
started subprocess instance using a custom activiti attribute extension.
The _businessKey_ attribute can be used to set a custom business key
value on the subprocess instance.

....
<callActivity id="callSubProcess" calledElement="checkCreditProcess" activiti:businessKey="${myVariable}">
...
</callActivity>
....

Defining the _inheritBusinessKey_ attribute with a value of true will
set the business key value on the subprocess to the value of the
business key as defined in the calling process.

....
<callActivity id="callSubProcess" calledElement="checkCreditProcess" activiti:inheritBusinessKey="true">
...
</callActivity>
....

[[bpmnCallActivityExample]]
== Example

The following process diagram shows a simple handling of an order. Since
the checking of the customer’s credit could be common to many other
processes, the _check credit step_ is modeled here as a call activity.

image:images/bpmn.call.activity.super.process.png[bpmn.call.activity.super.process]

The process looks as follows:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
----

[.tok-nt]#<startEvent# [.tok-na]#id=#[.tok-s]#"theStart"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow1"#
[.tok-na]#sourceRef=#[.tok-s]#"theStart"#
[.tok-na]#targetRef=#[.tok-s]#"receiveOrder"# [.tok-nt]#/>#
[.tok-nt]#<manualTask# [.tok-na]#id=#[.tok-s]#"receiveOrder"#
[.tok-na]#name=#[.tok-s]#"Receive Order"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow2"#
[.tok-na]#sourceRef=#[.tok-s]#"receiveOrder"#
[.tok-na]#targetRef=#[.tok-s]#"callCheckCreditProcess"# [.tok-nt]#/>#
[.tok-nt]#<callActivity#
[.tok-na]#id=#[.tok-s]#"callCheckCreditProcess"#
[.tok-na]#name=#[.tok-s]#"Check credit"#
[.tok-na]#calledElement=#[.tok-s]#"checkCreditProcess"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow3"#
[.tok-na]#sourceRef=#[.tok-s]#"callCheckCreditProcess"#
[.tok-na]#targetRef=#[.tok-s]#"prepareAndShipTask"# [.tok-nt]#/>#
[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"prepareAndShipTask"#
[.tok-na]#name=#[.tok-s]#"Prepare and Ship"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"flow4"#
[.tok-na]#sourceRef=#[.tok-s]#"prepareAndShipTask"#
[.tok-na]#targetRef=#[.tok-s]#"end"# [.tok-nt]#/># [.tok-nt]#<endEvent#
[.tok-na]#id=#[.tok-s]#"end"# [.tok-nt]#/>#

The subprocess looks as follows:

image:images/bpmn.call.activity.sub.process.png[bpmn.call.activity.sub.process]

There is nothing special to the process definition of the subprocess. It
could as well be used without being called from another process.

[[bpmnConcurrencyAndTransactions]]
== 8.7. Transactions and Concurrency

[[asyncContinuations]]
=== 8.7.1. Asynchronous Continuations

Activiti executes processes in a transactional way which can be
configured to suite your needs. Lets start by looking at how Activiti
scopes transactions normally. If you trigger Activiti (i.e. start a
process, complete a task, signal an execution), Activiti is going to
advance in the process, until it reaches wait states on each active path
of execution. More concretely speaking it performs a depth-first search
through the process graph and returns if it has reached wait states on
every branch of execution. A wait state is a task which is performed
"later" which means that Activiti persists the current execution and
waits to be triggered again. The trigger can either come from an
external source for example if we have a user task or a receive message
task, or from Activiti itself, if we have a timer event. This is
illustrated in the following picture:

image:images/activiti.async.example.no.async.PNG[activiti.async.example.no.async]

We see a segment of a BPMN processes with a usertask, a service task and
a timer event. Completing the usertask and validating the address is
part of the same unit of work, so it should succeed or fail atomically.
That means that if the service task throws an exception we want to
rollback the current transaction, such that the execution tracks back to
the user task and the user task is still present in the database. This
is also the default behavior of Activiti. In (1) an application or
client thread completes the task. In that same thread Activiti is now
executing the service and advances until it reaches a wait state, in
this case the timer event (2). Then it returns the control to the caller
(3) potentially committing the transaction (if it was started by
Activiti).

In some cases this is not what we want. Sometimes we need custom control
over transaction boundaries in a process, in order to be able to scope
logical units of work. This is where asynchronous continuations come
into play. Consider the following process (fragment):

image:images/activiti.async.example.async.PNG[activiti.async.example.async]

This time we are completing the user task, generating an invoice and
then send that invoice to the customer. This time the generation of the
invoice is not part of the same unit of work so we do not want to
rollback the completion of the usertask if generating an invoice fails.
So what we want Activiti to do is complete the user task (1), commit the
transaction and return the control to the calling application. Then we
want to generate the invoice asynchronously, in a background thread.
This background thread is the Activiti job executor (actually a thread
pool) which periodically polls the database for jobs. So behind the
scenes, when we reach the "generate invoice" task, we are creating a job
"message" for Activiti to continue the process later and persisting it
into the database. This job is then picked up by the job executor and
executed. We are also giving the local job executor a little hint that
there is a new job, to improve performance.

In order to use this feature, we can use the _activiti:async="true"_
extension. So for example, the service task would look like this:

[source,pygments,highlight]
----
1
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"service1"#
[.tok-na]#name=#[.tok-s]#"Generate Invoice"#
[.tok-na]#activiti:class=#[.tok-s]#"my.custom.Delegate"#
[.tok-na]#activiti:async=#[.tok-s]#"true"# [.tok-nt]#/>#

_activiti:async_ can be specified on the following BPMN task types:
task, serviceTask, scriptTask, businessRuleTask, sendTask, receiveTask,
userTask, subProcess, callActivity

On a userTask, receiveTask or other wait states, the async continuation
allows us to execute the start execution listeners in a separate
thread/transaction.

[[failRetry]]
== 8.7.2. Fail Retry

Activiti, in its default configuration, reruns a job 3 times in case of
any exception in execution of a job. This holds also for asynchronous
task jobs. In some cases more flexibility is required. There are two
parameters to be configured:

* Number of retries
* Delay between retries These parameters can be configured by
`activiti:failedJobRetryTimeCycle` element. Here is a sample usage:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"failingServiceTask"#
[.tok-na]#activiti:async=#[.tok-s]#"true"#
[.tok-na]#activiti:class=#[.tok-s]#"org.activiti.engine.test.jobexecutor.RetryFailingDelegate"#[.tok-nt]#>#
[.tok-nt]#<extensionElements>#
[.tok-nt]##<activiti:failedJobRetryTimeCycle>##R5/PT7M[.tok-nt]##</activiti:failedJobRetryTimeCycle>##
[.tok-nt]#</extensionElements># [.tok-nt]#</serviceTask>#

Time cycle expression follows ISO 8601 standard, just like timer event
expressions. The above example, makes the job executor to retry the job
5 times and wait 7 minutes between before each retry.

[[exclusiveJobs]]
== 8.7.3. Exclusive Jobs

Since Activiti 5.9, the JobExecutor makes sure that jobs from a single
process instance are never executed concurrently. Why is this?

[[_why_exclusive_jobs]]
=== Why exclusive Jobs?

Consider the following process definition:

image:images/bpmn.why.exclusive.jobs.png[bpmn.why.exclusive.jobs]

We have a parallel gateway followed by three service tasks which all
perform an asynchronous continuation. As a result of this, three jobs
are added to the database. Once such a job is present in the database it
can be processes by the JobExecutor. The JobExecutor acquires the jobs
and delegates them to a thread pool of worker threads which actually
process the jobs. This means that using an asynchronous continuation,
you can distribute the work to this thread pool (and in a clustered
scenario even across multiple thread pools in the cluster). This is
usually a good thing. However it also bears an inherent problem:
consistency. Consider the parallel join after the service tasks. When
execution of a service tasks is completed, we arrive at the parallel
join and need to decide whether to wait for the other executions or
whether we can move forward. That means, for each branch arriving at the
parallel join, we need to take a decision whether we can continue or
whether we need to wait for one or more other executions on the other
branches.

Why is this a problem? Since the service tasks are configured using an
asynchronous continuation, it is possible that the corresponding jobs
are all acquired at the same time and delegated to different worker
threads by the JobExecutor. The consequence is that the transactions in
which the services are executed and in which the 3 individual executions
arrive at the parallel join can overlap. And if they do so, each
individual transaction will not "see", that another transaction is
arriving at the same parallel join concurrently and thus assume that it
has to wait for the others. However, if each transaction assumes that it
has to wait for the other ones, none will continue the process after the
parallel join and the process instance will remain in that state
forever.

How does Activiti address this problem? Activiti performs optimistic
locking. Whenever we take a decision based on data that might not be
current (because another transaction might modify it before we commit,
we make sure to increment the version of the same database row in both
transactions). This way, whichever transaction commits first wins and
the other ones fail with an optimistic locking exception. This solves
the problem in the case of the process discussed above: if multiple
executions arrive at the parallel join concurrently, they all assume
that they have to wait, increment the version of their parent execution
(the process instance) and then try to commit. Whichever execution is
first will be able to commit and the other ones will fail with an
optimistic locking exception. Since the executions are triggered by a
job, Activiti will retry to perform the same job after waiting for a
certain amount of time and hopefully this time pass the synchronizing
gateway.

Is this a good solution? As we have seen, optimistic locking allows
Activiti to prevent inconsistencies. It makes sure that we do not "keep
stuck at the joining gateway", meaning: either all executions have
passed the gateway or, there are jobs in the database making sure that
we retry passing it. However, while this is a perfectly fine solution
from the point of view of persistence and consistency, this might not
always be desirable behavior at an higher level:

* Activiti will retry the same job for a fixed maximum number of times
only (_3_ in the default configuration). After that, the job will still
be present in the database but not be retried actively anymore. That
means that an operator would need to trigger the job manually.
* If a job has non-transactional side effects, those will not be rolled
back by the failing transaction. For instance, if the "book concert
tickets" service does not share the same transaction as Activiti, we
might book multiple tickets if we retry the job.

[[_what_are_exclusive_jobs]]
=== What are exclusive jobs?

An exclusive job cannot be performed at the same time as another
exclusive job from the same process instance. Consider the process shown
above: if we declare the service tasks to be exclusive, the JobExecutor
will make sure that the corresponding jobs are not executed
concurrently. Instead, it will make sure that whenever it acquires an
exclusive job from a certain process instance, it acquires all other
exclusive jobs from the same process instance and delegates them to the
same worker thread. This ensures sequential execution execution of the
jobs.

How can I enable this feature? Since Activiti 5.9, exclusive jobs are
the default configuration. All asynchronous continuations and timer
events are thus exclusive by default. In addition, if you want a job to
be non-exclusive, you can configure it as such using
`activiti:exclusive="false"`. For example, the following servicetask
would be asynchronous but non-exclusive.

[source,pygments,highlight]
----
1
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#"service"#
[.tok-na]#activiti:expression=#[.tok-s]#"$\{myService.performBooking(hotel,
dates)}"# [.tok-na]#activiti:async=#[.tok-s]#"true"#
[.tok-na]#activiti:exclusive=#[.tok-s]#"false"# [.tok-nt]#/>#

Is this a good solution? We had some people asking whether this was a
good solution. Their concern was that this would to prevent you from
"doing things" in parallel and would thus be a performance problem.
Again, two things have to be taken into consideration:

* It can be turned off if you are an expert and know what you are doing
(and have understood the section named "Why exclusive Jobs?"). Other
than that, it is more intuitive for most users if things like
asynchronous continuations and timers just work.
* It is actually not a performance issue. Performance is an issue under
heavy load. Heavy load means that all worker threads of the job executor
are busy all the time. With exclusive jobs, Activiti will simply
distribute the load differently. Exclusive jobs means that jobs from a
single process instance are performed by the same thread sequentially.
But consider: you have more than one single process instance. And jobs
from other process instances are delegated to other threads and executed
concurrently. This means that with exclusive jobs Activiti will not
execute jobs from the same process instance concurrently, but it will
still execute multiple instances concurrently. From an overall
throughput perspective this is desirable in most scenarios as it usually
leads to individual instances being done more quickly. Furthermore, data
that is required for executing subsequent jobs of the same process
instance will already be in the cache of the executing cluster node. If
the jobs do not have this node affinity, that data might need to be
fetched from the database again.

[[security]]
== 8.8. Process Initiation Authorization

By default everyone is allowed to start a new process instance of
deployed process definitions. The process initiation authorization
functionality allows to define users and groups so that web clients can
optionally restrict users to start a new process instance. NOTE that the
authorization definition is NOT validated by the Activiti Engine in any
way. This functionality is only meant for developers to ease the
implementation of authorization rules in a web client. The syntax is
similar to the syntax of user assignment for a user task. A user or
group can be assigned as potential initiator of a process using
<activiti:potentialStarter> tag. Here is an example:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
----

[.tok-nt]#<process#
[.tok-na]#id=#[.tok-s]#"potentialStarter"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:potentialStarter>#
[.tok-nt]#<resourceAssignmentExpression>#
[.tok-nt]##<formalExpression>##group2, group(group3),
user(user3)[.tok-nt]#</formalExpression>#
[.tok-nt]#</resourceAssignmentExpression>#
[.tok-nt]#</activiti:potentialStarter># [.tok-nt]#</extensionElements>#
[.tok-nt]#<startEvent# [.tok-na]#id=#[.tok-s]#"theStart"#[.tok-nt]#/>#
...

In the above xml excerpt user(user3) refers directly to user user3 and
group(group3) to group group3. No indicator will default to a group
type. It is also possible to use attributes of the <process> tag, namely
<activiti:candidateStarterUsers> and <activiti:candidateStarterGroups>.
Here is an example:

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<process# [.tok-na]#id=#[.tok-s]#"potentialStarter"#
[.tok-na]#activiti:candidateStarterUsers=#[.tok-s]#"user1, user2"#
[.tok-na]#activiti:candidateStarterGroups=#[.tok-s]#"group1"#[.tok-nt]#>#
...

It is possible to use both attributes simultaneously.

After the process initiation authorizations are defined, a developer can
retrieve the authorization definition using the following methods. This
code retrieves the list of process definitions which can be initiated by
the given user:

[source,pygments,highlight]
----
1
----

[.tok-n]#processDefinitions# [.tok-o]#=#
[.tok-n]#repositoryService#[.tok-o]#.#[.tok-na]#createProcessDefinitionQuery#[.tok-o]#().#[.tok-na]#startableByUser#[.tok-o]#(#[.tok-s]#"userxxx"#[.tok-o]#).#[.tok-na]#list#[.tok-o]#();#

It’s also possible to retrieve all identity links that are defined as
potential starter for a specific process definition

[source,pygments,highlight]
----
1
----

[.tok-n]#identityLinks# [.tok-o]#=#
[.tok-n]#repositoryService#[.tok-o]#.#[.tok-na]#getIdentityLinksForProcessDefinition#[.tok-o]#(#[.tok-s]#"processDefinitionId"#[.tok-o]#);#

The following example shows how to get list of users who can initiate
the given process:

[source,pygments,highlight]
----
1
----

[.tok-n]#List#[.tok-o]#<#[.tok-n]#User#[.tok-o]#>#
[.tok-n]#authorizedUsers# [.tok-o]#=#
[.tok-n]#identityService#[.tok-o]#().#[.tok-na]#createUserQuery#[.tok-o]#().#[.tok-na]#potentialStarter#[.tok-o]#(#[.tok-s]#"processDefinitionId"#[.tok-o]#).#[.tok-na]#list#[.tok-o]#();#

Exactly the same way, the list of groups that is configured as a
potential starter to a given process definition can be retrieved:

[source,pygments,highlight]
----
1
----

[.tok-n]#List#[.tok-o]#<#[.tok-n]#Group#[.tok-o]#>#
[.tok-n]#authorizedGroups# [.tok-o]#=#
[.tok-n]#identityService#[.tok-o]#().#[.tok-na]#createGroupQuery#[.tok-o]#().#[.tok-na]#potentialStarter#[.tok-o]#(#[.tok-s]#"processDefinitionId"#[.tok-o]#).#[.tok-na]#list#[.tok-o]#();#

[[dataobjects]]
== 8.9. Data objects

link:#experimental[[EXPERIMENTAL]]

BPMN provides the possibility to define data objects as part of a
process or sub process element. According to the BPMN specification it’s
possible to include complex XML structures that might be imported from
XSD definitions. As a first start to support data objects in Activiti
the following XSD types are supported:

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-nt]#<dataObject# [.tok-na]#id=#[.tok-s]#"dObj1"#
[.tok-na]#name=#[.tok-s]#"StringTest"#
[.tok-na]#itemSubjectRef=#[.tok-s]#"xsd:string"#[.tok-nt]#/>#
[.tok-nt]#<dataObject# [.tok-na]#id=#[.tok-s]#"dObj2"#
[.tok-na]#name=#[.tok-s]#"BooleanTest"#
[.tok-na]#itemSubjectRef=#[.tok-s]#"xsd:boolean"#[.tok-nt]#/>#
[.tok-nt]#<dataObject# [.tok-na]#id=#[.tok-s]#"dObj3"#
[.tok-na]#name=#[.tok-s]#"DateTest"#
[.tok-na]#itemSubjectRef=#[.tok-s]#"xsd:datetime"#[.tok-nt]#/>#
[.tok-nt]#<dataObject# [.tok-na]#id=#[.tok-s]#"dObj4"#
[.tok-na]#name=#[.tok-s]#"DoubleTest"#
[.tok-na]#itemSubjectRef=#[.tok-s]#"xsd:double"#[.tok-nt]#/>#
[.tok-nt]#<dataObject# [.tok-na]#id=#[.tok-s]#"dObj5"#
[.tok-na]#name=#[.tok-s]#"IntegerTest"#
[.tok-na]#itemSubjectRef=#[.tok-s]#"xsd:int"#[.tok-nt]#/>#
[.tok-nt]#<dataObject# [.tok-na]#id=#[.tok-s]#"dObj6"#
[.tok-na]#name=#[.tok-s]#"LongTest"#
[.tok-na]#itemSubjectRef=#[.tok-s]#"xsd:long"#[.tok-nt]#/>#

The data object definitions will be automatically converted to process
variables using the _name_ attribute value as the name for the new
variable. In addition to the definition of the data object Activiti also
provides an extension element to assign a default value to the variable.
The following BPMN snippet provides an example:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-nt]#<process# [.tok-na]#id=#[.tok-s]#"dataObjectScope"#
[.tok-na]#name=#[.tok-s]#"Data Object Scope"#
[.tok-na]#isExecutable=#[.tok-s]#"true"#[.tok-nt]#>#
[.tok-nt]#<dataObject# [.tok-na]#id=#[.tok-s]#"dObj123"#
[.tok-na]#name=#[.tok-s]#"StringTest123"#
[.tok-na]#itemSubjectRef=#[.tok-s]#"xsd:string"#[.tok-nt]#>#
[.tok-nt]#<extensionElements>#
[.tok-nt]##<activiti:value>##Testing123[.tok-nt]##</activiti:value>##
[.tok-nt]#</extensionElements># [.tok-nt]#</dataObject># ...

== 9. Forms

Activiti provides a convenient and flexible way to add forms for the
manual steps of your business processes. We support two strategies to
work with forms: Build-in form rendering with form properties and
external form rendering.

[[formProperties]]
=== 9.1. Form properties

All information relevant to a business process is either included in the
process variables themselves or referenced through the process
variables. Activiti supports complex Java objects to be stored as
process variables like `Serializable` objects, JPA entities or whole XML
documents as `String`s.

Starting a process and completing user tasks is where people are
involved into a process. Communicating with people requires forms to be
rendered in some UI technology. In order to facilitate multiple UI
technologies easy, the process definition can include the logic of
transforming of the complex Java typed objects in the process variables
to a `Map<String,String>` of *_properties_*.

Any UI technology can then build a form on top of those properties,
using the Activiti API methods that expose the property information. The
properties can provide a dedicated (and more limited) view on the
process variables. The properties needed to display a form are available
in the *FormData* return values of for example

[source,pygments,highlight]
----
1
----

[.tok-n]#StartFormData#
[.tok-n]#FormService#[.tok-o]#.#[.tok-na]#getStartFormData#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#processDefinitionId#[.tok-o]#)#

or

[source,pygments,highlight]
----
1
----

[.tok-n]#TaskFormdata#
[.tok-n]#FormService#[.tok-o]#.#[.tok-na]#getTaskFormData#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#taskId#[.tok-o]#)#

By default, the build-in form engines, _sees_ the properties as well as
the process variables. So there is no need to declare task form
properties if they match 1-1 with the process variables. For example,
with the following declaration:

[source,pygments,highlight]
----
1
----

[.tok-nt]#<startEvent# [.tok-na]#id=#[.tok-s]#"start"# [.tok-nt]#/>#

All process variables are available when execution arrives in the
startEvent, but

[source,pygments,highlight]
----
1
----

[.tok-n]#formService#[.tok-o]#.#[.tok-na]#getStartFormData#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#processDefinitionId#[.tok-o]#).#[.tok-na]#getFormProperties#[.tok-o]#()#

will be empty since no specific mapping was defined.

In the above case, all the submitted properties will be stored as
process variables. This means that by simply adding a new input field in
the form, a new variable can be stored.

Properties are derived from process variables, but they don’t have to be
stored as process variables. For example, a process variable could be a
JPA entity of class Address. And a form property `StreetName` used by
the UI technology could be linked with an expression `#{address.street}`

Analogue, the properties that a user is supposed to submit in a form can
be stored as a process variable or as a nested property in one of the
process variables with a UEL value expression like e.g.
`#{address.street}` .

Analogue the default behavior of properties that are submitted is that
they will be stored as process variables unless a `formProperty`
declaration specifies otherwise.

Also type conversions can be applied as part of the processing between
form properties and process variables.

For example:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
----

[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"task"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:formProperty#
[.tok-na]#id=#[.tok-s]#"room"# [.tok-nt]#/>#
[.tok-nt]#<activiti:formProperty# [.tok-na]#id=#[.tok-s]#"duration"#
[.tok-na]#type=#[.tok-s]#"long"#[.tok-nt]#/>#
[.tok-nt]#<activiti:formProperty# [.tok-na]#id=#[.tok-s]#"speaker"#
[.tok-na]#variable=#[.tok-s]#"SpeakerName"#
[.tok-na]#writable=#[.tok-s]#"false"# [.tok-nt]#/>#
[.tok-nt]#<activiti:formProperty# [.tok-na]#id=#[.tok-s]#"street"#
[.tok-na]#expression=#[.tok-s]#"#\{address.street}"#
[.tok-na]#required=#[.tok-s]#"true"# [.tok-nt]#/>#
[.tok-nt]#</extensionElements># [.tok-nt]#</userTask>#

* Form property `room` will be mapped to process variable `room` as a
String
* Form property `duration` will be mapped to process variable `duration`
as a java.lang.Long
* Form property `speaker` will be mapped to process variable
`SpeakerName`. It will only be available in the TaskFormData object. If
property speaker is submitted, an ActivitiException will be thrown.
Analogue, with attribute `readable="false"`, a property can be excluded
from the FormData, but still be processed in the submit.
* Form property `street` will be mapped to Java bean property `street`
in process variable `address` as a String. And required="true" will
throw an exception during the submit if the property is not provided.

It’s also possible to provide type metadata as part of the FormData that
is returned from methods
`StartFormData FormService.getStartFormData(String processDefinitionId)`
and `TaskFormdata FormService.getTaskFormData(String taskId)`

We support the following form property types:

* `string` (org.activiti.engine.impl.form.StringFormType
* `long` (org.activiti.engine.impl.form.LongFormType)
* `enum` (org.activiti.engine.impl.form.EnumFormType)
* `date` (org.activiti.engine.impl.form.DateFormType)
* `boolean` (org.activiti.engine.impl.form.BooleanFormType)

For each form property declared, the following `FormProperty`
information will be made available through
`List<FormProperty> formService.getStartFormData(String processDefinitionId).getFormProperties()`
and
`List<FormProperty> formService.getTaskFormData(String taskId).getFormProperties()`

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
----

[.tok-kd]#public# [.tok-kd]#interface# [.tok-nc]#FormProperty#
[.tok-o]#\{# [.tok-cm]#/** the key used to submit the property in
\{@link FormService#submitStartFormData(String, java.util.Map)}#
[.tok-cm]# * or \{@link FormService#submitTaskFormData(String,
java.util.Map)} */# [.tok-n]#String# [.tok-nf]#getId#[.tok-o]#();#
[.tok-cm]#/** the display label */# [.tok-n]#String#
[.tok-nf]#getName#[.tok-o]#();# [.tok-cm]#/** one of the types defined
in this interface like e.g. \{@link #TYPE_STRING} */# [.tok-n]#FormType#
[.tok-nf]#getType#[.tok-o]#();# [.tok-cm]#/** optional value that should
be used to display in this property */# [.tok-n]#String#
[.tok-nf]#getValue#[.tok-o]#();# [.tok-cm]#/** is this property read to
be displayed in the form and made accessible with the methods#
[.tok-cm]# * \{@link FormService#getStartFormData(String)} and \{@link
FormService#getTaskFormData(String)}. */# [.tok-kt]#boolean#
[.tok-nf]#isReadable#[.tok-o]#();# [.tok-cm]#/** is this property
expected when a user submits the form? */# [.tok-kt]#boolean#
[.tok-nf]#isWritable#[.tok-o]#();# [.tok-cm]#/** is this property a
required input field */# [.tok-kt]#boolean#
[.tok-nf]#isRequired#[.tok-o]#();# [.tok-o]#}#

For example:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
----

[.tok-nt]#<startEvent# [.tok-na]#id=#[.tok-s]#"start"#[.tok-nt]#>#
[.tok-nt]#<extensionElements># [.tok-nt]#<activiti:formProperty#
[.tok-na]#id=#[.tok-s]#"speaker"# [.tok-na]#name=#[.tok-s]#"Speaker"#
[.tok-na]#variable=#[.tok-s]#"SpeakerName"#
[.tok-na]#type=#[.tok-s]#"string"# [.tok-nt]#/>#
[.tok-nt]#<activiti:formProperty# [.tok-na]#id=#[.tok-s]#"start"#
[.tok-na]#type=#[.tok-s]#"date"#
[.tok-na]#datePattern=#[.tok-s]#"dd-MMM-yyyy"# [.tok-nt]#/>#
[.tok-nt]#<activiti:formProperty# [.tok-na]#id=#[.tok-s]#"direction"#
[.tok-na]#type=#[.tok-s]#"enum"#[.tok-nt]#># [.tok-nt]#<activiti:value#
[.tok-na]#id=#[.tok-s]#"left"# [.tok-na]#name=#[.tok-s]#"Go Left"#
[.tok-nt]#/># [.tok-nt]#<activiti:value# [.tok-na]#id=#[.tok-s]#"right"#
[.tok-na]#name=#[.tok-s]#"Go Right"# [.tok-nt]#/>#
[.tok-nt]#<activiti:value# [.tok-na]#id=#[.tok-s]#"up"#
[.tok-na]#name=#[.tok-s]#"Go Up"# [.tok-nt]#/>#
[.tok-nt]#<activiti:value# [.tok-na]#id=#[.tok-s]#"down"#
[.tok-na]#name=#[.tok-s]#"Go Down"# [.tok-nt]#/>#
[.tok-nt]#</activiti:formProperty># [.tok-nt]#</extensionElements>#
[.tok-nt]#</startEvent>#

All that information is accessible through the API. The type names can
be obtained with `formProperty.getType().getName()`. And even the date
pattern is available with
`formProperty.getType().getInformation("datePattern")` and the
enumeration values are accessible with
`formProperty.getType().getInformation("values")`

Activiti explorer supports the form properties and will render the form
accordingly to the form definition. The following XML snippet

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-nt]#<startEvent># [.tok-nt]#<extensionElements>#
[.tok-nt]#<activiti:formProperty# [.tok-na]#id=#[.tok-s]#"numberOfDays"#
[.tok-na]#name=#[.tok-s]#"Number of days"#
[.tok-na]#value=#[.tok-s]#"$\{numberOfDays}"#
[.tok-na]#type=#[.tok-s]#"long"#
[.tok-na]#required=#[.tok-s]#"true"#[.tok-nt]#/>#
[.tok-nt]#<activiti:formProperty# [.tok-na]#id=#[.tok-s]#"startDate"#
[.tok-na]#name=#[.tok-s]#"First day of holiday (dd-MM-yyy)"#
[.tok-na]#value=#[.tok-s]#"$\{startDate}"#
[.tok-na]#datePattern=#[.tok-s]#"dd-MM-yyyy hh:mm"#
[.tok-na]#type=#[.tok-s]#"date"# [.tok-na]#required=#[.tok-s]#"true"#
[.tok-nt]#/># [.tok-nt]#<activiti:formProperty#
[.tok-na]#id=#[.tok-s]#"vacationMotivation"#
[.tok-na]#name=#[.tok-s]#"Motivation"#
[.tok-na]#value=#[.tok-s]#"$\{vacationMotivation}"#
[.tok-na]#type=#[.tok-s]#"string"# [.tok-nt]#/>#
[.tok-nt]#</extensionElements># [.tok-nt]#</userTask>#

will render to a process start form when used in Activiti Explorer

image:images/forms.explorer.png[forms.explorer]

[[externalFormRendering]]
== 9.2. External form rendering

The API also allows for you to perform your own task form rendering
outside of the Activiti Engine. These steps explain the hooks that you
can use to render your task forms yourself.

Essentially, all the data that’s needed to render a form is assembled in
one of these two service methods:
`StartFormData FormService.getStartFormData(String processDefinitionId)`
and `TaskFormdata FormService.getTaskFormData(String taskId)`.

Submitting form properties can be done with
`ProcessInstance FormService.submitStartFormData(String processDefinitionId, Map<String,String> properties)`
and
`void FormService.submitTaskFormData(String taskId, Map<String,String> properties)`

To learn about how form properties map to process variables, see
link:#formProperties[Form properties]

You can place any form template resource inside the business archives
that you deploy (in case you want to store them versioned with the
process). It will be available as a resource in the deployment, which
you can retrieve using: `String ProcessDefinition.getDeploymentId()` and
`InputStream RepositoryService.getResourceAsStream(String deploymentId, String resourceName);`
This could be your template definition file, which you can use to
render/show the form in your own application.

You can use this capability of accessing the deployment resources beyond
task forms for any other purposes as well.

The attribute `<userTask activiti:formKey="…​"` is exposed by the API
through
`String FormService.getStartFormData(String processDefinitionId).getFormKey()`
and `String FormService.getTaskFormData(String taskId).getFormKey()`.
You could use this to store the full name of the template within your
deployment (e.g. `org/activiti/example/form/my-custom-form.xml`), but
this is not required at all. For instance, you could also store a
generic key in the form attribute and apply an algorithm or
transformation to get to the actual template that needs to be used. This
might be handy when you want to render different forms for different UI
technologies like e.g. one form for usage in a web app of normal screen
size, one form for mobile phone’s small screens and maybe even a
template for an IM form or an email form.

[[_jpa]]
== 10. JPA

You can use JPA-Entities as process variables, allowing you to:

* Updating existing JPA-entities based on process variables that can be
filled in on a form in a userTask or generated in a serviceTask.
* Reusing existing domain model without having to write explicit
services to fetch the entities and update the values
* Make decisions (gateways) based on properties of existing entities.
* …​

[[_requirements]]
=== 10.1. Requirements

Only entities that comply with the following are supported:

* Entities should be configured using JPA-annotations, we support both
field and property-access. Mapped super classes can also be used.
* Entity should have a primary key annotated with `@Id`, compound
primary keys are not supported (`@EmbeddedId` and `@IdClass`). The Id
field/property can be of any type supported in the JPA-spec: Primitive
types and their wrappers (excluding boolean), `String`, `BigInteger`,
`BigDecimal`, `java.util.Date` and `java.sql.Date`.

[[jpaconfiguration]]
=== 10.2. Configuration

To be able to use JPA-entities, the engine must have a reference to an
`EntityManagerFactory`. This can be done by configuring a reference or
by supplying a persistence-unit name. JPA-entities used as variables
will be detected automatically and will be handled accordingly.

The example configuration below uses the jpaPersistenceUnitName:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
----

[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"processEngineConfiguration"#
[.tok-na]#class=#[.tok-s]#"org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration"#[.tok-nt]#>#
[.tok-c]#<!-- Database configurations --># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"databaseSchemaUpdate"#
[.tok-na]#value=#[.tok-s]#"true"# [.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"jdbcUrl"#
[.tok-na]#value=#[.tok-s]#"jdbc:h2:mem:JpaVariableTest;DB_CLOSE_DELAY=1000"#
[.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"jpaPersistenceUnitName"#
[.tok-na]#value=#[.tok-s]#"activiti-jpa-pu"# [.tok-nt]#/>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"jpaHandleTransaction"#
[.tok-na]#value=#[.tok-s]#"true"# [.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"jpaCloseEntityManager"#
[.tok-na]#value=#[.tok-s]#"true"# [.tok-nt]#/># [.tok-c]#<!-- job
executor configurations --># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"jobExecutorActivate"#
[.tok-na]#value=#[.tok-s]#"false"# [.tok-nt]#/># [.tok-c]#<!-- mail
server configurations --># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"mailServerPort"#
[.tok-na]#value=#[.tok-s]#"5025"# [.tok-nt]#/># [.tok-nt]#</bean>#

The next example configuration below provides a `EntityManagerFactory`
which we define ourselves (in this case, an open-jpa entity manager).
Note that the snippet only contains the beans that are relevant for the
example, the others are omitted. Full working example with open-jpa
entity manager can be found in the activiti-spring-examples
(`/activiti-spring/src/test/java/org/activiti/spring/test/jpa/JPASpringTest.java`)

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
----

[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"entityManagerFactory"#
[.tok-na]#class=#[.tok-s]#"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"#[.tok-nt]#>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"persistenceUnitManager"#
[.tok-na]#ref=#[.tok-s]#"pum"#[.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"jpaVendorAdapter"#[.tok-nt]#>#
[.tok-nt]#<bean#
[.tok-na]#class=#[.tok-s]#"org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter"#[.tok-nt]#>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"databasePlatform"#
[.tok-na]#value=#[.tok-s]#"org.apache.openjpa.jdbc.sql.H2Dictionary"#
[.tok-nt]#/># [.tok-nt]#</bean># [.tok-nt]#</property>#
[.tok-nt]#</bean># [.tok-nt]#<bean#
[.tok-na]#id=#[.tok-s]#"processEngineConfiguration"#
[.tok-na]#class=#[.tok-s]#"org.activiti.spring.SpringProcessEngineConfiguration"#[.tok-nt]#>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"dataSource"#
[.tok-na]#ref=#[.tok-s]#"dataSource"# [.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"transactionManager"#
[.tok-na]#ref=#[.tok-s]#"transactionManager"# [.tok-nt]#/>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"databaseSchemaUpdate"#
[.tok-na]#value=#[.tok-s]#"true"# [.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"jpaEntityManagerFactory"#
[.tok-na]#ref=#[.tok-s]#"entityManagerFactory"# [.tok-nt]#/>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"jpaHandleTransaction"#
[.tok-na]#value=#[.tok-s]#"true"# [.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"jpaCloseEntityManager"#
[.tok-na]#value=#[.tok-s]#"true"# [.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"jobExecutorActivate"#
[.tok-na]#value=#[.tok-s]#"false"# [.tok-nt]#/># [.tok-nt]#</bean>#

The same configurations can also be done when building an engine
programmatically, example:

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-n]#ProcessEngine# [.tok-n]#processEngine# [.tok-o]#=#
[.tok-n]#ProcessEngineConfiguration#
[.tok-o]#.#[.tok-na]#createProcessEngineConfigurationFromResourceDefault#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#setJpaPersistenceUnitName#[.tok-o]#(#[.tok-s]#"activiti-pu"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#buildProcessEngine#[.tok-o]#();#

Configuration properties:

* `jpaPersistenceUnitName`: The name of the persistence-unit to use.
(Make sure the persistence-unit is available on the classpath. According
to the spec, the default location is `/META-INF/persistence.xml`). Use
either `jpaEntityManagerFactory` or `jpaPersistenceUnitName`.
* `jpaEntityManagerFactory`: An reference to a bean implementing
`javax.persistence.EntityManagerFactory` that will be used to load the
Entities and flushing the updates. Use either _jpaEntityManagerFactory_
or _jpaPersistenceUnitName_.
* `jpaHandleTransaction`: Flag indicating that the engine should begin
and commit/rollback the transaction on the used _EntityManager_
instances. Set to false when _Java Transaction API (JTA)_ is used.
* `jpaCloseEntityManager`: Flag indicating that the engine should close
the `EntityManager` instance that was obtained from the
`EntityManagerFactory`. Set to false when the _EntityManager_ is
container-managed (e.g. when using an Extended Persistence Context which
isn’t scoped to a single transaction').

[[_usage]]
== 10.3. Usage

[[_simple_example]]
=== 10.3.1. Simple Example

Examples for using JPA variables can be found in JPAVariableTest in the
Activiti source code. We’ll explain
`JPAVariableTest.testUpdateJPAEntityValues` step by step.

First of all, we create an _EntityManagerFactory_ for our
persistence-unit, which is based on `META-INF/persistence.xml`. This
contains classes which should be included in the persistence unit and
some vendor-specific configuration.

We are using a simple entity in the test, having an id and `String`
value property, which is also persisted. Before running the test, we
create an entity and save this.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
----

[.tok-nd]#@Entity#[.tok-o]#(#[.tok-n]#name# [.tok-o]#=#
[.tok-s]#"JPA_ENTITY_FIELD"#[.tok-o]#)# [.tok-kd]#public#
[.tok-kd]#class# [.tok-nc]#FieldAccessJPAEntity# [.tok-o]#\{#
[.tok-nd]#@Id# [.tok-nd]#@Column#[.tok-o]#(#[.tok-n]#name# [.tok-o]#=#
[.tok-s]#"ID_"#[.tok-o]#)# [.tok-kd]#private# [.tok-n]#Long#
[.tok-n]#id#[.tok-o]#;# [.tok-kd]#private# [.tok-n]#String#
[.tok-n]#value#[.tok-o]#;# [.tok-kd]#public#
[.tok-nf]#FieldAccessJPAEntity#[.tok-o]#()# [.tok-o]#\{# [.tok-c1]#//
Empty constructor needed for JPA# [.tok-o]#}# [.tok-kd]#public#
[.tok-n]#Long# [.tok-nf]#getId#[.tok-o]#()# [.tok-o]#\{#
[.tok-k]#return# [.tok-n]#id#[.tok-o]#;# [.tok-o]#}# [.tok-kd]#public#
[.tok-kt]#void# [.tok-nf]#setId#[.tok-o]#(#[.tok-n]#Long#
[.tok-n]#id#[.tok-o]#)# [.tok-o]#\{#
[.tok-k]#this#[.tok-o]#.#[.tok-na]#id# [.tok-o]#=#
[.tok-n]#id#[.tok-o]#;# [.tok-o]#}# [.tok-kd]#public# [.tok-n]#String#
[.tok-nf]#getValue#[.tok-o]#()# [.tok-o]#\{# [.tok-k]#return#
[.tok-n]#value#[.tok-o]#;# [.tok-o]#}# [.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#setValue#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#value#[.tok-o]#)# [.tok-o]#\{#
[.tok-k]#this#[.tok-o]#.#[.tok-na]#value# [.tok-o]#=#
[.tok-n]#value#[.tok-o]#;# [.tok-o]#}# [.tok-o]#}#

We start a new process instance, adding the entity as a variable. As
with other variables, they are stored in the persistent storage of the
engine. When the variable is requested the next time, it will be loaded
from the `EntityManager` based on the class and Id stored.

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#># [.tok-n]#variables# [.tok-o]#=#
[.tok-k]#new# [.tok-n]#HashMap#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#>();#
[.tok-n]#variables#[.tok-o]#.#[.tok-na]#put#[.tok-o]#(#[.tok-s]#"entityToUpdate"#[.tok-o]#,#
[.tok-n]#entityToUpdate#[.tok-o]#);# [.tok-n]#ProcessInstance#
[.tok-n]#processInstance# [.tok-o]#=#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#startProcessInstanceByKey#[.tok-o]#(#[.tok-s]#"UpdateJPAValuesProcess"#[.tok-o]#,#
[.tok-n]#variables#[.tok-o]#);#

The first node in our process definition contains a `serviceTask` that
will invoke the method `setValue` on `entityToUpdate`, which resolves to
the JPA variable we set earlier when starting the process instance and
will be loaded from the `EntityManager` associated with the current
engine’s context'.

[source,pygments,highlight]
----
1
2
----

[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#'theTask'#
[.tok-na]#name=#[.tok-s]#'updateJPAEntityTask'#
[.tok-na]#activiti:expression=#[.tok-s]#"$\{entityToUpdate.setValue('updatedValue')}"#
[.tok-nt]#/>#

When the service-task is finished, the process instance waits in a
userTask defined in the process definition, which allows us to inspect
the process instance. At this point, the `EntityManager` has been
flushed and the changes to the entity have been pushed to the database.
When we get the value of the variable `entityToUpdate`, it’s loaded
again and we get the entity with its `value` property set to
`updatedValue`.

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-c1]#// Servicetask in process 'UpdateJPAValuesProcess' should have
set value on entityToUpdate.# [.tok-n]#Object# [.tok-n]#updatedEntity#
[.tok-o]#=#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#getVariable#[.tok-o]#(#[.tok-n]#processInstance#[.tok-o]#.#[.tok-na]#getId#[.tok-o]#(),#
[.tok-s]#"entityToUpdate"#[.tok-o]#);#
[.tok-n]#assertTrue#[.tok-o]#(#[.tok-n]#updatedEntity#
[.tok-k]#instanceof# [.tok-n]#FieldAccessJPAEntity#[.tok-o]#);#
[.tok-n]#assertEquals#[.tok-o]#(#[.tok-s]#"updatedValue"#[.tok-o]#,#
[.tok-o]#((#[.tok-n]#FieldAccessJPAEntity#[.tok-o]#)#[.tok-n]#updatedEntity#[.tok-o]#).#[.tok-na]#getValue#[.tok-o]#());#

[[_query_jpa_process_variables]]
== 10.3.2. Query JPA process variables

You can query for `ProcessInstance`s and `Execution`s that have a
certain JPA-entity as variable value. *Note that only
`variableValueEquals(name, entity)` is supported for JPA-Entities on
`ProcessInstanceQuery` and `ExecutionQuery`*. Methods
`variableValueNotEquals`, `variableValueGreaterThan`,
`variableValueGreaterThanOrEqual`, `variableValueLessThan` and
`variableValueLessThanOrEqual` are unsupported and will throw an
`ActivitiException` when a JPA-Entity is passed as value.

[source,pygments,highlight]
----
1
2
----

[.tok-n]#ProcessInstance# [.tok-n]#result# [.tok-o]#=#
[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#createProcessInstanceQuery#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#variableValueEquals#[.tok-o]#(#[.tok-s]#"entityToQuery"#[.tok-o]#,#
[.tok-n]#entityToQuery#[.tok-o]#).#[.tok-na]#singleResult#[.tok-o]#();#

[[_advanced_example_using_spring_beans_and_jpa]]
== 10.3.3. Advanced example using Spring beans and JPA

A more advanced example, `JPASpringTest`, can be found in
`activiti-spring-examples`. It describes the following simple use case:

* An existing Spring-bean which uses JPA entities already exists which
allows for Loan Requests to be stored.
* Using Activiti, we can use the existing entities, obtained through the
existing bean, and use them as variable in our process. Process is
defined in the following steps:
+
** Service task that creates a new LoanRequest, using the existing
`LoanRequestBean` using variables received when starting the process
(e.g. could come from a start form). The created entity is stored as a
variable, using `activiti:resultVariable` which stores the expression
result as a variable.
** UserTask that allows a manager to review the request and
approve/disapprove, which is stored as a boolean variable
`approvedByManager`
** ServiceTask that updates the loan request entity so the entity is in
sync with the process.
** Depending on the value of the entity property `approved`, an
exclusive gateway is used to make a decision about what path to take
next: When the request is approved, process ends, otherwise, an extra
task will become available (Send rejection letter), so the customer can
be notified manually by a rejection letter.

Please note that the process doesn’t contain any forms, since it is only
used in a unit test.

image:images/jpa.spring.example.process.png[jpa.spring.example.process]

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
----

[.tok-cp]#<?xml version="1.0" encoding="UTF-8"?>#
[.tok-nt]#<definitions# [.tok-na]#id=#[.tok-s]#"taskAssigneeExample"#
[.tok-na]#xmlns=#[.tok-s]#"http://www.omg.org/spec/BPMN/20100524/MODEL"#
[.tok-na]#xmlns:xsi=#[.tok-s]#"http://www.w3.org/2001/XMLSchema-instance"#
[.tok-na]#xmlns:activiti=#[.tok-s]#"http://activiti.org/bpmn"#
[.tok-na]#targetNamespace=#[.tok-s]#"org.activiti.examples"#[.tok-nt]#>#
[.tok-nt]#<process# [.tok-na]#id=#[.tok-s]#"LoanRequestProcess"#
[.tok-na]#name=#[.tok-s]#"Process creating and handling loan
request"#[.tok-nt]#># [.tok-nt]#<startEvent#
[.tok-na]#id=#[.tok-s]#'theStart'# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#'flow1'#
[.tok-na]#sourceRef=#[.tok-s]#'theStart'#
[.tok-na]#targetRef=#[.tok-s]#'createLoanRequest'# [.tok-nt]#/>#
[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#'createLoanRequest'#
[.tok-na]#name=#[.tok-s]#'Create loan request'#
[.tok-na]#activiti:expression=#[.tok-s]#"$\{loanRequestBean.newLoanRequest(customerName,
amount)}"#
[.tok-na]#activiti:resultVariable=#[.tok-s]#"loanRequest"#[.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#'flow2'#
[.tok-na]#sourceRef=#[.tok-s]#'createLoanRequest'#
[.tok-na]#targetRef=#[.tok-s]#'approveTask'# [.tok-nt]#/>#
[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"approveTask"#
[.tok-na]#name=#[.tok-s]#"Approve request"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#'flow3'#
[.tok-na]#sourceRef=#[.tok-s]#'approveTask'#
[.tok-na]#targetRef=#[.tok-s]#'approveOrDissaprove'# [.tok-nt]#/>#
[.tok-nt]#<serviceTask# [.tok-na]#id=#[.tok-s]#'approveOrDissaprove'#
[.tok-na]#name=#[.tok-s]#'Store decision'#
[.tok-na]#activiti:expression=#[.tok-s]#"$\{loanRequest.setApproved(approvedByManager)}"#
[.tok-nt]#/># [.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#'flow4'#
[.tok-na]#sourceRef=#[.tok-s]#'approveOrDissaprove'#
[.tok-na]#targetRef=#[.tok-s]#'exclusiveGw'# [.tok-nt]#/>#
[.tok-nt]#<exclusiveGateway# [.tok-na]#id=#[.tok-s]#"exclusiveGw"#
[.tok-na]#name=#[.tok-s]#"Exclusive Gateway approval"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#"endFlow1"#
[.tok-na]#sourceRef=#[.tok-s]#"exclusiveGw"#
[.tok-na]#targetRef=#[.tok-s]#"theEnd"#[.tok-nt]#>#
[.tok-nt]#<conditionExpression#
[.tok-na]#xsi:type=#[.tok-s]#"tFormalExpression"#[.tok-nt]##>##$\{loanRequest.approved}[.tok-nt]#</conditionExpression>#
[.tok-nt]#</sequenceFlow># [.tok-nt]#<sequenceFlow#
[.tok-na]#id=#[.tok-s]#"endFlow2"#
[.tok-na]#sourceRef=#[.tok-s]#"exclusiveGw"#
[.tok-na]#targetRef=#[.tok-s]#"sendRejectionLetter"#[.tok-nt]#>#
[.tok-nt]#<conditionExpression#
[.tok-na]#xsi:type=#[.tok-s]#"tFormalExpression"#[.tok-nt]##>##$\{!loanRequest.approved}[.tok-nt]#</conditionExpression>#
[.tok-nt]#</sequenceFlow># [.tok-nt]#<userTask#
[.tok-na]#id=#[.tok-s]#"sendRejectionLetter"#
[.tok-na]#name=#[.tok-s]#"Send rejection letter"# [.tok-nt]#/>#
[.tok-nt]#<sequenceFlow# [.tok-na]#id=#[.tok-s]#'flow5'#
[.tok-na]#sourceRef=#[.tok-s]#'sendRejectionLetter'#
[.tok-na]#targetRef=#[.tok-s]#'theOtherEnd'# [.tok-nt]#/>#
[.tok-nt]#<endEvent# [.tok-na]#id=#[.tok-s]#'theEnd'# [.tok-nt]#/>#
[.tok-nt]#<endEvent# [.tok-na]#id=#[.tok-s]#'theOtherEnd'# [.tok-nt]#/>#
[.tok-nt]#</process># [.tok-nt]#</definitions>#

Although the example above is quite simple, it shows the power of using
JPA combined with Spring and parametrized method-expressions. The
process requires no custom java-code at all (except for the Spring-bean
off course) and speeds up development drastically.

== 11. History

History is the component that captures what happened during process
execution and stores it permanently. In contrast to the runtime data,
the history data will remain present in the DB also after process
instances have completed.

There are 5 history entities:

* `HistoricProcessInstance`s containing information about current and
past process instances.
* `HistoricVariableInstance`s containing the latest value of a process
variable or task variable.
* `HistoricActivityInstance`s containing information about a single
execution of an activity (node in the process).
* `HistoricTaskInstance`s containing information about current and past
(completed and deleted) task instances.
* `HistoricDetail`s containing various kinds of information related to
either a historic process instances, an activity instance or a task
instance.

Since the DB contains historic entities for past as well as ongoing
instances, you might want to consider querying these tables in order to
minimize access to the runtime process instance data and that way
keeping the runtime execution performant.

Later on, this information will be exposed in Activiti Explorer. Also,
it will be the information from which the reports will be generated.

[[historyQuery]]
=== 11.1. Querying history

In the API, it’s possible to query all 5 of the History entities. The
HistoryService exposes the methods
`createHistoricProcessInstanceQuery()`,
`createHistoricVariableInstanceQuery()`,
`createHistoricActivityInstanceQuery()`, `createHistoricDetailQuery()`
and `createHistoricTaskInstanceQuery()`.

Below are a couple of examples that show some of the possibilities of
the query API for history. Full description of the possibilities can be
found in the http://activiti.org/javadocs/index.html[javadocs], in the
`org.activiti.engine.history` package.

[[historyQueryProcessInstance]]
==== 11.1.1. HistoricProcessInstanceQuery

Get 10 `HistoricProcessInstances` that are finished and which took the
most time to complete (the longest duration) of all finished processes
with definition _XXX_.

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-n]#historyService#[.tok-o]#.#[.tok-na]#createHistoricProcessInstanceQuery#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#finished#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#processDefinitionId#[.tok-o]#(#[.tok-s]#"XXX"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#orderByProcessInstanceDuration#[.tok-o]#().#[.tok-na]#desc#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#listPage#[.tok-o]#(#[.tok-mi]#0#[.tok-o]#,#
[.tok-mi]#10#[.tok-o]#);#

[[historyQueryVariableInstance]]
== 11.1.2. HistoricVariableInstanceQuery

Get all `HistoricVariableInstances` from a finished process instance
with id _xxx_ ordered by variable name.

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-n]#historyService#[.tok-o]#.#[.tok-na]#createHistoricVariableInstanceQuery#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#processInstanceId#[.tok-o]#(#[.tok-s]#"XXX"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#orderByVariableName#[.tok-o]#.#[.tok-na]#desc#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#list#[.tok-o]#();#

[[historyQueryActivityInstance]]
== 11.1.3. HistoricActivityInstanceQuery

Get the last `HistoricActivityInstance` of type _serviceTask_ that has
been finished in any process that uses the processDefinition with id
XXX.

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-n]#historyService#[.tok-o]#.#[.tok-na]#createHistoricActivityInstanceQuery#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#activityType#[.tok-o]#(#[.tok-s]#"serviceTask"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#processDefinitionId#[.tok-o]#(#[.tok-s]#"XXX"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#finished#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#orderByHistoricActivityInstanceEndTime#[.tok-o]#().#[.tok-na]#desc#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#listPage#[.tok-o]#(#[.tok-mi]#0#[.tok-o]#,#
[.tok-mi]#1#[.tok-o]#);#

[[historyQueryDetail]]
== 11.1.4. HistoricDetailQuery

The next example, gets all variable-updates that have been done in
process with id 123. Only `HistoricVariableUpdate`s will be returned by
this query. Note that it’s possible that a certain variable name has
multiple `HistoricVariableUpdate` entries, for each time the variable
was updated in the process. You can use `orderByTime` (the time the
variable update was done) or `orderByVariableRevision` (revision of
runtime variable at the time of updating) to find out in what order they
occurred.

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-n]#historyService#[.tok-o]#.#[.tok-na]#createHistoricDetailQuery#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#variableUpdates#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#processInstanceId#[.tok-o]#(#[.tok-s]#"123"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#orderByVariableName#[.tok-o]#().#[.tok-na]#asc#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#list#[.tok-o]#()#

This example gets all link:#formProperties[form-properties] that were
submitted in any task or when starting the process with id "123". Only
`HistoricFormProperties`s will be returned by this query.

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-n]#historyService#[.tok-o]#.#[.tok-na]#createHistoricDetailQuery#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#formProperties#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#processInstanceId#[.tok-o]#(#[.tok-s]#"123"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#orderByVariableName#[.tok-o]#().#[.tok-na]#asc#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#list#[.tok-o]#()#

The last example gets all variable updates that were performed on the
task with id "123". This returns all `HistoricVariableUpdates` for
variables that were set on the task (task local variables), and NOT on
the process instance.

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-n]#historyService#[.tok-o]#.#[.tok-na]#createHistoricDetailQuery#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#variableUpdates#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#taskId#[.tok-o]#(#[.tok-s]#"123"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#orderByVariableName#[.tok-o]#().#[.tok-na]#asc#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#list#[.tok-o]#()#

Task local variables can be set using the `TaskService` or on a
`DelegateTask`, inside `TaskListener`:

[source,pygments,highlight]
----
1
----

[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#setVariableLocal#[.tok-o]#(#[.tok-s]#"123"#[.tok-o]#,#
[.tok-s]#"myVariable"#[.tok-o]#,# [.tok-s]#"Variable value"#[.tok-o]#);#

[source,pygments,highlight]
----
1
2
3
----

[.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#notify#[.tok-o]#(#[.tok-n]#DelegateTask#
[.tok-n]#delegateTask#[.tok-o]#)# [.tok-o]#\{#
[.tok-n]#delegateTask#[.tok-o]#.#[.tok-na]#setVariableLocal#[.tok-o]#(#[.tok-s]#"myVariable"#[.tok-o]#,#
[.tok-s]#"Variable value"#[.tok-o]#);# [.tok-o]#}#

[[historyQueryTaskInstance]]
== 11.1.5. HistoricTaskInstanceQuery

Get 10 `HistoricTaskInstance`s that are finished and which took the most
time to complete (the longest duration) of all tasks.

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-n]#historyService#[.tok-o]#.#[.tok-na]#createHistoricTaskInstanceQuery#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#finished#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#orderByHistoricTaskInstanceDuration#[.tok-o]#().#[.tok-na]#desc#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#listPage#[.tok-o]#(#[.tok-mi]#0#[.tok-o]#,#
[.tok-mi]#10#[.tok-o]#);#

Get `HistoricTaskInstance`s that are deleted with a delete reason that
contains "invalid", which were last assigned to user _kermit_.

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-n]#historyService#[.tok-o]#.#[.tok-na]#createHistoricTaskInstanceQuery#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#finished#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#taskDeleteReasonLike#[.tok-o]#(#[.tok-s]#"%invalid%"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#taskAssignee#[.tok-o]#(#[.tok-s]#"kermit"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#listPage#[.tok-o]#(#[.tok-mi]#0#[.tok-o]#,#
[.tok-mi]#10#[.tok-o]#);#

[[historyConfig]]
== 11.2. History configuration

The history level can be configured programmatically, using the enum
org.activiti.engine.impl.history.HistoryLevel (or _HISTORY_ constants
defined on `ProcessEngineConfiguration` for versions prior to 5.11):

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-n]#ProcessEngine# [.tok-n]#processEngine# [.tok-o]#=#
[.tok-n]#ProcessEngineConfiguration#
[.tok-o]#.#[.tok-na]#createProcessEngineConfigurationFromResourceDefault#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#setHistory#[.tok-o]#(#[.tok-n]#HistoryLevel#[.tok-o]#.#[.tok-na]#AUDIT#[.tok-o]#.#[.tok-na]#getKey#[.tok-o]#())#
[.tok-o]#.#[.tok-na]#buildProcessEngine#[.tok-o]#();#

The level can also be configured in activiti.cfg.xml or in a
spring-context:

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"processEngineConfiguration"#
[.tok-na]#class=#[.tok-s]#"org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration"#[.tok-nt]#>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"history"#
[.tok-na]#value=#[.tok-s]#"audit"# [.tok-nt]#/># ... [.tok-nt]#</bean>#

Following history levels can be configured:

* `none`: skips all history archiving. This is the most performant for
runtime process execution, but no historical information will be
available.
* `activity`: archives all process instances and activity instances. At
the end of the process instance, the latest values of the top level
process instance variables will be copied to historic variable
instances. No details will be archived.
* `audit`: This is the default. It archives all process instances,
activity instances, keeps variable values continuously in sync and all
form properties that are submitted so that all user interaction through
forms is traceable and can be audited.
* `full`: This is the highest level of history archiving and hence the
slowest. This level stores all information as in the `audit` level plus
all other possible details, mostly this are process variable updates.

*Prior to Activiti 5.11, the history level was stored in the database
(table `ACT_GE_PROPERTY`, property with name `historyLevel`). Starting
from 5.11, this value is not used anymore and is ignored/deleted from
the database. The history can now be changed between 2 boots of the
engine, without an exception being thrown in case the level changed from
the previous engine-boot.*

[[historyFormAuditPurposes]]
== 11.3. History for audit purposes

When link:#historyConfig[configuring] at least `audit` level for
configuration. Then all properties submitted through methods
`FormService.submitStartFormData(String processDefinitionId, Map<String, String> properties)`
and
`FormService.submitTaskFormData(String taskId, Map<String, String> properties)`
are recorded.

Form properties can be retrieved with the query API like this:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-n]#historyService#
[.tok-o]#.#[.tok-na]#createHistoricDetailQuery#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#formProperties#[.tok-o]#()# [.tok-o]#...#
[.tok-o]#.#[.tok-na]#list#[.tok-o]#();#

In that case only historic details of type `HistoricFormProperty` are
returned.

If you’ve set the authenticated user before calling the submit methods
with `IdentityService.setAuthenticatedUserId(String)` then that
authenticated user who submitted the form will be accessible in the
history as well with `HistoricProcessInstance.getStartUserId()` for
start forms and `HistoricActivityInstance.getAssignee()` for task forms.

[[activitiDesigner]]
== 12. Eclipse Designer

Activiti comes with an Eclipse plugin, the Activiti Eclipse Designer,
that can be used to graphically model, test and deploy BPMN 2.0
processes.

[[eclipseDesignerInstallation]]
=== 12.1. Installation

The following installation instructions are verified on
http://www.eclipse.org/downloads/[Eclipse Kepler and Indigo]. Note that
Eclipse Helios is *NOT* supported.

Go to *Help → Install New Software*. In the following panel, click on
_Add_ button and fill in the following fields:

* *Name:*Activiti BPMN 2.0 designer
* *Location:*http://activiti.org/designer/update/

image:images/designer.add.update.site.png[designer.add.update.site]

Make sure the *"Contact all updates sites.."* checkbox is *checked*,
because all the necessary plugins will then be downloaded by Eclipse.

[[eclipseDesignerEditorFeatures]]
=== 12.2. Activiti Designer editor features

* Create Activiti projects and diagrams.

image:images/designer.create.activiti.project.png[designer.create.activiti.project]

* The Activiti Designer creates a .bpmn file when creating a new
Activiti diagram. When opened with the Activiti Diagram Editor view this
will provide a graphical modeling canvas and palette. The same file can
however be opened with an XML editor and it then shows the BPMN 2.0 XML
elements of the process definition. So the Activiti Designer works with
only one file for both the graphical diagram as well as the BPMN 2.0
XML. Note that in Activiti 5.9 the .bpmn extension is not yet supported
as deployment artifact for a process definition. Therefore the "create
deployment artifacts" feature of the Activiti Designer generates a BAR
file with a .bpmn20.xml file that contains the content of the .bpmn
file. You can also do a quick file rename yourself. Also note that you
can open a .bpmn20.xml file with the Activiti Diagram Editor view as
well.

image:images/designer.bpmn.file.png[designer.bpmn.file]

* BPMN 2.0 XML files can be imported into the Activiti Designer and a
diagram will be created. Just copy the BPMN 2.0 XML file to your project
and open the file with the Activiti Diagram Editor view. The Activiti
Designer uses the BPMN DI information of the file to create the diagram.
If you have a BPMN 2.0 XML file without BPMN DI information, no diagram
can be created.

image:images/designer.open.importedfile.png[designer.open.importedfile]

* For deployment a BAR file and optionally a JAR file is created by the
Activiti Designer by right-clicking on an Activiti project in the
package explorer and choosing the _Create deployment artifacts_ option
at the bottom of the popup menu. For more information about the
deployment functionality of the Designer look at the
link:#eclipseDesignerDeployment[deployment] section.

image:images/designer.create.deployment.png[designer.create.deployment]

* Generate a unit test (right click on a BPMN 2.0 XML file in the
package explorer and select _generate unit test_) A unit test is
generated with an Activiti configuration that runs on an embedded H2
database. You can now run the unit test to test your process definition.

image:images/designer.unittest.generate.png[designer.unittest.generate]

* The Activiti project is generated as a Maven project. To configure the
dependencies you need to run _mvn eclipse:eclipse_ and the Maven
dependencies will be configured as expected. Note that for process
design Maven dependencies are not needed. They are only needed to run
unit tests.

image:images/designer.project.maven.png[designer.project.maven]

[[eclipseDesignerBPMNFeatures]]
=== 12.3. Activiti Designer BPMN features

* Support for start none event, start error event, timer start event,
end none event, end error event, sequence flow, parallel gateway,
exclusive gateway, inclusive gateway, event gateway, embedded
subprocess, event sub process, call activity, pool, lane, script task,
user task, service task, mail task, manual task, business rule task,
receive task, timer boundary event, error boundary event, signal
boundary event, timer catching event, signal catching event, signal
throwing event, none throwing event and four Alfresco specific elements
(user, script, mail tasks and start event).

image:images/designer.model.process.png[designer.model.process]

* You can quickly change the type of a task by hovering over the element
and choosing the new task type.

image:images/designer.model.quick.change.png[designer.model.quick.change]

* You can quickly add new elements hovering over an element and choosing
a new element type.

image:images/designer.model.quick.new.png[designer.model.quick.new]

* Java class, expression or delegate expression configuration is
supported for the Java service task. In addition field extensions can be
configured.

image:images/designer.servicetask.property.png[designer.servicetask.property]

* Support for pools and lanes. Because Activiti reads different pools as
different process definition, it makes the most sense to use only one
pool. If you use multiple pools, be aware that drawing sequence flows
between the pools will result in problems when deploying the process in
the Activiti Engine. You can add as much lanes to a pool as you want.

image:images/designer.model.poolandlanes.png[designer.model.poolandlanes]

* You can add labels to sequence flows by filling the name property. You
can position the labels yourself as the position is saved as part of the
BPMN 2.0 XML DI information.

image:images/designer.model.labels.png[designer.model.labels]

* Support for event sub processes.

image:images/designer.model.eventsubprocess.png[designer.model.eventsubprocess]

* Support for expanded embedded sub processes. You can also add an
embedded sub process in another embedded sub process.

image:images/designer.embeddedprocess.canvas.png[designer.embeddedprocess.canvas]

* Support for timer boundary events on tasks and embedded sub processes.
Although, the timer boundary event makes the most sense when using it on
a user task or an embedded sub process in the Activiti Designer.

image:images/designer.timerboundary.canvas.png[designer.timerboundary.canvas]

* Support for additional Activiti extensions like the Mail task, the
candidate configuration of User tasks and Script task configuration.

image:images/designer.mailtask.property.png[designer.mailtask.property]

* Support for the Activiti execution and task listeners. You can also
add field extensions for execution listeners.

image:images/designer.listener.configuration.png[designer.listener.configuration]

* Support for conditions on sequence flows.

image:images/designer.sequence.condition.png[designer.sequence.condition]

[[eclipseDesignerDeployment]]
=== 12.4. Activiti Designer deployment features

Deploying process definitions and task forms on the Activiti Engine is
not hard. You need a BAR file containing the process definition BPMN 2.0
XML file and optionally task forms and an image of the process that can
be viewed in the Activiti Explorer. In the Activiti Designer it’s made
very easy to create a BAR file. When you’ve finished your process
implementation just right-click on your Activiti project in the package
explorer and choose for the *Create deployment artifacts* option at the
bottom of the popup menu.

image:images/designer.create.deployment.png[designer.create.deployment]

Then a deployment directory is created containing the BAR file and
optionally a JAR file with the Java classes of your Activiti project.

image:images/designer.deployment.dir.png[designer.deployment.dir]

This file can now be uploaded to the Activiti Engine using the
deployments tab in Activiti Explorer, and you are ready to go.

When your project contains Java classes, the deployment is a bit more
work. In that case the *Create deployment artifacts* step in the
Activiti Designer will also generate a JAR file containing the compiled
classes. This JAR file must be deployed to the activiti-XXX/WEB-INF/lib
directory in your Activiti Tomcat installation directory. This makes the
classes available on the classpath of the Activiti Engine.

[[eclipseDesignerExtending]]
=== 12.5. Extending Activiti Designer

You can extend the default functionality offered by Activiti Designer.
This section documents which extensions are available, how they can be
used and provides some usage examples. Extending Activiti Designer is
useful in cases where the default functionality doesn’t suit your needs,
you require additional capabilities or have domain specific requirements
when modeling business processes. Extension of Activiti Designer falls
into two distinct categories, extending the palette and extending output
formats. Each of these extension ways requires a specific approach and
different technical expertise.

[width="100%",cols="50%,50%",]
|===
|__ a|
Extending Activiti Designer requires technical knowledge and more
specifically, knowledge of programming in Java. Depending on the type of
extension you want to create, you might also need to be familiar with
Maven, Eclipse, OSGi, Eclipse extensions and SWT.

|===

[[eclipseDesignerCustomizingPalette]]
==== 12.5.1. Customizing the palette

You can customize the palette that is offered to users when modeling
processes. The palette is the collection of shapes that can be dragged
onto the canvas in a process diagram and is displayed to the right hand
side of the canvas. As you can see in the default palette, the default
shapes are grouped into compartments (these are called "drawers") for
Events, Gateways and so on. There are two options built-in to Activiti
Designer to customize the drawers and shapes in the palette:

* Adding your own shapes / nodes to existing or new drawers
* Disabling any or all of the default BPMN 2.0 shapes offered by
Activiti Designer, with the exception of the connection and selection
tools

In order to customize the palette, you create a JAR file that is added
to a specific installation of Activiti Designer (more on
link:#eclipseDesignerApplyingExtension[how to do that] later). Such a
JAR file is called an _extension_. By writing classes that are included
in your extension, Activiti Designer understands which customizations
you wish to make. In order for this to work, your classes should
implement certain interfaces. There is an integration library available
with those interfaces and base classes to extend which you should add to
your project’s classpath.

You can find the code examples listed below in source control with
Activiti Designer. Take a look in the `examples/money-tasks` directory
in the `projects/designer` directory of Activiti’s source code.

[width="100%",cols="50%,50%",]
|===
|__ a|
You can setup your project in whichever tool you prefer and build the
JAR with your build tool of choice. For the instructions below, a setup
is assumed with Eclipse Kepler or Indigo, using Maven (3.x) as build
tool, but any setup should enable you to create the same results.

|===

[[_extension_setup_eclipse_maven]]
===== Extension setup (Eclipse/Maven)

Download and extract http://www.eclipse.org/downloads[Eclipse] (most
recent versions should work) and a recent version (3.x) of
http://maven.apache.org/download.html[Apache Maven]. If you use a 2.x
version of Maven, you will run into problems when building your project,
so make sure your version is up to date. We assume you are familiar with
using basic features and the Java editor in Eclipse. It’s up to you
whether you prefer to use Eclipse’s features for Maven or run Maven
commands from a command prompt.

Create a new project in Eclipse. This can be a general project type.
Create a `pom.xml` file at the root of the project to contain the Maven
project setup. Also create folders for the `src/main/java` and
`src/main/resources` folders, which are Maven conventions for your Java
source files and resources respectively. Open the `pom.xml` file and add
the following lines:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
----

[.tok-nt]#<project#
[.tok-na]#xmlns=#[.tok-s]#"http://maven.apache.org/POM/4.0.0"#
[.tok-na]#xmlns:xsi=#[.tok-s]#"http://www.w3.org/2001/XMLSchema-instance"#
[.tok-na]#xsi:schemaLocation=#[.tok-s]#"http://maven.apache.org/POM/4.0.0
http://maven.apache.org/maven-v4_0_0.xsd"#[.tok-nt]#>#
[.tok-nt]##<modelVersion>##4.0.0[.tok-nt]##</modelVersion>##
[.tok-nt]##<groupId>##org.acme[.tok-nt]##</groupId>##
[.tok-nt]##<artifactId>##money-tasks[.tok-nt]##</artifactId>##
[.tok-nt]##<version>##1.0.0[.tok-nt]##</version>##
[.tok-nt]##<packaging>##jar[.tok-nt]##</packaging>##
[.tok-nt]##<name>##Acme Corporation Money Tasks[.tok-nt]##</name>## ...
[.tok-nt]#</project>#

As you can see, this is just a basic pom.xml file that defines a
`groupId`, `artifactId` and `version` for the project. We will create a
customization that includes a single custom node for our money business.

Add the integration library to your project’s dependencies by including
this dependency in your `pom.xml` file:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
----

[.tok-nt]#<dependencies># [.tok-nt]#<dependency>#
[.tok-nt]##<groupId>##org.activiti.designer[.tok-nt]##</groupId>##
[.tok-nt]##<artifactId>##org.activiti.designer.integration[.tok-nt]##</artifactId>##
[.tok-nt]##<version>##5.12.0[.tok-nt]##</version>## [.tok-c]#<!-- Use
the current Activiti Designer version -->#
[.tok-nt]##<scope>##compile[.tok-nt]##</scope>##
[.tok-nt]#</dependency># [.tok-nt]#</dependencies># ...
[.tok-nt]#<repositories># [.tok-nt]#<repository>#
[.tok-nt]##<id>##Activiti[.tok-nt]##</id>##
[.tok-nt]##<url>##https://maven.alfresco.com/nexus/content/groups/public/[.tok-nt]#</url>#
[.tok-nt]#</repository># [.tok-nt]#</repositories>#

Finally, in the` pom.xml` file, add the configuration for the
`maven-compiler-plugin` so the Java source level is at least 1.5 (see
snippet below). You will need this in order to use annotations. You can
also include instructions for Maven to generate the JAR’s `MANIFEST.MF`
file. This is not required, but you can use a specific property in the
manifest to provide a name for your extension (this name may be shown at
certain places in the designer and is primarily intended for future use
if you have several extensions in the designer). If you wish to do so,
include the following snippet in `pom.xml`:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
----

[.tok-nt]#<build># [.tok-nt]#<plugins># [.tok-nt]#<plugin>#
[.tok-nt]##<artifactId>##maven-compiler-plugin[.tok-nt]##</artifactId>##
[.tok-nt]#<configuration>#
[.tok-nt]##<source>##1.5[.tok-nt]##</source>##
[.tok-nt]##<target>##1.5[.tok-nt]##</target>##
[.tok-nt]##<showDeprecation>##true[.tok-nt]##</showDeprecation>##
[.tok-nt]##<showWarnings>##true[.tok-nt]##</showWarnings>##
[.tok-nt]##<optimize>##true[.tok-nt]##</optimize>##
[.tok-nt]#</configuration># [.tok-nt]#</plugin># [.tok-nt]#<plugin>#
[.tok-nt]##<groupId>##org.apache.maven.plugins[.tok-nt]##</groupId>##
[.tok-nt]##<artifactId>##maven-jar-plugin[.tok-nt]##</artifactId>##
[.tok-nt]##<version>##2.3.1[.tok-nt]##</version>##
[.tok-nt]#<configuration># [.tok-nt]#<archive>#
[.tok-nt]##<index>##true[.tok-nt]##</index>## [.tok-nt]#<manifest>#
[.tok-nt]##<addClasspath>##false[.tok-nt]##</addClasspath>##
[.tok-nt]##<addDefaultImplementationEntries>##true[.tok-nt]##</addDefaultImplementationEntries>##
[.tok-nt]#</manifest># [.tok-nt]#<manifestEntries>#
[.tok-nt]##<ActivitiDesigner-Extension-Name>##Acme
Money[.tok-nt]##</ActivitiDesigner-Extension-Name>##
[.tok-nt]#</manifestEntries># [.tok-nt]#</archive>#
[.tok-nt]#</configuration># [.tok-nt]#</plugin># [.tok-nt]#</plugins>#
[.tok-nt]#</build>#

The name for the extension is described by the
`ActivitiDesigner-Extension-Name` property. The only thing left to do
now is tell Eclipse to setup the project according to the instructions
in `pom.xml`. So open up a command shell and go to the root folder of
your project in the Eclipse workspace. Then execute the following Maven
command:

....
mvn eclipse:eclipse
....

Wait until the build is successful. Refresh the project (use the
project’s context menu (right-click) and select `Refresh`). You should
now have the `src/main/java` and `src/main/resources` folders as source
folders in the Eclipse project.

[width="100%",cols="50%,50%",]
|===
|__ a|
You can of course also use the http://www.eclipse.org/m2e[m2eclipse]
plugin and simply enable Maven dependency management from the context
menu (right-click) of the project. Then choose `Maven` >
`Update project configuration` from the project’s context menu. That
should setup the source folders as well.

|===

That’s it for the setup. Now you’re ready to start creating
customizations to Activiti Designer!

[[eclipseDesignerApplyingExtension]]
== Applying your extension to Activiti Designer

You might be wondering how you can add your extension to Activiti
Designer so your customizations are applied. These are the steps to do
just that: * Once you’ve created your extension JAR (for instance, by
performing a mvn install in your project to build it with Maven), you
need to transfer the extension to the computer where Activiti Designer
is installed; * Store the extension somewhere on the hard drive where it
will be able to remain and remember the location. _Note:_ the location
must be outside the Eclipse workspace of Activiti Designer - storing the
extension inside the workspace will lead to the user getting a popup
error message and the extensions being unavailable; * Start Activiti
Designer and from the menu, select `Window` > `Preferences` * In the
preferences screen, type `user` as keyword. You should see an option to
access the `User Libraries` in Eclipse in the `Java` section.

image:images/designer.preferences.userlibraries.png[designer.preferences.userlibraries]

* Select the User Libraries item and a tree view shows up to the right
where you can add libraries. You should see the default group where you
can add extensions to Activiti Designer (depending on your Eclipse
installation, you might see several others as well).

image:images/designer.preferences.userlibraries.activiti.empty.png[designer.preferences.userlibraries.activiti.empty]

* Select the `Activiti Designer Extensions` group and click the
`Add JARs…​` button. Navigate to the folder where your extension is
stored and select the extension file you want to add. After completing
this, your preferences screen should show the extension as part of the
`Activiti Designer Extensions` group, as shown below.

image:images/designer.preferences.userlibraries.activiti.moneytasks.png[designer.preferences.userlibraries.activiti.moneytasks]

* Click the `OK` button to save and close the preferences dialog. The
`Activiti Designer Extensions` group is automatically added to new
Activiti projects you create. You can see the user library as entry in
the project’s tree in the Navigator or Package Explorer. If you already
had Activiti projects in the workspace, you should also see the new
extensions show up in the group. An example is shown below.

image:images/designer.userlibraries.project.png[designer.userlibraries.project]

Diagrams you open will now have the shapes from the new extension in
their palette (or shapes disabled, depending on the customizations in
your extension). If you already had a diagram opened, close and reopen
it to see the changes in the palette.

[[_adding_shapes_to_the_palette]]
== Adding shapes to the palette

With your project set up, you can now easily add shapes to the palette.
Each shape you wish to add is represented by a class in your JAR. Take
note that these classes are not the classes that will be used by the
Activiti engine during runtime. In your extension you describe the
properties that can be set in Activiti Designer for each shape. From
these shapes, you can also define the runtime characteristics that
should be used by the engine when a process instance reaches the node in
the process. The runtime characteristics can use any of the options that
Activiti supports for regular `ServiceTask`s. See
link:#eclipseDesignerConfiguringRuntime[this section] for more details.

A shape’s class is a simple Java class, to which a number of annotations
are added. The class should implement the `CustomServiceTask` interface,
but you shouldn’t implement this interface yourself. Extend the
`AbstractCustomServiceTask` base class instead (at the moment you MUST
extend this class directly, so no abstract classes in between). In the
Javadoc for that class you can find instructions on the defaults it
provides and when you should override any of the methods it already
implements. Overrides allow you to do things such as providing icons for
the palette and in the shape on the canvas (these can be different) and
specifying the base shape you want the node to have (activity, event,
gateway).

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
----

[.tok-cm]#/**# [.tok-cm]# * @author John Doe# [.tok-cm]# * @version 1#
[.tok-cm]# * @since 1.0.0# [.tok-cm]# */# [.tok-kd]#public#
[.tok-kd]#class# [.tok-nc]#AcmeMoneyTask# [.tok-kd]#extends#
[.tok-n]#AbstractCustomServiceTask# [.tok-o]#\{# [.tok-o]#...#
[.tok-o]#}#

You will need to implement the `getName()` method to determine the name
the node will have in the palette. You can also put the nodes in their
own drawer and provide an icon. Override the appropriate methods from
`AbstractCustomServiceTask`. If you want to provide an icon, make sure
it’s in the `src/main/resources` package in your JAR and is about 16x16
pixels and a JPEG or PNG format. The path you supply is relative to that
folder.

You can add properties to the shape by adding members to the class and
annotating them with the `@Property` annotation like this:

[source,pygments,highlight]
----
1
2
3
----

[.tok-nd]#@Property#[.tok-o]#(#[.tok-n]#type# [.tok-o]#=#
[.tok-n]#PropertyType#[.tok-o]#.#[.tok-na]#TEXT#[.tok-o]#,#
[.tok-n]#displayName# [.tok-o]#=# [.tok-s]#"Account Number"#[.tok-o]#)#
[.tok-nd]#@Help#[.tok-o]#(#[.tok-n]#displayHelpShort# [.tok-o]#=#
[.tok-s]#"Provide an account number"#[.tok-o]#,#
[.tok-n]#displayHelpLong# [.tok-o]#=#
[.tok-n]#HELP_ACCOUNT_NUMBER_LONG#[.tok-o]#)# [.tok-kd]#private#
[.tok-n]#String# [.tok-n]#accountNumber#[.tok-o]#;#

There are several `PropertyType` values you can use, which are described
in more detail in link:#eclipseDesignerPropertyTypes[this section]. You
can make a field required by setting the required attribute to true. A
message and red background will appear if the user doesn’t fill out the
field.

If you want to ensure the order of the various properties in your class
as they appear in the property screen, you should specify the order
attribute of the `@Property` annotation.

As you can see, there’s also a `@Help` annotation that’s used to provide
the user some guidance when filling out the field. You can also use the
`@Help` annotation on the class itself - this information is shown at
the top of the property sheet presented to the user.

Below is the listing for a further elaboration of the `MoneyTask`. A
comment field has been added and you can see an icon is included for the
node.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
----

[.tok-cm]#/**# [.tok-cm]# * @author John Doe# [.tok-cm]# * @version 1#
[.tok-cm]# * @since 1.0.0# [.tok-cm]# */#
[.tok-nd]#@Runtime#[.tok-o]#(#[.tok-n]#javaDelegateClass# [.tok-o]#=#
[.tok-s]#"org.acme.runtime.AcmeMoneyJavaDelegation"#[.tok-o]#)#
[.tok-nd]#@Help#[.tok-o]#(#[.tok-n]#displayHelpShort# [.tok-o]#=#
[.tok-s]#"Creates a new account"#[.tok-o]#,# [.tok-n]#displayHelpLong#
[.tok-o]#=# [.tok-s]#"Creates a new account using the account number
specified"#[.tok-o]#)# [.tok-kd]#public# [.tok-kd]#class#
[.tok-nc]#AcmeMoneyTask# [.tok-kd]#extends#
[.tok-n]#AbstractCustomServiceTask# [.tok-o]#\{# [.tok-kd]#private#
[.tok-kd]#static# [.tok-kd]#final# [.tok-n]#String#
[.tok-n]#HELP_ACCOUNT_NUMBER_LONG# [.tok-o]#=# [.tok-s]#"Provide a
number that is suitable as an account number."#[.tok-o]#;#
[.tok-nd]#@Property#[.tok-o]#(#[.tok-n]#type# [.tok-o]#=#
[.tok-n]#PropertyType#[.tok-o]#.#[.tok-na]#TEXT#[.tok-o]#,#
[.tok-n]#displayName# [.tok-o]#=# [.tok-s]#"Account Number"#[.tok-o]#,#
[.tok-n]#required# [.tok-o]#=# [.tok-kc]#true#[.tok-o]#)#
[.tok-nd]#@Help#[.tok-o]#(#[.tok-n]#displayHelpShort# [.tok-o]#=#
[.tok-s]#"Provide an account number"#[.tok-o]#,#
[.tok-n]#displayHelpLong# [.tok-o]#=#
[.tok-n]#HELP_ACCOUNT_NUMBER_LONG#[.tok-o]#)# [.tok-kd]#private#
[.tok-n]#String# [.tok-n]#accountNumber#[.tok-o]#;#
[.tok-nd]#@Property#[.tok-o]#(#[.tok-n]#type# [.tok-o]#=#
[.tok-n]#PropertyType#[.tok-o]#.#[.tok-na]#MULTILINE_TEXT#[.tok-o]#,#
[.tok-n]#displayName# [.tok-o]#=# [.tok-s]#"Comments"#[.tok-o]#)#
[.tok-nd]#@Help#[.tok-o]#(#[.tok-n]#displayHelpShort# [.tok-o]#=#
[.tok-s]#"Provide comments"#[.tok-o]#,# [.tok-n]#displayHelpLong#
[.tok-o]#=# [.tok-s]#"You can add comments to the node to provide a
brief description."#[.tok-o]#)# [.tok-kd]#private# [.tok-n]#String#
[.tok-n]#comments#[.tok-o]#;# [.tok-cm]#/*# [.tok-cm]# * (non-Javadoc)#
[.tok-cm]# *# [.tok-cm]# * @see
org.activiti.designer.integration.servicetask.AbstractCustomServiceTask
#contributeToPaletteDrawer()# [.tok-cm]# */# [.tok-nd]#@Override#
[.tok-kd]#public# [.tok-n]#String#
[.tok-nf]#contributeToPaletteDrawer#[.tok-o]#()# [.tok-o]#\{#
[.tok-k]#return# [.tok-s]#"Acme Corporation"#[.tok-o]#;# [.tok-o]#}#
[.tok-nd]#@Override# [.tok-kd]#public# [.tok-n]#String#
[.tok-nf]#getName#[.tok-o]#()# [.tok-o]#\{# [.tok-k]#return#
[.tok-s]#"Money node"#[.tok-o]#;# [.tok-o]#}# [.tok-cm]#/*# [.tok-cm]# *
(non-Javadoc)# [.tok-cm]# *# [.tok-cm]# * @see
org.activiti.designer.integration.servicetask.AbstractCustomServiceTask
#getSmallIconPath()# [.tok-cm]# */# [.tok-nd]#@Override#
[.tok-kd]#public# [.tok-n]#String#
[.tok-nf]#getSmallIconPath#[.tok-o]#()# [.tok-o]#\{# [.tok-k]#return#
[.tok-s]#"icons/coins.png"#[.tok-o]#;# [.tok-o]#}# [.tok-o]#}#

If you extend Activiti Designer with this shape, The palette and
corresponding node will look like this:

image:images/designer.palette.add.money.png[designer.palette.add.money]

The properties screen for the money task is shown below. Note the
required message for the `accountNumber` field.

image:images/designer.palette.add.money.properties.required.png[designer.palette.add.money.properties.required]

Users can enter static text or use expressions that use process
variables in the property fields when creating diagrams (e.g. "This
little piggy went to $\{piggyLocation}"). Generally, this applies to
text fields where users are free to enter any text. If you expect users
to want to use expressions and you apply runtime behavior to your
`CustomServiceTask` (using `@Runtime`), make sure to use `Expression`
fields in the delegate class so the expressions are correctly resolved
at runtime. More information on runtime behavior can be found in
link:#eclipseDesignerConfiguringRuntime[this section].

The help for fields is offered by the buttons to the right of each
property. Clicking on the button shows a popup as displayed below.

image:images/designer.palette.add.money.help.png[designer.palette.add.money.help]

[[eclipseDesignerConfiguringRuntime]]
== Configuring runtime execution of Custom Service Tasks

With your fields setup and your extension applied to Designer, users can
configure the properties of the service task when modelling a process.
In most cases, you will want to use these user-configured properties
when the process is executed by Activiti. To do this, you must instruct
Activiti which class to instantiate when the process reaches your
`CustomServiceTask`.

There is a special annotation for specifying the runtime characteristics
of your `CustomServiceTask`, the `@Runtime` annotation. Here’s an
example of how to use it:

[source,pygments,highlight]
----
1
----

[.tok-nd]#@Runtime#[.tok-o]#(#[.tok-n]#javaDelegateClass# [.tok-o]#=#
[.tok-s]#"org.acme.runtime.AcmeMoneyJavaDelegation"#[.tok-o]#)#

Your `CustomServiceTask` will result in a normal `ServiceTask` in the
BPMN output of processes modelled with it. Activiti enables
link:#bpmnJavaServiceTask[several ways] to define the runtime
characteristics of `ServiceTask`s. Therefore, the `@Runtime` annotation
can take one of three attributes, which match directly to the options
Activiti provides, like this:

* `javaDelegateClass` maps to `activiti:class` in the BPMN output.
Specify the fully qualified classname of a class that implements
`JavaDelegate`.
* `expression` maps to `activiti:expression` in the BPMN output. Specify
an expression to a method to be executed, such as a method in a Spring
Bean. You should _not_ specify any `@Property` annotations on fields
when using this option. For more information, see below.
* `javaDelegateExpression` maps to `activiti:delegateExpression` in the
BPMN output. Specify an expression to a class that implements
`JavaDelegate`.

The user’s property values will be injected into the runtime class if
you provide members in the class for Activiti to inject into. The names
should match the names of the members in your `CustomServiceTask`. For
more information, consult link:#serviceTaskFieldInjection[this part] of
the userguide. Note that since version 5.11.0 of the Designer you can
use the `Expression` interface for dynamic field values. This means that
the value of the property in the Activiti Designer must contain an
expression and this expression will then be injected into an
`Expression` property in the `JavaDelegate` implementation class.

[width="100%",cols="50%,50%",]
|===
|__ a|
You can use `@Property` annotations on members of your
`CustomServiceTask`, but this will not work if you use `@Runtime`_s
`expression` attribute. The reason for this is that the expression you
specify will be attempted to be resolved to a _method_ by Activiti, not
to a class. Therefore, no injection into a class will be performed. Any
members marked with `@Property` will be ignored by Designer if you use
`expression` in your `@Runtime` annotation. Designer will not render
them as editable fields in the node’s property pane and will produce no
output for the properties in the process_ BPMN.

|===

[width="100%",cols="50%,50%",]
|===
|__ a|
Note that the runtime class shouldn’t be in your extension JAR, as it’s
dependent on the Activiti libraries. Activiti needs to be able to find
it at runtime, so it needs to be on the Activiti engine’s classpath.

|===

The examples project in Designer’s source tree contains examples of the
different options for configuring `@Runtime`. Take a look in the
money-tasks project for some starting points. The examples refer to
delegate class examples that are in the money-delegates project.

[[eclipseDesignerPropertyTypes]]
== Property types

This section describes the property types you can use for a
`CustomServiceTask` by setting its type to a `PropertyType` value.

[[_propertytype_text]]
=== PropertyType.TEXT

Creates a single line text field as shown below. Can be a required field
and shows validation messages as a tooltip. Validation failures are
displayed by changing the background of the field to a light red color.

image:images/designer.property.text.invalid.png[designer.property.text.invalid]

[[_propertytype_multiline_text]]
=== PropertyType.MULTILINE_TEXT

Creates a multiline text field as shown below (height is fixed at 80
pixels). Can be a required field and shows validation messages as a
tooltip. Validation failures are displayed by changing the background of
the field to a light red color.

image:images/designer.property.multiline.text.invalid.png[designer.property.multiline.text.invalid]

[[_propertytype_period]]
=== PropertyType.PERIOD

Creates a structured editor for specifying a period of time by editing
amounts of each unit with a spinner control. The result is shown below.
Can be a required field (which is interpreted such that not all values
may be 0, so at least 1 part of the period must have a non-zero value)
and shows validation messages as a tooltip. Validation failures are
displayed by changing the background of the entire field to a light red
color. The value of the field is stored as a string of the form 1y 2mo
3w 4d 5h 6m 7s, which represents 1 year, 2 months, 3 weeks, 4 days, 6
minutes and 7 seconds. The entire string is always stored, even if parts
are 0.

image:images/designer.property.period.png[designer.property.period]

[[_propertytype_boolean_choice]]
=== PropertyType.BOOLEAN_CHOICE

Creates a single checkbox control for boolean or toggle choices. Note
that you can specify the `required` attribute on the `Property`
annotation, but it will not be evaluated because that would leave the
user without a choice whether to check the box or not. The value stored
in the diagram is java.lang.Boolean.toString(boolean), which results in
"true" or "false".

image:images/designer.property.boolean.choice.png[designer.property.boolean.choice]

[[_propertytype_radio_choice]]
=== PropertyType.RADIO_CHOICE

Creates a group of radio buttons as shown below. Selection of any of the
radio buttons is mutually exclusive with selection of any of the others
(i.e., only one selection allowed). Can be a required field and shows
validation messages as a tooltip. Validation failures are displayed by
changing the background of the group to a light red color.

This property type expects the class member you have annotated to also
have an accompanying `@PropertyItems` annotation (for an example, see
below). Using this additional annotation, you can specify the list of
items that should be offered in an array of Strings. Specify the items
by adding two array entries for each item: first, the label to be shown;
second, the value to be stored.

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-nd]#@Property#[.tok-o]#(#[.tok-n]#type# [.tok-o]#=#
[.tok-n]#PropertyType#[.tok-o]#.#[.tok-na]#RADIO_CHOICE#[.tok-o]#,#
[.tok-n]#displayName# [.tok-o]#=# [.tok-s]#"Withdrawl limit"#[.tok-o]#,#
[.tok-n]#required# [.tok-o]#=# [.tok-kc]#true#[.tok-o]#)#
[.tok-nd]#@Help#[.tok-o]#(#[.tok-n]#displayHelpShort# [.tok-o]#=#
[.tok-s]#"The maximum daily withdrawl amount "#[.tok-o]#,#
[.tok-n]#displayHelpLong# [.tok-o]#=# [.tok-s]#"Choose the maximum daily
amount that can be withdrawn from the account."#[.tok-o]#)#
[.tok-nd]#@PropertyItems#[.tok-o]#(\{#
[.tok-n]#LIMIT_LOW_LABEL#[.tok-o]#,#
[.tok-n]#LIMIT_LOW_VALUE#[.tok-o]#,#
[.tok-n]#LIMIT_MEDIUM_LABEL#[.tok-o]#,#
[.tok-n]#LIMIT_MEDIUM_VALUE#[.tok-o]#,#
[.tok-n]#LIMIT_HIGH_LABEL#[.tok-o]#,# [.tok-n]#LIMIT_HIGH_VALUE#
[.tok-o]#})# [.tok-kd]#private# [.tok-n]#String#
[.tok-n]#withdrawlLimit#[.tok-o]#;#

image:images/designer.property.radio.choice.png[designer.property.radio.choice]

image:images/designer.property.radio.choice.invalid.png[designer.property.radio.choice.invalid]

[[_propertytype_combobox_choice]]
== PropertyType.COMBOBOX_CHOICE

Creates a combobox with fixed options as shown below. Can be a required
field and shows validation messages as a tooltip. Validation failures
are displayed by changing the background of the combobox to a light red
color.

This property type expects the class member you have annotated to also
have an accompanying `@PropertyItems` annotation (for an example, see
below). Using this additional annotation, you can specify the list of
items that should be offered in an array of Strings. Specify the items
by adding two array entries for each item: first, the label to be shown;
second, the value to be stored.

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-nd]#@Property#[.tok-o]#(#[.tok-n]#type# [.tok-o]#=#
[.tok-n]#PropertyType#[.tok-o]#.#[.tok-na]#COMBOBOX_CHOICE#[.tok-o]#,#
[.tok-n]#displayName# [.tok-o]#=# [.tok-s]#"Account type"#[.tok-o]#,#
[.tok-n]#required# [.tok-o]#=# [.tok-kc]#true#[.tok-o]#)#
[.tok-nd]#@Help#[.tok-o]#(#[.tok-n]#displayHelpShort# [.tok-o]#=#
[.tok-s]#"The type of account"#[.tok-o]#,# [.tok-n]#displayHelpLong#
[.tok-o]#=# [.tok-s]#"Choose a type of account from the list of
options"#[.tok-o]#)# [.tok-nd]#@PropertyItems#[.tok-o]#(\{#
[.tok-n]#ACCOUNT_TYPE_SAVINGS_LABEL#[.tok-o]#,#
[.tok-n]#ACCOUNT_TYPE_SAVINGS_VALUE#[.tok-o]#,#
[.tok-n]#ACCOUNT_TYPE_JUNIOR_LABEL#[.tok-o]#,#
[.tok-n]#ACCOUNT_TYPE_JUNIOR_VALUE#[.tok-o]#,#
[.tok-n]#ACCOUNT_TYPE_JOINT_LABEL#[.tok-o]#,#
[.tok-n]#ACCOUNT_TYPE_JOINT_VALUE#[.tok-o]#,#
[.tok-n]#ACCOUNT_TYPE_TRANSACTIONAL_LABEL#[.tok-o]#,#
[.tok-n]#ACCOUNT_TYPE_TRANSACTIONAL_VALUE#[.tok-o]#,#
[.tok-n]#ACCOUNT_TYPE_STUDENT_LABEL#[.tok-o]#,#
[.tok-n]#ACCOUNT_TYPE_STUDENT_VALUE#[.tok-o]#,#
[.tok-n]#ACCOUNT_TYPE_SENIOR_LABEL#[.tok-o]#,#
[.tok-n]#ACCOUNT_TYPE_SENIOR_VALUE# [.tok-o]#})# [.tok-kd]#private#
[.tok-n]#String# [.tok-n]#accountType#[.tok-o]#;#

image:images/designer.property.combobox.choice.png[designer.property.combobox.choice]

image:images/designer.property.combobox.choice.invalid.png[designer.property.combobox.choice.invalid]

[[_propertytype_date_picker]]
== PropertyType.DATE_PICKER

Creates a date selection control as shown below. Can be a required field
and shows validation messages as a tooltip (note, that the control used
will auto-set the selection to the date on the system, so the value is
seldom empty). Validation failures are displayed by changing the
background of the control to a light red color.

This property type expects the class member you have annotated to also
have an accompanying `@DatePickerProperty` annotation (for an example,
see below). Using this additional annotation, you can specify the date
time pattern to be used to store dates in the diagram and the type of
datepicker you would like to be shown. Both attributes are optional and
have default values that will be used if you don’t specify them (these
are static variables in the `DatePickerProperty` annotation). The
`dateTimePattern` attribute should be used to supply a pattern to the
`SimpleDateFormat` class. When using the `swtStyle` attribute, you
should specify an integer value that is supported by `SWT`'s `DateTime`
control, because this is the control that is used to render this type of
property.

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-nd]#@Property#[.tok-o]#(#[.tok-n]#type# [.tok-o]#=#
[.tok-n]#PropertyType#[.tok-o]#.#[.tok-na]#DATE_PICKER#[.tok-o]#,#
[.tok-n]#displayName# [.tok-o]#=# [.tok-s]#"Expiry date"#[.tok-o]#,#
[.tok-n]#required# [.tok-o]#=# [.tok-kc]#true#[.tok-o]#)#
[.tok-nd]#@Help#[.tok-o]#(#[.tok-n]#displayHelpShort# [.tok-o]#=#
[.tok-s]#"The date the account expires "#[.tok-o]#,#
[.tok-n]#displayHelpLong# [.tok-o]#=# [.tok-s]#"Choose the date when the
account will expire if no extended before the date."#[.tok-o]#)#
[.tok-nd]#@DatePickerProperty#[.tok-o]#(#[.tok-n]#dateTimePattern#
[.tok-o]#=# [.tok-s]#"MM-dd-yyyy"#[.tok-o]#,# [.tok-n]#swtStyle#
[.tok-o]#=# [.tok-mi]#32#[.tok-o]#)# [.tok-kd]#private# [.tok-n]#String#
[.tok-n]#expiryDate#[.tok-o]#;#

image:images/designer.property.date.picker.png[designer.property.date.picker]

[[_propertytype_data_grid]]
== PropertyType.DATA_GRID

Creates a data grid control as shown below. A data grid can be used to
allow the user to enter an arbitrary amount of rows of data and enter
values for a fixed set of columns in each of those rows (each individual
combination of row and column is referred to as a cell). Rows can be
added and removed as the user sees fit.

This property type expects the class member you have annotated to also
have an accompanying `@DataGridProperty` annotation (for an example, see
below). Using this additional annotation, you can specify some specific
attributes of the data grid. You are required to reference a different
class to determine which columns go into the grid with the `itemClass`
attribute. Activiti Designer expects the member type to be a `List`. By
convention, you can use the class of the `itemClass` attribute as its
generic type. If, for example, you have a grocery list that you edit in
the grid, you would define the columns of the grid in the
`GroceryListItem` class. From your `CustomServiceTask`, you would refer
to it like this:

[source,pygments,highlight]
----
1
2
3
----

[.tok-nd]#@Property#[.tok-o]#(#[.tok-n]#type# [.tok-o]#=#
[.tok-n]#PropertyType#[.tok-o]#.#[.tok-na]#DATA_GRID#[.tok-o]#,#
[.tok-n]#displayName# [.tok-o]#=# [.tok-s]#"Grocery List"#[.tok-o]#)#
[.tok-nd]#@DataGridProperty#[.tok-o]#(#[.tok-n]#itemClass# [.tok-o]#=#
[.tok-n]#GroceryListItem#[.tok-o]#.#[.tok-na]#class#[.tok-o]#)#
[.tok-kd]#private#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#GroceryListItem#[.tok-o]#>#
[.tok-n]#groceryList#[.tok-o]#;#

The "itemClass" class uses the same annotations you would otherwise use
to specify fields of a `CustomServiceTask`, with the exception of using
a data grid. Specifically, `TEXT`, `MULTILINE_TEXT` and `PERIOD` are
currently supported. You’ll notice the grid will create single line text
controls for each field, regardless of the `PropertyType`. This is done
on purpose to keep the grid graphically appealing and readable. If you
consider the regular display mode for a `PERIOD` `PropertyType` for
instance, you can imagine it would never properly fit in a grid cell
without cluttering the screen. For `MULTILINE_TEXT` and `PERIOD`, a
double-click mechanism is added to each field which pops up a larger
editor for the `PropertyType`. The value is stored to the field after
the user clicks OK and is therefore readable within the grid.

Required attributes are handled in a similar manner to regular fields of
type `TEXT` and the entire grid is validated as soon as any field loses
focus. The background color of the text control in a specific cell of
the data grid is changed to light red if there are validation failures.

By default, the component allows the user to add rows, but not to
determine the order of those rows. If you wish to allow this, you should
set the `orderable` attribute to true, which enables buttons at the end
of each row to move it up or down in the grid.

[width="100%",cols="50%,50%",]
|===
|__ a|
At the moment, this property type is not correctly injected into your
runtime class.

|===

image:images/designer.property.datagrid.png[designer.property.datagrid]

[[_disabling_default_shapes_in_the_palette]]
== Disabling default shapes in the palette

This customization requires you to include a class in your extension
that implements the `DefaultPaletteCustomizer` interface. You should not
implement this interface directly, but subclass the
`AbstractDefaultPaletteCustomizer` base class. Currently, this class
provides no functionality, but future versions of the
`DefaultPaletteCustomizer` interface will offer more capabilities for
which this base class will provide some sensible defaults so it’s best
to subclass so your extension will be compatible with future releases.

Extending the `AbstractDefaultPaletteCustomizer` class requires you to
implement one method, `disablePaletteEntries()`, from which you must
return a list of `PaletteEntry` values. For each of the default shapes,
you can disable it by adding its corresponding `PaletteEntry` value to
your list. Note that if you remove shapes from the default set and there
are no remaining shapes in a particular drawer, that drawer will be
removed from the palette in its entirety. If you wish to disable all of
the default shapes, you only need to add `PaletteEntry.ALL` to your
result. As an example, the code below disables the Manual task and
Script task shapes in the palette.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
----

[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#MyPaletteCustomizer#
[.tok-kd]#extends# [.tok-n]#AbstractDefaultPaletteCustomizer#
[.tok-o]#\{# [.tok-cm]#/*# [.tok-cm]# * (non-Javadoc)# [.tok-cm]# *#
[.tok-cm]# * @see
org.activiti.designer.integration.palette.DefaultPaletteCustomizer#disablePaletteEntries()#
[.tok-cm]# */# [.tok-nd]#@Override# [.tok-kd]#public#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#PaletteEntry#[.tok-o]#>#
[.tok-nf]#disablePaletteEntries#[.tok-o]#()# [.tok-o]#\{#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#PaletteEntry#[.tok-o]#>#
[.tok-n]#result# [.tok-o]#=# [.tok-k]#new#
[.tok-n]#ArrayList#[.tok-o]#<#[.tok-n]#PaletteEntry#[.tok-o]#>();#
[.tok-n]#result#[.tok-o]#.#[.tok-na]#add#[.tok-o]#(#[.tok-n]#PaletteEntry#[.tok-o]#.#[.tok-na]#MANUAL_TASK#[.tok-o]#);#
[.tok-n]#result#[.tok-o]#.#[.tok-na]#add#[.tok-o]#(#[.tok-n]#PaletteEntry#[.tok-o]#.#[.tok-na]#SCRIPT_TASK#[.tok-o]#);#
[.tok-k]#return# [.tok-n]#result#[.tok-o]#;# [.tok-o]#}# [.tok-o]#}#

The result of applying this extension is shown in the picture below. As
you can see, the manual task and script task shapes are no longer
available in the `Tasks` drawer.

image:images/designer.palette.disable.manual.and.script.png[designer.palette.disable.manual.and.script]

To disable all of the default shapes, you could use something similar to
the code below.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
----

[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#MyPaletteCustomizer#
[.tok-kd]#extends# [.tok-n]#AbstractDefaultPaletteCustomizer#
[.tok-o]#\{# [.tok-cm]#/*# [.tok-cm]# * (non-Javadoc)# [.tok-cm]# *#
[.tok-cm]# * @see
org.activiti.designer.integration.palette.DefaultPaletteCustomizer#disablePaletteEntries()#
[.tok-cm]# */# [.tok-nd]#@Override# [.tok-kd]#public#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#PaletteEntry#[.tok-o]#>#
[.tok-nf]#disablePaletteEntries#[.tok-o]#()# [.tok-o]#\{#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#PaletteEntry#[.tok-o]#>#
[.tok-n]#result# [.tok-o]#=# [.tok-k]#new#
[.tok-n]#ArrayList#[.tok-o]#<#[.tok-n]#PaletteEntry#[.tok-o]#>();#
[.tok-n]#result#[.tok-o]#.#[.tok-na]#add#[.tok-o]#(#[.tok-n]#PaletteEntry#[.tok-o]#.#[.tok-na]#ALL#[.tok-o]#);#
[.tok-k]#return# [.tok-n]#result#[.tok-o]#;# [.tok-o]#}# [.tok-o]#}#

The result will look like this (notice that the drawers the default
shapes were in are no longer in the palette):

image:images/designer.palette.disable.all.png[designer.palette.disable.all]

[[_validating_diagrams_and_exporting_to_custom_output_formats]]
== 12.5.2. Validating diagrams and exporting to custom output formats

Besides customizing the palette, you can also create extensions to
Activiti Designer that can perform validations and save information from
the diagram to custom resources in the Eclipse workspace. There are
built-in extension points for doing this and this section explains how
to use them.

[width="100%",cols="50%,50%",]
|===
|__ a|
The ExportMarshaller functions were reintroduced recently. We are still
working on the validation functionality. The documentation below details
the old situation and will be updated when the new functionality is
available.

|===

Activiti Designer allows you to write extensions that validate diagrams.
There are already validations of BPMN constructs in the tool by default,
but you can add your own if you want to validate additional items such
as modeling conventions or the values in properties of
`CustomServiceTask`s. These extensions are known as
`Process Validators`.

You can also Activiti Designer to publish to additional formats when
saving diagrams. These extensions are called `Export Marshallers` and
are invoked automatically by Activiti Designer on each save action by
the user. This behavior can be enabled or disabled by setting a
preference in Eclipse’s preferences dialog for each format for which
there is an extension detected. Designer will make sure your
`ExportMarshaller` is invoked when saving the diagram, depending on the
user’s preference.

Often, you will want to combine a `ProcessValidator` and an
`ExportMarshaller`. Let’s say you have a number of `CustomServiceTask`s
in use that have properties you would like to use in the process that
gets generated. However, before the process is generated, you want to
validate some of those values first. Combining a `ProcessValidator` and
`ExportMarshaller` is the best way to accomplish this and Activiti
Designer enables you to plug your extensions into the tool seamlessly.

To create a `ProcessValidator` or an `ExportMarshaller`, you need to
create a different kind of extension than for extending the palette. The
reason for this is simple: from your code you will need access to more
APIs than those that are offered by the integration library. In
particular, you will need classes that are available in Eclipse itself.
So to get started, you should create an Eclipse plugin (which you can do
by using Eclipse’s PDE support) and package it in a custom Eclipse
product or feature. It’s beyond the scope of this user guide to explain
all the details involved in developing Eclipse plugins, so the
instructions below are limited to the functionality for extending
Activiti Designer.

Your bundle should be dependent on the following libraries:

* org.eclipse.core.runtime
* org.eclipse.core.resources
* org.activiti.designer.eclipse
* org.activiti.designer.libs
* org.activiti.designer.util

Optionally, the org.apache.commons.lang bundle is available through
Designer if you’d like to use that in your extension.

Both `ProcessValidator`s and `ExportMarshaller`s are created by
extending a base class. These base classes inherit some useful methods
from their superclass, the `AbstractDiagramWorker` class. Using these
methods you can create information, warning and error markers that show
up in Eclipse’s problems view for the user to figure out what’s wrong or
important. You can get to information about the diagram in the form of
`Resources` and `InputStreams`. This information is provided from the
`DiagramWorkerContext`, which is available from the
`AbstractDiagramWorker` class.

It’s probably a good idea to invoke `clearMarkers()` as one of the first
things you do in either a `ProcessValidator` or an `ExportMarshaller`;
this will clear any previous markers for your worker (markers are
automatically linked to the worker and clearing markers for one worker
leaves other markers untouched). For example:

[source,pygments,highlight]
----
1
2
----

[.tok-c1]#// Clear markers for this diagram first#
[.tok-n]#clearMarkersForDiagram#[.tok-o]#();#

You should also use the progress monitor provided (in the
`DiagramWorkerContext`) to report your progress back to the user because
validations and/or marshalling actions can take up some time during
which the user is forced to wait. Reporting progress requires some
knowledge of how you should use Eclipse’s features. Take a look at
http://www.eclipse.org/articles/Article-Progress-Monitors/article.html[this
article] for a thorough explanation of the concepts and usage.

[[_creating_a_processvalidator_extension]]
== Creating a ProcessValidator extension

[width="100%",cols="50%,50%",]
|===
|__ a|
Under review!

|===

Create an extension to the
`org.activiti.designer.eclipse.extension.validation.ProcessValidator`
extension point in your `plugin.xml` file. For this extension point, you
are required to subclass the `AbstractProcessValidator` class.

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-cp]#<?eclipse version="3.6"?># [.tok-nt]#<plugin>#
[.tok-nt]#<extension#
[.tok-na]#point=#[.tok-s]#"org.activiti.designer.eclipse.extension.validation.ProcessValidator"#[.tok-nt]#>#
[.tok-nt]#<ProcessValidator#
[.tok-na]#class=#[.tok-s]#"org.acme.validation.AcmeProcessValidator"#[.tok-nt]#>#
[.tok-nt]#</ProcessValidator># [.tok-nt]#</extension>#
[.tok-nt]#</plugin>#

[source,pygments,highlight]
----
1
2
----

[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#AcmeProcessValidator#
[.tok-kd]#extends# [.tok-n]#AbstractProcessValidator# [.tok-o]#\{#
[.tok-o]#}#

You have to implement a number of methods. Most importantly, implement
`getValidatorId()` so you return a globally unique ID for your
validator. This will enable you to invoke it from and
`ExportMarshaller`, or event let someone _else_ invoke your validator
from their `ExportMarshaller`. Implement `getValidatorName()` and return
a logical name for your validator. This name is shown to the user in
dialogs. In `getFormatName()`, you can return the type of diagram the
validator typically validates.

The validation work itself is done in the `validateDiagram()` method.
From this point on, it’s up to your specific functionality what you code
here. Typically, however, you will want to start by getting hold of the
nodes in the diagram’s process, so you can iterate through them,
collect, compare and validate data. This snippet shows you how to do
this:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-kd]#final# [.tok-n]#EList#[.tok-o]#<#[.tok-n]#EObject#[.tok-o]#>#
[.tok-n]#contents# [.tok-o]#=#
[.tok-n]#getResourceForDiagram#[.tok-o]#(#[.tok-n]#diagram#[.tok-o]#).#[.tok-na]#getContents#[.tok-o]#();#
[.tok-k]#for# [.tok-o]#(#[.tok-kd]#final# [.tok-n]#EObject#
[.tok-n]#object# [.tok-o]#:# [.tok-n]#contents#[.tok-o]#)# [.tok-o]#\{#
[.tok-k]#if# [.tok-o]#(#[.tok-n]#object# [.tok-k]#instanceof#
[.tok-n]#StartEvent# [.tok-o]#)# [.tok-o]#\{# [.tok-c1]#// Perform some
validations for StartEvents# [.tok-o]#}# [.tok-c1]#// Other node types
and validations# [.tok-o]#}#

Don’t forget to invoke `addProblemToDiagram()` and/or
`addWarningToDiagram()`, etc as you go through your validations. Make
sure you return a correct boolean result at the end to indicate whether
you consider the validation as succeeded or failed. This can be used by
and invoking `ExportMarshaller` to determine the next course of action.

[[_creating_an_exportmarshaller_extension]]
== Creating an ExportMarshaller extension

Create an extension to the
`org.activiti.designer.eclipse.extension.ExportMarshaller` extension
point in your `plugin.xml` file. For this extension point, you are
required to subclass the `AbstractExportMarshaller` class. This abstract
base class provides you with a number of useful methods when marshalling
to your own format, but most importantly it allows you to save resources
to the workspace and to invoke validators.

An example implementation is available in Designer’s examples folder.
This example shows how to use the methods in the base class to get the
basics done, such as accessing the diagram’s `InputStream`, using its
`BpmnModel` and saving resources to the workspace.

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-cp]#<?eclipse version="3.6"?># [.tok-nt]#<plugin>#
[.tok-nt]#<extension#
[.tok-na]#point=#[.tok-s]#"org.activiti.designer.eclipse.extension.ExportMarshaller"#[.tok-nt]#>#
[.tok-nt]#<ExportMarshaller#
[.tok-na]#class=#[.tok-s]#"org.acme.export.AcmeExportMarshaller"#[.tok-nt]#>#
[.tok-nt]#</ExportMarshaller># [.tok-nt]#</extension>#
[.tok-nt]#</plugin>#

[source,pygments,highlight]
----
1
2
----

[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#AcmeExportMarshaller#
[.tok-kd]#extends# [.tok-n]#AbstractExportMarshaller# [.tok-o]#\{#
[.tok-o]#}#

You are required to implement some methods, such as
`getMarshallerName()` and `getFormatName()`. These methods are used to
display options to the user and to show information in progress dialogs,
so make sure the descriptions you return reflect the functionality you
are implementing.

The bulk of your work is performed in the `doMarshallDiagram()` method.

If you want to perform a certain validation first, you can invoke the
validator directly from your marshaller. You receive a boolean result
from the validator, so you know whether validation succeeded. In most
cases you won’t want to proceed with marshalling the diagram if it’s not
valid, but you might choose to go ahead anyway or even create a
different resource if validation fails.

Once you have all the data you need, you should invoke the
`saveResource()` method to create a file containing your data. You can
invoke `saveResource()` as many times as you wish from a single
ExportMarshaller; a marshaller can therefore be used to create more than
one output file.

You can construct a filename for your output resource(s) by using the
`saveResource()` method in the `AbstractDiagramWorker` class. There are
a couple of useful variables you can have parsed, allowing you to create
filenames such as _original-filename__my-format-name.xml. These
variables are described in the Javadocs and defined by the
`ExportMarshaller` interface. You can also use `resolvePlaceholders()`
on a string (e.g. a path) if you want to parse the placeholders
yourself. `getURIRelativeToDiagram()` will invoke this for you.

You should use the progress monitor provided to report your progress
back to the user. How to do this is described in
http://www.eclipse.org/articles/Article-Progress-Monitors/article.html[this
article].

[[_rest_api]]
== 13. REST API

[[_general_activiti_rest_principles]]
=== 13.1. General Activiti REST principles

[[_installation_and_authentication]]
==== 13.1.1. Installation and Authentication

Activiti includes a REST API to the Activiti Engine that can be
installed by deploying the activiti-rest.war file to a servlet container
like Apache Tomcat. However, it can also be used in another
web-application by including the servlet and it’s mapping in your
application and add all activiti-rest dependencies to the classpath.

By default the Activiti Engine will connect to an in-memory H2 database.
You can change the database settings in the db.properties file in the
WEB-INF/classes folder. The REST API uses JSON format
(http://www.json.org) and is built upon the Spring MVC
(http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html).

All REST-resources require a valid Activiti-user to be authenticated by
default. Basic HTTP access authentication is used, so you should always
include a `Authorization: Basic …​==` HTTP-header when performing
requests or include the username and password in the request-url (e.g.
http://username:password@localhost…​[`http://username:password@localhost…​`]`;`).

*It’s recommended to use Basic Authentication in combination with
HTTPS.*

[[_configuration_2]]
==== 13.1.2. Configuration

The Activiti REST web application is using Spring Java Configuration for
starting the Activiti Engine, defining the basic authentication security
using Spring security and to define the variable converters for specific
variable handling. A small amount of properties can be defined by
changing the engine.properties file you can find in the WEB-INF/classes
folder. If you need more advanced configuration options there’s the
possibility to override the default Spring beans in XML in the
activiti-custom-context.xml file you can also find in the
WEB-INF/classes folder. An example configuration is already in comments
in this file. This is also the place to override the default
RestResponseFactory by defining a new Spring bean with the name
restResponsefactory and use your custom implementation class for it.

[[restUsageInTomcat]]
==== 13.1.3. Usage in Tomcat

Due to
http://tomcat.apache.org/tomcat-7.0-doc/security-howto.html[default
security properties on Tomcat], *escaped forward slashes (`%2F` and
`%5C`) are not allowed by default (400-result is returned).* This may
have an impact on the deployment resources and their data-URL, as the
URL can potentially contain escaped forward slashes.

*When issues are experienced with unexpected 400-results, set the
following system-property:
`-Dorg.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH=true.`*

It’s a best practice to always set the *Accept* and *Content-Type* (in
case of posting/putting JSON) headers to *application/json* on the HTTP
requests described below.

[[_methods_and_return_codes]]
==== 13.1.4. Methods and return-codes

.Table 2. HTTP-methods and corresponding operations
[width="100%",cols="50%,50%",options="header",]
|===
|Method |Operations
|`GET` |Get a single resource or get a collection of resources.

|`POST` |Create a new resource. Also used for executing resource-queries
which have a too complex request-structure to fit in the query-URL of a
GET-request.

|`PUT` |Update properties of an existing resource. Also used for
invoking actions on an existing resource.

|`DELETE` |Delete an existing resource.
|===

.Table 3. HTTP-methods response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response |Description
|`200 - Ok` |The operation was successful and a response has been
returned (`GET` and `PUT` requests).

|`201 - Created` |The operation was successful and the entity has been
created and is returned in the response-body (`POST` request).

|`204 - No content` |The operation was successful and entity has been
deleted and therefore there is no response-body returned (`DELETE`
request).

|`401 - Unauthorized` |The operation failed. The operation requires an
Authentication header to be set. If this was present in the request, the
supplied credentials are not valid or the user is not authorized to
perform this operation.

|`403 - Forbidden` |The operation is forbidden and should not be
re-attempted. This does not imply an issue with authentication not
authorization, it’s an operation that is not allowed. Example: deleting
a task that is part of a running process is not allowed and will never
be allowed, regardless of the user or process/task state.

|`404 - Not found` |The operation failed.The requested resource was not
found.

|`405 - Method not allowed` |The operation failed. The used method is
not allowed for this resource. E.g. trying to update (PUT) a
deployment-resource will result in a `405` status.

|`409 - Conflict` |The operation failed. The operation causes an update
of a resource that has been updated by another operation, which makes
the update no longer valid. Can also indicate a resource that is being
created in a collection where a resource with that identifier already
exists.

|`415 - Unsupported Media Type` |The operation failed. The request body
contains an unsupported media type. Also occurs when the request-body
JSON contains an unknown attribute or value that doesn’t have the right
format/type to be accepted.

|`500 - Internal server error` |The operation failed. An unexpected
exception occurred while executing the operation. The response-body
contains details about the error.
|===

The media-type of the HTTP-responses is always `application/json` unless
binary content is requested (e.g. deployment resource data), the
media-type of the content is used.

[[_error_response_body]]
==== 13.1.5. Error response body

When an error occurs (both client and server, 4XX and 5XX status-codes)
the response body contains an object describing the error that occurred.
An example for a 404-status when a task is not found:

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-p]#\{# [.tok-nt]#"statusCode"# [.tok-p]#:#
[.tok-mi]#404#[.tok-p]#,# [.tok-nt]#"errorMessage"# [.tok-p]#:#
[.tok-s2]#"Could not find a task with id '444'."# [.tok-p]#}#

[[_request_parameters]]
== 13.1.6. Request parameters

[[_url_fragments]]
=== URL fragments

Parameters that are part of the url (e.g. the deploymentId parameter in
http://host/actviti-rest/service/repository/deployments/%7BdeploymentId%7D[`http://host/actviti-rest/service/repository/deployments/{deploymentId}`])
need to be properly escaped (see
https://en.wikipedia.org/wiki/Percent-encoding[URL-encoding or
Percent-encoding]) in case the segment contains special characters. Most
frameworks have this functionality built in, but it should be taken into
account. Especially for segments that can contains forward-slashes (e.g.
deployment resource), this is required.

[[_rest_url_query_parameters]]
=== Rest URL query parameters

Parameters added as query-string in the URL (e.g. the name parameter
used in
http://host/activiti-rest/service/deployments?name=Deployment[`http://host/activiti-rest/service/deployments?name=Deployment`])
can have the following types and are mentioned in the corresponding
REST-API documentation:

.Table 4. URL query parameter types
[width="100%",cols="50%,50%",options="header",]
|===
|Type |Format
|String |Plain text parameters. Can contain any valid characters that
are allowed in URL’s. In case of a `XXXLike` parameter, the string
should contain the wildcard character `%` (properly url-encoded). This
allows to specify the intent of the like-search. E.g. _`Tas%`_ matches
all values, starting with _Tas_.

|Integer |Parameter representing an integer value. Can only contain
numeric non-decimal values, between -2.147.483.648 and 2.147.483.647.

|Long |Parameter representing a long value. Can only contain numeric
non-decimal values, between -9.223.372.036.854.775.808 and
9.223.372.036.854.775.807.

|Boolean |Parameter representing a boolean value. Can be either `true`
or `false`. All other values other than these two, will cause a
_`405 - Bad request`_ response.

|Date |Parameter representing a date value. Use the ISO-8601 date-format
(see http://en.wikipedia.org/wiki/ISO_8601[ISO-8601 on wikipedia]) using
both time and date-components (e.g. `2013-04-03T23:45Z`).
|===

[[restJsonBody]]
=== JSON body parameters

.Table 5. JSON parameter types
[width="100%",cols="50%,50%",options="header",]
|===
|Type |Format
|String |Plain text parameters. In case of a `XXXLike` parameter, the
string should contain the wildcard character `%`. This allows to specify
the intent of the like-search. E.g. _`Tas%`_ matches all values,
starting with _Tas_.

|Integer |Parameter representing an integer value, using a JSON number.
Can only contain numeric non-decimal values, between -2.147.483.648 and
2.147.483.647.

|Long |Parameter representing a long value, using a JSON number. Can
only contain numeric non-decimal values, between
-9.223.372.036.854.775.808 and 9.223.372.036.854.775.807.

|Date |Parameter representing a date value, using a JSON text. Use the
ISO-8601 date-format (see http://en.wikipedia.org/wiki/ISO_8601[ISO-8601
on wikipedia]) using both time and date-components (e.g.
`2013-04-03T23:45Z`).
|===

[[restPagingAndSort]]
=== Paging and sorting

Paging and order parameters can be added as query-string in the URL
(e.g. the name parameter used in
http://host/activiti-rest/service/deployments?sort=name[`http://host/activiti-rest/service/deployments?sort=name`]).

.Table 6. Variable query JSON parameters
[width="100%",cols="34%,33%,33%",options="header",]
|===
|Parameter |Default value |Description
|sort |different per query implementation |Name of the sort key, for
which the default value and the allowed values are different per query
implementation.

|order |asc |Sorting order which can be _asc_ or _desc_.

|start |0 |Parameter to allow for paging of the result. By default the
result will start at 0.

|size |10 |Parameter to allow for paging of the result. By default the
size will be 10.
|===

[[restQueryVariable]]
=== JSON query variable format

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-p]#\{# [.tok-nt]#"name"# [.tok-p]#:#
[.tok-s2]#"variableName"#[.tok-p]#,# [.tok-nt]#"value"# [.tok-p]#:#
[.tok-s2]#"variableValue"#[.tok-p]#,# [.tok-nt]#"operation"# [.tok-p]#:#
[.tok-s2]#"equals"#[.tok-p]#,# [.tok-nt]#"type"# [.tok-p]#:#
[.tok-s2]#"string"# [.tok-p]#}#

.Table 7. Variable query JSON parameters
[width="100%",cols="34%,33%,33%",options="header",]
|===
|Parameter |Required |Description
|name |No |Name of the variable to include in a query. Can be empty in
case _`equals`_ is used in some queries to query for resources that have
*any variable name* with the given value.

|value |Yes |Value of the variable included in the query, should include
a correct format for the given type.

|operator |Yes |Operator to use in query, can have the following values:
`equals, notEquals, equalsIgnoreCase, notEqualsIgnoreCase, lessThan, greaterThan, lessThanOrEquals, greaterThanOrEquals`
and `like`.

|type |No |Type of variable to use. When omitted, the type will be
deducted from the `value` parameter. Any JSON text-values will be
considered of type `string`, JSON booleans of type `boolean`, JSON
numbers of type `long` or `integer` depending on the size of the number.
It’s recommended to include an explicit type when in doubt. Types
supported out of the box are listed below.
|===

.Table 8. Default query JSON types
[width="100%",cols="50%,50%",options="header",]
|===
|Type name |Description
|string |Value is threaded as and converted to a `java.lang.String`.

|short |Value is threaded as and converted to a `java.lang.Integer`.

|integer |Value is threaded as and converted to a `java.lang.Integer`.

|long |Value is threaded as and converted to a `java.lang.Long`.

|double |Value is threaded as and converted to a `java.lang.Double`.

|boolean |Value is threaded as and converted to a `java.lang.Boolean`.

|date |Value is treated as and converted to a `java.util.Date`. The JSON
string will be converted using ISO-8601 date format.
|===

[[restVariables]]
== Variable representation

When working with variables (execution/process and task), the REST-api
uses some common principles and JSON-format for both reading and
writing. The JSON representation of a variable looks like this:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-p]#\{# [.tok-nt]#"name"# [.tok-p]#:#
[.tok-s2]#"variableName"#[.tok-p]#,# [.tok-nt]#"value"# [.tok-p]#:#
[.tok-s2]#"variableValue"#[.tok-p]#,# [.tok-nt]#"valueUrl"# [.tok-p]#:#
[.tok-s2]#"http://..."#[.tok-p]#,# [.tok-nt]#"scope"# [.tok-p]#:#
[.tok-s2]#"local"#[.tok-p]#,# [.tok-nt]#"type"# [.tok-p]#:#
[.tok-s2]#"string"# [.tok-p]#}#

.Table 9. Variable JSON attributes
[width="100%",cols="34%,33%,33%",options="header",]
|===
|Parameter |Required |Description
|name |Yes |Name of the variable.

|value |No |Value of the variable. When writing a variable and `value`
is omitted, `null` will be used as value.

|valueUrl |No |When reading a variable of type `binary` or
`serializable`, this attribute will point to the URL where the raw
binary data can be fetched from.

|scope |No |Scope of the variable. If _`local`_, the variable is
explicitly defined on the resource it’s requested from. When _`global`_,
the variable is defined on the parent (or any parent in the parent-tree)
of the resource it’s requested from. When writing a variable and the
scope is omitted, `global` is assumed.

|type |No |Type of the variable. See table below for additional
information on types. When writing a variable and this value is omitted,
the type will be deducted from the raw JSON-attribute request type and
is limited to either `string`, `double`, `integer` and `boolean`. It’s
advised to always include a type to make sure no wrong assumption about
the type can be done.
|===

.Table 10. Variable Types
[width="100%",cols="50%,50%",options="header",]
|===
|Type name |Description
|string |Value is threaded as a `java.lang.String`. Raw JSON-text value
is used when writing a variable.

|integer |Value is threaded as a `java.lang.Integer`. When writing, JSON
number value is used as base for conversion, falls back to JSON text.

|short |Value is threaded as a `java.lang.Short`. When writing, JSON
number value is used as base for conversion, falls back to JSON text.

|long |Value is threaded as a `java.lang.Long`. When writing, JSON
number value is used as base for conversion, falls back to JSON text.

|double |Value is threaded as a `java.lang.Double`. When writing, JSON
number value is used as base for conversion, falls back to JSON text.

|boolean |Value is threaded as a `java.lang.Boolean`. When writing, JSON
boolean value is used for conversion.

|date |Value is treated as a `java.util.Date`. When writing, the JSON
text will be converted using ISO-8601 date format.

|binary |Binary variable, treated as an array of bytes. The `value`
attribute is null, the `valueUrl` contains an URL pointing to the raw
binary stream.

|serializable |Serialized representation of a Serializable Java-object.
As with the `binary` type, the `value` attribute is null, the `valueUrl`
contains an URL pointing to the raw binary stream. All serializable
variables (which are not of any of the above types) will be exposed as a
variable of this type.
|===

It’s possible to support additional variable-types with a custom JSON
representation (either simple value or complex/nested JSON object). By
extending the `initializeVariableConverters()` method on
`org.activiti.rest.service.api.RestResponseFactory`, you can add
additional
`org.activiti.rest.service.api.engine.variable.RestVariableConverter`
classes to support converting your POJO’s to a format suitable for
transferring through REST and converting the REST-value back to your
POJO. The actual transformation to JSON is done by Jackson.

[[_deployment]]
== 13.2. Deployment

*When using tomcat, please read link:#restUsageInTomcat[Usage in
Tomcat].*

[[_list_of_deployments]]
=== 13.2.1. List of Deployments

....
GET repository/deployments
....

.Table 11. URL query parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|name |No |String |Only return deployments with the given name.

|nameLike |No |String |Only return deployments with a name like the
given name.

|category |No |String |Only return deployments with the given category.

|categoryNotEquals |No |String |Only return deployments which don’t have
the given category.

|tenantId |No |String |Only return deployments with the given tenantId.

|tenantIdLike |No |String |Only return deployments with a tenantId like
the given value.

|withoutTenantId |No |Boolean |If `true`, only returns deployments
without a tenantId set. If `false`, the `withoutTenantId` parameter is
ignored.

|sort |No |_id_ (default), _name_, _deploytime_ or _tenantId_ |Property
to sort on, to be used together with the _order_.
|===

.Table 12. REST Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the request was successful.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
----

[.tok-p]#\{# [.tok-nt]#"data"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"id"#[.tok-p]#:# [.tok-s2]#"10"#[.tok-p]#,#
[.tok-nt]#"name"#[.tok-p]#:#
[.tok-s2]#"activiti-examples.bar"#[.tok-p]#,#
[.tok-nt]#"deploymentTime"#[.tok-p]#:#
[.tok-s2]#"2010-10-13T14:54:26.750+02:00"#[.tok-p]#,#
[.tok-nt]#"category"#[.tok-p]#:# [.tok-s2]#"examples"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#
[.tok-s2]#"http://localhost:8081/service/repository/deployments/10"#[.tok-p]#,#
[.tok-nt]#"tenantId"#[.tok-p]#:# [.tok-kc]#null# [.tok-p]#}#
[.tok-p]#],# [.tok-nt]#"total"#[.tok-p]#:# [.tok-mi]#1#[.tok-p]#,#
[.tok-nt]#"start"#[.tok-p]#:# [.tok-mi]#0#[.tok-p]#,#
[.tok-nt]#"sort"#[.tok-p]#:# [.tok-s2]#"id"#[.tok-p]#,#
[.tok-nt]#"order"#[.tok-p]#:# [.tok-s2]#"asc"#[.tok-p]#,#
[.tok-nt]#"size"#[.tok-p]#:# [.tok-mi]#1# [.tok-p]#}#

[[_get_a_deployment]]
== 13.2.2. Get a deployment

....
GET repository/deployments/{deploymentId}
....

.Table 13. Get a deployment - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|deploymentId |Yes |String |The id of the deployment to get.
|===

.Table 14. Get a deployment - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the deployment was found and returned.
|404 |Indicates the requested deployment was not found.
|===

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
----

[.tok-p]#\{# [.tok-nt]#"id"#[.tok-p]#:# [.tok-s2]#"10"#[.tok-p]#,#
[.tok-nt]#"name"#[.tok-p]#:#
[.tok-s2]#"activiti-examples.bar"#[.tok-p]#,#
[.tok-nt]#"deploymentTime"#[.tok-p]#:#
[.tok-s2]#"2010-10-13T14:54:26.750+02:00"#[.tok-p]#,#
[.tok-nt]#"category"#[.tok-p]#:# [.tok-s2]#"examples"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#
[.tok-s2]#"http://localhost:8081/service/repository/deployments/10"#[.tok-p]#,#
[.tok-nt]#"tenantId"# [.tok-p]#:# [.tok-kc]#null# [.tok-p]#}#

[[_create_a_new_deployment]]
== 13.2.3. Create a new deployment

....
POST repository/deployments
....

*Request body:*

The request body should contain data of type _multipart/form-data_.
There should be exactly one file in the request, any additional files
will be ignored. The deployment name is the name of the file-field
passed in. If multiple resources need to be deployed in a single
deployment, compress the resources in a zip and make sure the file-name
ends with `.bar` or `.zip`.

An additional parameter (form-field) can be passed in the request body
with name `tenantId`. The value of this field will be used as the id of
the tenant this deployment is done in.

.Table 15. Create a new deployment - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|201 |Indicates the deployment was created.

|400 |Indicates there was no content present in the request body or the
content mime-type is not supported for deployment. The
status-description contains additional information.
|===

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
----

[.tok-p]#\{# [.tok-nt]#"id"#[.tok-p]#:# [.tok-s2]#"10"#[.tok-p]#,#
[.tok-nt]#"name"#[.tok-p]#:#
[.tok-s2]#"activiti-examples.bar"#[.tok-p]#,#
[.tok-nt]#"deploymentTime"#[.tok-p]#:#
[.tok-s2]#"2010-10-13T14:54:26.750+02:00"#[.tok-p]#,#
[.tok-nt]#"category"#[.tok-p]#:# [.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#
[.tok-s2]#"http://localhost:8081/service/repository/deployments/10"#[.tok-p]#,#
[.tok-nt]#"tenantId"# [.tok-p]#:# [.tok-s2]#"myTenant"# [.tok-p]#}#

[[_delete_a_deployment]]
== 13.2.4. Delete a deployment

....
DELETE repository/deployments/{deploymentId}
....

.Table 16. Delete a deployment - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|deploymentId |Yes |String |The id of the deployment to delete.
|===

.Table 17. Delete a deployment - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|204 |Indicates the deployment was found and has been deleted.
Response-body is intentionally empty.

|404 |Indicates the requested deployment was not found.
|===

[[_list_resources_in_a_deployment]]
== 13.2.5. List resources in a deployment

....
GET repository/deployments/{deploymentId}/resources
....

.Table 18. List resources in a deployment - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|deploymentId |Yes |String |The id of the deployment to get the
resources for.
|===

.Table 19. List resources in a deployment - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the deployment was found and the resource list has been
returned.

|404 |Indicates the requested deployment was not found.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
----

[.tok-p]#[# [.tok-p]#\{# [.tok-nt]#"id"#[.tok-p]#:#
[.tok-s2]#"diagrams/my-process.bpmn20.xml"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#
[.tok-s2]#"http://localhost:8081/activiti-rest/service/repository/deployments/10/resources/diagrams%2Fmy-process.bpmn20.xml"#[.tok-p]#,#
[.tok-nt]#"contentUrl"#[.tok-p]#:#
[.tok-s2]#"http://localhost:8081/activiti-rest/service/repository/deployments/10/resourcedata/diagrams%2Fmy-process.bpmn20.xml"#[.tok-p]#,#
[.tok-nt]#"mediaType"#[.tok-p]#:# [.tok-s2]#"text/xml"#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:# [.tok-s2]#"processDefinition"# [.tok-p]#},#
[.tok-p]#\{# [.tok-nt]#"id"#[.tok-p]#:#
[.tok-s2]#"image.png"#[.tok-p]#,# [.tok-nt]#"url"#[.tok-p]#:#
[.tok-s2]#"http://localhost:8081/activiti-rest/service/repository/deployments/10/resources/image.png"#[.tok-p]#,#
[.tok-nt]#"contentUrl"#[.tok-p]#:#
[.tok-s2]#"http://localhost:8081/activiti-rest/service/repository/deployments/10/resourcedata/image.png"#[.tok-p]#,#
[.tok-nt]#"mediaType"#[.tok-p]#:# [.tok-s2]#"image/png"#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:# [.tok-s2]#"resource"# [.tok-p]#}#
[.tok-p]#]#

* `mediaType`: Contains the media-type the resource has. This is
resolved using a (pluggable) `MediaTypeResolver` and contains, by
default, a limited number of mime-type mappings.
* `type`: Type of resource, possible values:
* `resource`: Plain old resource.
* `processDefinition`: Resource that contains one or more
process-definitions. This resource is picked up by the deployer.
* `processImage`: Resource that represents a deployed process
definition’s graphical layout.

_The contentUrl property in the resulting JSON for a single resource
contains the actual URL to use for retrieving the binary resource._

[[_get_a_deployment_resource]]
== 13.2.6. Get a deployment resource

....
GET repository/deployments/{deploymentId}/resources/{resourceId}
....

.Table 20. Get a deployment resource - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|deploymentId |Yes |String |The id of the deployment the requested
resource is part of.

|resourceId |Yes |String |The id of the resource to get. *Make sure you
URL-encode the resourceId in case it contains forward slashes. Eg: use
_diagrams%2Fmy-process.bpmn20.xml_ instead of
_diagrams/Fmy-process.bpmn20.xml_.*
|===

.Table 21. Get a deployment resource - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates both deployment and resource have been found and the
resource has been returned.

|404 |Indicates the requested deployment was not found or there is no
resource with the given id present in the deployment. The
status-description contains additional information.
|===

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-p]#\{# [.tok-nt]#"id"#[.tok-p]#:#
[.tok-s2]#"diagrams/my-process.bpmn20.xml"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#
[.tok-s2]#"http://localhost:8081/activiti-rest/service/repository/deployments/10/resources/diagrams%2Fmy-process.bpmn20.xml"#[.tok-p]#,#
[.tok-nt]#"contentUrl"#[.tok-p]#:#
[.tok-s2]#"http://localhost:8081/activiti-rest/service/repository/deployments/10/resourcedata/diagrams%2Fmy-process.bpmn20.xml"#[.tok-p]#,#
[.tok-nt]#"mediaType"#[.tok-p]#:# [.tok-s2]#"text/xml"#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:# [.tok-s2]#"processDefinition"# [.tok-p]#}#

* `mediaType`: Contains the media-type the resource has. This is
resolved using a (pluggable) `MediaTypeResolver` and contains, by
default, a limited number of mime-type mappings.
* `type`: Type of resource, possible values:
* `resource`: Plain old resource.
* `processDefinition`: Resource that contains one or more
process-definitions. This resource is picked up by the deployer.
* `processImage`: Resource that represents a deployed process
definition’s graphical layout.

[[_get_a_deployment_resource_content]]
== 13.2.7. Get a deployment resource content

....
GET repository/deployments/{deploymentId}/resourcedata/{resourceId}
....

.Table 22. Get a deployment resource content - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|deploymentId |Yes |String |The id of the deployment the requested
resource is part of.

|resourceId |Yes |String |The id of the resource to get the data for.
*Make sure you URL-encode the resourceId in case it contains forward
slashes. Eg: use _diagrams%2Fmy-process.bpmn20.xml_ instead of
_diagrams/Fmy-process.bpmn20.xml_.*
|===

....
.Get a deployment resource content - Response codes
....

[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates both deployment and resource have been found and the
resource data has been returned.

|404 |Indicates the requested deployment was not found or there is no
resource with the given id present in the deployment. The
status-description contains additional information.
|===

*Success response body:*

The response body will contain the binary resource-content for the
requested resource. The response content-type will be the same as the
type returned in the resources _mimeType_ property. Also, a
content-disposition header is set, allowing browsers to download the
file instead of displaying it.

[[_process_definitions]]
== 13.3. Process Definitions

[[_list_of_process_definitions]]
=== 13.3.1. List of process definitions

....
GET repository/process-definitions
....

.Table 23. List of process definitions - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|version |No |integer |Only return process definitions with the given
version.

|name |No |String |Only return process definitions with the given name.

|nameLike |No |String |Only return process definitions with a name like
the given name.

|key |No |String |Only return process definitions with the given key.

|keyLike |No |String |Only return process definitions with a name like
the given key.

|resourceName |No |String |Only return process definitions with the
given resource name.

|resourceNameLike |No |String |Only return process definitions with a
name like the given resource name.

|category |No |String |Only return process definitions with the given
category.

|categoryLike |No |String |Only return process definitions with a
category like the given name.

|categoryNotEquals |No |String |Only return process definitions which
don’t have the given category.

|deploymentId |No |String |Only return process definitions which are
part of a deployment with the given id.

|startableByUser |No |String |Only return process definitions which can
be started by the given user.

|latest |No |Boolean |Only return the latest process definition
versions. Can only be used together with _key_ and _keyLike_ parameters,
using any other parameter will result in a 400-response.

|suspended |No |Boolean |If `true`, only returns process definitions
which are suspended. If `false`, only active process definitions (which
are not suspended) are returned.

|sort |No |_name_ (default), _id_, _key_, _category_, _deploymentId_ and
_version_ |Property to sort on, to be used together with the _order_.
|===

.Table 24. List of process definitions - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates request was successful and the process-definitions are
returned

|400 |Indicates a parameter was passed in the wrong format or that
_latest_ is used with other parameters other than _key_ and _keyLike_.
The status-message contains additional information.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
----

[.tok-p]#\{# [.tok-nt]#"data"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"oneTaskProcess:1:4"#[.tok-p]#,#
[.tok-nt]#"url"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"version"# [.tok-p]#:# [.tok-mi]#1#[.tok-p]#,#
[.tok-nt]#"key"# [.tok-p]#:# [.tok-s2]#"oneTaskProcess"#[.tok-p]#,#
[.tok-nt]#"category"# [.tok-p]#:# [.tok-s2]#"Examples"#[.tok-p]#,#
[.tok-nt]#"suspended"# [.tok-p]#:# [.tok-kc]#false#[.tok-p]#,#
[.tok-nt]#"name"# [.tok-p]#:# [.tok-s2]#"The One Task
Process"#[.tok-p]#,# [.tok-nt]#"description"# [.tok-p]#:#
[.tok-s2]#"This is a process for testing purposes"#[.tok-p]#,#
[.tok-nt]#"deploymentId"# [.tok-p]#:# [.tok-s2]#"2"#[.tok-p]#,#
[.tok-nt]#"deploymentUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8081/repository/deployments/2"#[.tok-p]#,#
[.tok-nt]#"graphicalNotationDefined"# [.tok-p]#:#
[.tok-kc]#true#[.tok-p]#,# [.tok-nt]#"resource"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/repository/deployments/2/resources/testProcess.xml"#[.tok-p]#,#
[.tok-nt]#"diagramResource"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/repository/deployments/2/resources/testProcess.png"#[.tok-p]#,#
[.tok-nt]#"startFormDefined"# [.tok-p]#:# [.tok-kc]#false# [.tok-p]#}#
[.tok-p]#],# [.tok-nt]#"total"#[.tok-p]#:# [.tok-mi]#1#[.tok-p]#,#
[.tok-nt]#"start"#[.tok-p]#:# [.tok-mi]#0#[.tok-p]#,#
[.tok-nt]#"sort"#[.tok-p]#:# [.tok-s2]#"name"#[.tok-p]#,#
[.tok-nt]#"order"#[.tok-p]#:# [.tok-s2]#"asc"#[.tok-p]#,#
[.tok-nt]#"size"#[.tok-p]#:# [.tok-mi]#1# [.tok-p]#}#

* `graphicalNotationDefined`: Indicates the process definition contains
graphical information (BPMN DI).
* `resource`: Contains the actual deployed BPMN 2.0 xml.
* `diagramResource`: Contains a graphical representation of the process,
null when no diagram is available.

[[_get_a_process_definition]]
== 13.3.2. Get a process definition

....
GET repository/process-definitions/{processDefinitionId}
....

.Table 25. Get a process definition - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processDefinitionId |Yes |String |The id of the process definition to
get.
|===

.Table 26. Get a process definition - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the process definition was found and returned.
|404 |Indicates the requested process definition was not found.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
----

[.tok-p]#\{# [.tok-nt]#"id"# [.tok-p]#:#
[.tok-s2]#"oneTaskProcess:1:4"#[.tok-p]#,# [.tok-nt]#"url"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"version"# [.tok-p]#:# [.tok-mi]#1#[.tok-p]#,#
[.tok-nt]#"key"# [.tok-p]#:# [.tok-s2]#"oneTaskProcess"#[.tok-p]#,#
[.tok-nt]#"category"# [.tok-p]#:# [.tok-s2]#"Examples"#[.tok-p]#,#
[.tok-nt]#"suspended"# [.tok-p]#:# [.tok-kc]#false#[.tok-p]#,#
[.tok-nt]#"name"# [.tok-p]#:# [.tok-s2]#"The One Task
Process"#[.tok-p]#,# [.tok-nt]#"description"# [.tok-p]#:#
[.tok-s2]#"This is a process for testing purposes"#[.tok-p]#,#
[.tok-nt]#"deploymentId"# [.tok-p]#:# [.tok-s2]#"2"#[.tok-p]#,#
[.tok-nt]#"deploymentUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8081/repository/deployments/2"#[.tok-p]#,#
[.tok-nt]#"graphicalNotationDefined"# [.tok-p]#:#
[.tok-kc]#true#[.tok-p]#,# [.tok-nt]#"resource"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/repository/deployments/2/resources/testProcess.xml"#[.tok-p]#,#
[.tok-nt]#"diagramResource"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/repository/deployments/2/resources/testProcess.png"#[.tok-p]#,#
[.tok-nt]#"startFormDefined"# [.tok-p]#:# [.tok-kc]#false# [.tok-p]#}#

* `graphicalNotationDefined`: Indicates the process definition contains
graphical information (BPMN DI).
* `resource`: Contains the actual deployed BPMN 2.0 xml.
* `diagramResource`: Contains a graphical representation of the process,
null when no diagram is available.

[[_update_category_for_a_process_definition]]
== 13.3.3. Update category for a process definition

....
PUT repository/process-definitions/{processDefinitionId}
....

*Body JSON:*

[source,pygments,highlight]
----
1
2
3
----

[.tok-p]#\{# [.tok-nt]#"category"# [.tok-p]#:#
[.tok-s2]#"updatedcategory"# [.tok-p]#}#

.Table 27. Update category for a process definition - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the process was category was altered.
|400 |Indicates no category was defined in the request body.
|404 |Indicates the requested process definition was not found.
|===

*Success response body:* see response for
`repository/process-definitions/{processDefinitionId}`.

[[_get_a_process_definition_resource_content]]
== 13.3.4. Get a process definition resource content

....
GET repository/process-definitions/{processDefinitionId}/resourcedata
....

.Table 28. Get a process definition resource content - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processDefinitionId |Yes |String |The id of the process definition to
get the resource data for.
|===

*Response:*

Exactly the same response codes/boy as
`GET repository/deployment/{deploymentId}/resourcedata/{resourceId}`.

[[_get_a_process_definition_bpmn_model]]
== 13.3.5. Get a process definition BPMN model

....
GET repository/process-definitions/{processDefinitionId}/model
....

.Table 29. Get a process definition BPMN model - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processDefinitionId |Yes |String |The id of the process definition to
get the model for.
|===

.Table 30. Get a process definition BPMN model - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the process definition was found and the model is
returned.

|404 |Indicates the requested process definition was not found.
|===

*Response body:* The response body is a JSON representation of the
`org.activiti.bpmn.model.BpmnModel` and contains the full process
definition model.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
----

[.tok-p]#\{# [.tok-nt]#"processes"#[.tok-p]#:[# [.tok-p]#\{#
[.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"oneTaskProcess"#[.tok-p]#,#
[.tok-nt]#"xmlRowNumber"#[.tok-p]#:#[.tok-mi]#7#[.tok-p]#,#
[.tok-nt]#"xmlColumnNumber"#[.tok-p]#:#[.tok-mi]#60#[.tok-p]#,#
[.tok-nt]#"extensionElements"#[.tok-p]#:\{# [.tok-p]#},#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"The One Task Process"#[.tok-p]#,#
[.tok-nt]#"executable"#[.tok-p]#:#[.tok-kc]#true#[.tok-p]#,#
[.tok-nt]#"documentation"#[.tok-p]#:#[.tok-s2]#"One task process
description"#[.tok-p]#,# [.tok-err]#]# [.tok-p]#}#

[[_suspend_a_process_definition]]
== 13.3.6. Suspend a process definition

....
PUT repository/process-definitions/{processDefinitionId}
....

*Body JSON:*

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-p]#\{# [.tok-nt]#"action"# [.tok-p]#:#
[.tok-s2]#"suspend"#[.tok-p]#,# [.tok-nt]#"includeProcessInstances"#
[.tok-p]#:# [.tok-s2]#"false"#[.tok-p]#,# [.tok-nt]#"date"# [.tok-p]#:#
[.tok-s2]#"2013-04-15T00:42:12Z"# [.tok-p]#}#

.Table 31. Suspend a process definition - JSON Body parameters
[width="100%",cols="34%,33%,33%",options="header",]
|===
|Parameter |Description |Required
|action |Action to perform. Either `activate` or `suspend`. |Yes

|includeProcessInstances |Whether or not to suspend/activate running
process-instances for this process-definition. If omitted, the
process-instances are left in the state they are. |No

|date |Date (ISO-8601) when the suspension/activation should be
executed. If omitted, the suspend/activation is effective immediately.
|No
|===

.Table 32. Suspend a process definition - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the process was suspended.
|404 |Indicates the requested process definition was not found.
|409 |Indicates the requested process definition is already suspended.
|===

*Success response body:* see response for
`repository/process-definitions/{processDefinitionId}`.

[[_activate_a_process_definition]]
== 13.3.7. Activate a process definition

....
PUT repository/process-definitions/{processDefinitionId}
....

*Body JSON:*

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-p]#\{# [.tok-nt]#"action"# [.tok-p]#:#
[.tok-s2]#"activate"#[.tok-p]#,# [.tok-nt]#"includeProcessInstances"#
[.tok-p]#:# [.tok-s2]#"true"#[.tok-p]#,# [.tok-nt]#"date"# [.tok-p]#:#
[.tok-s2]#"2013-04-15T00:42:12Z"# [.tok-p]#}#

See suspend process definition
link:#processDefinitionActionBodyParameters[JSON Body parameters].

.Table 33. Activate a process definition - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the process was activated.
|404 |Indicates the requested process definition was not found.
|409 |Indicates the requested process definition is already active.
|===

*Success response body:* see response for
`repository/process-definitions/{processDefinitionId}`.

[[_get_all_candidate_starters_for_a_process_definition]]
== 13.3.8. Get all candidate starters for a process-definition

....
GET repository/process-definitions/{processDefinitionId}/identitylinks
....

.Table 34. Get all candidate starters for a process-definition - URL
parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processDefinitionId |Yes |String |The id of the process definition to
get the identity links for.
|===

.Table 35. Get all candidate starters for a process-definition -
Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the process definition was found and the requested
identity links are returned.

|404 |Indicates the requested process definition was not found.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
----

[.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4/identitylinks/groups/admin"#[.tok-p]#,#
[.tok-nt]#"user"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"group"#[.tok-p]#:#[.tok-s2]#"admin"#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"candidate"# [.tok-p]#},#
[.tok-p]#\{#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4/identitylinks/users/kermit"#[.tok-p]#,#
[.tok-nt]#"user"#[.tok-p]#:#[.tok-s2]#"kermit"#[.tok-p]#,#
[.tok-nt]#"group"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"candidate"# [.tok-p]#}#
[.tok-p]#]#

[[_add_a_candidate_starter_to_a_process_definition]]
== 13.3.9. Add a candidate starter to a process definition

....
POST repository/process-definitions/{processDefinitionId}/identitylinks
....

.Table 36. Add a candidate starter to a process definition - URL
parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processDefinitionId |Yes |String |The id of the process definition.
|===

*Request body (user):*

[source,pygments,highlight]
----
1
2
3
----

[.tok-p]#\{# [.tok-nt]#"user"# [.tok-p]#:# [.tok-s2]#"kermit"#
[.tok-p]#}#

*Request body (group):*

[source,pygments,highlight]
----
1
2
3
----

[.tok-p]#\{# [.tok-nt]#"groupId"# [.tok-p]#:# [.tok-s2]#"sales"#
[.tok-p]#}#

.Table 37. Add a candidate starter to a process definition - Response
codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|201 |Indicates the process definition was found and the identity link
was created.

|404 |Indicates the requested process definition was not found.
|===

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-p]#\{#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4/identitylinks/users/kermit"#[.tok-p]#,#
[.tok-nt]#"user"#[.tok-p]#:#[.tok-s2]#"kermit"#[.tok-p]#,#
[.tok-nt]#"group"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"candidate"# [.tok-p]#}#

[[_delete_a_candidate_starter_from_a_process_definition]]
== 13.3.10. Delete a candidate starter from a process definition

....
DELETE repository/process-definitions/{processDefinitionId}/identitylinks/{family}/{identityId}
....

.Table 38. Delete a candidate starter from a process definition - URL
parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processDefinitionId |Yes |String |The id of the process definition.

|family |Yes |String |Either `users` or `groups`, depending on the type
of identity link.

|identityId |Yes |String |Either the userId or groupId of the identity
to remove as candidate starter.
|===

.Table 39. Delete a candidate starter from a process definition -
Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|204 |Indicates the process definition was found and the identity link
was removed. The response body is intentionally empty.

|404 |Indicates the requested process definition was not found or the
process definition doesn’t have an identity-link that matches the url.
|===

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-p]#\{#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4/identitylinks/users/kermit"#[.tok-p]#,#
[.tok-nt]#"user"#[.tok-p]#:#[.tok-s2]#"kermit"#[.tok-p]#,#
[.tok-nt]#"group"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"candidate"# [.tok-p]#}#

[[_get_a_candidate_starter_from_a_process_definition]]
== 13.3.11. Get a candidate starter from a process definition

....
GET repository/process-definitions/{processDefinitionId}/identitylinks/{family}/{identityId}
....

.Table 40. Get a candidate starter from a process definition - URL
parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processDefinitionId |Yes |String |The id of the process definition.

|family |Yes |String |Either `users` or `groups`, depending on the type
of identity link.

|identityId |Yes |String |Either the userId or groupId of the identity
to get as candidate starter.
|===

.Table 41. Get a candidate starter from a process definition - Response
codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the process definition was found and the identity link
was returned.

|404 |Indicates the requested process definition was not found or the
process definition doesn’t have an identity-link that matches the url.
|===

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-p]#\{#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4/identitylinks/users/kermit"#[.tok-p]#,#
[.tok-nt]#"user"#[.tok-p]#:#[.tok-s2]#"kermit"#[.tok-p]#,#
[.tok-nt]#"group"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"candidate"# [.tok-p]#}#

[[_models]]
== 13.4. Models

[[_get_a_list_of_models]]
=== 13.4.1. Get a list of models

....
GET repository/models
....

.Table 42. Get a list of models - URL query parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|id |No |String |Only return models with the given id.

|category |No |String |Only return models with the given category.

|categoryLike |No |String |Only return models with a category like the
given value. Use the `%` character as wildcard.

|categoryNotEquals |No |String |Only return models without the given
category.

|name |No |String |Only return models with the given name.

|nameLike |No |String |Only return models with a name like the given
value. Use the `%` character as wildcard.

|key |No |String |Only return models with the given key.

|deploymentId |No |String |Only return models which are deployed in the
given deployment.

|version |No |Integer |Only return models with the given version.

|latestVersion |No |Boolean |If `true`, only return models which are the
latest version. Best used in combination with `key`. If `false` is
passed in as value, this is ignored and all versions are returned.

|deployed |No |Boolean |If `true`, only deployed models are returned. If
`false`, only undeployed models are returned (deploymentId is null).

|tenantId |No |String |Only return models with the given tenantId.

|tenantIdLike |No |String |Only return models with a tenantId like the
given value.

|withoutTenantId |No |Boolean |If `true`, only returns models without a
tenantId set. If `false`, the `withoutTenantId` parameter is ignored.

|sort |No |_id_ (default), _category_, _createTime_, _key_,
_lastUpdateTime_, _name_, _version_ or _tenantId_ |Property to sort on,
to be used together with the _order_.
|===

.Table 43. Get a list of models - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates request was successful and the models are returned

|400 |Indicates a parameter was passed in the wrong format. The
status-message contains additional information.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
----

[.tok-p]#\{# [.tok-nt]#"data"#[.tok-p]#:[# [.tok-p]#\{#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"Model name"#[.tok-p]#,#
[.tok-nt]#"key"#[.tok-p]#:#[.tok-s2]#"Model key"#[.tok-p]#,#
[.tok-nt]#"category"#[.tok-p]#:#[.tok-s2]#"Model category"#[.tok-p]#,#
[.tok-nt]#"version"#[.tok-p]#:#[.tok-mi]#2#[.tok-p]#,#
[.tok-nt]#"metaInfo"#[.tok-p]#:#[.tok-s2]#"Model metainfo"#[.tok-p]#,#
[.tok-nt]#"deploymentId"#[.tok-p]#:#[.tok-s2]#"7"#[.tok-p]#,#
[.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"10"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/repository/models/10"#[.tok-p]#,#
[.tok-nt]#"createTime"#[.tok-p]#:#[.tok-s2]#"2013-06-12T14:31:08.612+0000"#[.tok-p]#,#
[.tok-nt]#"lastUpdateTime"#[.tok-p]#:#[.tok-s2]#"2013-06-12T14:31:08.612+0000"#[.tok-p]#,#
[.tok-nt]#"deploymentUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/repository/deployments/7"#[.tok-p]#,#
[.tok-nt]#"tenantId"#[.tok-p]#:#[.tok-kc]#null# [.tok-p]#},#
[.tok-err]#...# [.tok-p]#],#
[.tok-nt]#"total"#[.tok-p]#:#[.tok-mi]#2#[.tok-p]#,#
[.tok-nt]#"start"#[.tok-p]#:#[.tok-mi]#0#[.tok-p]#,#
[.tok-nt]#"sort"#[.tok-p]#:#[.tok-s2]#"id"#[.tok-p]#,#
[.tok-nt]#"order"#[.tok-p]#:#[.tok-s2]#"asc"#[.tok-p]#,#
[.tok-nt]#"size"#[.tok-p]#:#[.tok-mi]#2# [.tok-p]#}#

[[_get_a_model]]
== 13.4.2. Get a model

....
GET repository/models/{modelId}
....

.Table 44. Get a model - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|modelId |Yes |String |The id of the model to get.
|===

.Table 45. Get a model - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the model was found and returned.
|404 |Indicates the requested model was not found.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
----

[.tok-p]#\{# [.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/repository/models/5"#[.tok-p]#,#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"Model name"#[.tok-p]#,#
[.tok-nt]#"key"#[.tok-p]#:#[.tok-s2]#"Model key"#[.tok-p]#,#
[.tok-nt]#"category"#[.tok-p]#:#[.tok-s2]#"Model category"#[.tok-p]#,#
[.tok-nt]#"version"#[.tok-p]#:#[.tok-mi]#2#[.tok-p]#,#
[.tok-nt]#"metaInfo"#[.tok-p]#:#[.tok-s2]#"Model metainfo"#[.tok-p]#,#
[.tok-nt]#"deploymentId"#[.tok-p]#:#[.tok-s2]#"2"#[.tok-p]#,#
[.tok-nt]#"deploymentUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/repository/deployments/2"#[.tok-p]#,#
[.tok-nt]#"createTime"#[.tok-p]#:#[.tok-s2]#"2013-06-12T12:31:19.861+0000"#[.tok-p]#,#
[.tok-nt]#"lastUpdateTime"#[.tok-p]#:#[.tok-s2]#"2013-06-12T12:31:19.861+0000"#[.tok-p]#,#
[.tok-nt]#"tenantId"#[.tok-p]#:#[.tok-kc]#null# [.tok-p]#}#

[[_update_a_model]]
== 13.4.3. Update a model

....
PUT repository/models/{modelId}
....

*Request body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-p]#\{# [.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"Model
name"#[.tok-p]#,# [.tok-nt]#"key"#[.tok-p]#:#[.tok-s2]#"Model
key"#[.tok-p]#,# [.tok-nt]#"category"#[.tok-p]#:#[.tok-s2]#"Model
category"#[.tok-p]#,#
[.tok-nt]#"version"#[.tok-p]#:#[.tok-mi]#2#[.tok-p]#,#
[.tok-nt]#"metaInfo"#[.tok-p]#:#[.tok-s2]#"Model metainfo"#[.tok-p]#,#
[.tok-nt]#"deploymentId"#[.tok-p]#:#[.tok-s2]#"2"#[.tok-p]#,#
[.tok-nt]#"tenantId"#[.tok-p]#:#[.tok-s2]#"updatedTenant"# [.tok-p]#}#

All request values are optional. For example, you can only include the
_name_ attribute in the request body JSON-object, only updating the name
of the model, leaving all other fields unaffected. When an attribute is
explicitly included and is set to null, the model-value will be updated
to null. Example: `{"metaInfo" : null}` will clear the metaInfo of the
model).

.Table 46. Update a model - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the model was found and updated.
|404 |Indicates the requested model was not found.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
----

[.tok-p]#\{# [.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/repository/models/5"#[.tok-p]#,#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"Model name"#[.tok-p]#,#
[.tok-nt]#"key"#[.tok-p]#:#[.tok-s2]#"Model key"#[.tok-p]#,#
[.tok-nt]#"category"#[.tok-p]#:#[.tok-s2]#"Model category"#[.tok-p]#,#
[.tok-nt]#"version"#[.tok-p]#:#[.tok-mi]#2#[.tok-p]#,#
[.tok-nt]#"metaInfo"#[.tok-p]#:#[.tok-s2]#"Model metainfo"#[.tok-p]#,#
[.tok-nt]#"deploymentId"#[.tok-p]#:#[.tok-s2]#"2"#[.tok-p]#,#
[.tok-nt]#"deploymentUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/repository/deployments/2"#[.tok-p]#,#
[.tok-nt]#"createTime"#[.tok-p]#:#[.tok-s2]#"2013-06-12T12:31:19.861+0000"#[.tok-p]#,#
[.tok-nt]#"lastUpdateTime"#[.tok-p]#:#[.tok-s2]#"2013-06-12T12:31:19.861+0000"#[.tok-p]#,#
[.tok-nt]#"tenantId"#[.tok-p]#:#[.tok-s2]#""#[.tok-err]#updatedTenant"#
[.tok-p]#}#

[[_create_a_model]]
== 13.4.4. Create a model

....
POST repository/models
....

*Request body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-p]#\{# [.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"Model
name"#[.tok-p]#,# [.tok-nt]#"key"#[.tok-p]#:#[.tok-s2]#"Model
key"#[.tok-p]#,# [.tok-nt]#"category"#[.tok-p]#:#[.tok-s2]#"Model
category"#[.tok-p]#,#
[.tok-nt]#"version"#[.tok-p]#:#[.tok-mi]#1#[.tok-p]#,#
[.tok-nt]#"metaInfo"#[.tok-p]#:#[.tok-s2]#"Model metainfo"#[.tok-p]#,#
[.tok-nt]#"deploymentId"#[.tok-p]#:#[.tok-s2]#"2"#[.tok-p]#,#
[.tok-nt]#"tenantId"#[.tok-p]#:#[.tok-s2]#"tenant"# [.tok-p]#}#

All request values are optional. For example, you can only include the
_name_ attribute in the request body JSON-object, only setting the name
of the model, leaving all other fields null.

.Table 47. Create a model - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|201 |Indicates the model was created.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
----

[.tok-p]#\{# [.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/repository/models/5"#[.tok-p]#,#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"Model name"#[.tok-p]#,#
[.tok-nt]#"key"#[.tok-p]#:#[.tok-s2]#"Model key"#[.tok-p]#,#
[.tok-nt]#"category"#[.tok-p]#:#[.tok-s2]#"Model category"#[.tok-p]#,#
[.tok-nt]#"version"#[.tok-p]#:#[.tok-mi]#1#[.tok-p]#,#
[.tok-nt]#"metaInfo"#[.tok-p]#:#[.tok-s2]#"Model metainfo"#[.tok-p]#,#
[.tok-nt]#"deploymentId"#[.tok-p]#:#[.tok-s2]#"2"#[.tok-p]#,#
[.tok-nt]#"deploymentUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/repository/deployments/2"#[.tok-p]#,#
[.tok-nt]#"createTime"#[.tok-p]#:#[.tok-s2]#"2013-06-12T12:31:19.861+0000"#[.tok-p]#,#
[.tok-nt]#"lastUpdateTime"#[.tok-p]#:#[.tok-s2]#"2013-06-12T12:31:19.861+0000"#[.tok-p]#,#
[.tok-nt]#"tenantId"#[.tok-p]#:#[.tok-s2]#"tenant"# [.tok-p]#}#

[[_delete_a_model]]
== 13.4.5. Delete a model

....
DELETE repository/models/{modelId}
....

.Table 48. Delete a model - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|modelId |Yes |String |The id of the model to delete.
|===

.Table 49. Delete a model - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|204 |Indicates the model was found and has been deleted. Response-body
is intentionally empty.

|404 |Indicates the requested model was not found.
|===

[[_get_the_editor_source_for_a_model]]
== 13.4.6. Get the editor source for a model

....
GET repository/models/{modelId}/source
....

.Table 50. Get the editor source for a model - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|modelId |Yes |String |The id of the model.
|===

.Table 51. Get the editor source for a model - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the model was found and source is returned.
|404 |Indicates the requested model was not found.
|===

*Success response body:*

Response body contains the model’s raw editor source. The response’s
content-type is set to `application/octet-stream`, regardless of the
content of the source.

[[_set_the_editor_source_for_a_model]]
== 13.4.7. Set the editor source for a model

....
PUT repository/models/{modelId}/source
....

.Table 52. Set the editor source for a model - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|modelId |Yes |String |The id of the model.
|===

*Request body:*

The request should be of type `multipart/form-data`. There should be a
single file-part included with the binary value of the source.

.Table 53. Set the editor source for a model - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the model was found and the source has been updated.
|404 |Indicates the requested model was not found.
|===

*Success response body:*

Response body contains the model’s raw editor source. The response’s
content-type is set to `application/octet-stream`, regardless of the
content of the source.

[[_get_the_extra_editor_source_for_a_model]]
== 13.4.8. Get the extra editor source for a model

....
GET repository/models/{modelId}/source-extra
....

.Table 54. Get the extra editor source for a model - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|modelId |Yes |String |The id of the model.
|===

.Table 55. Get the extra editor source for a model - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the model was found and source is returned.
|404 |Indicates the requested model was not found.
|===

*Success response body:*

Response body contains the model’s raw extra editor source. The
response’s content-type is set to `application/octet-stream`, regardless
of the content of the extra source.

[[_set_the_extra_editor_source_for_a_model]]
== 13.4.9. Set the extra editor source for a model

....
PUT repository/models/{modelId}/source-extra
....

.Table 56. Set the extra editor source for a model - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|modelId |Yes |String |The id of the model.
|===

*Request body:*

The request should be of type `multipart/form-data`. There should be a
single file-part included with the binary value of the extra source.

.Table 57. Set the extra editor source for a model - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the model was found and the extra source has been
updated.

|404 |Indicates the requested model was not found.
|===

*Success response body:*

Response body contains the model’s raw editor source. The response’s
content-type is set to `application/octet-stream`, regardless of the
content of the source.

[[_process_instances]]
== 13.5. Process Instances

[[_get_a_process_instance]]
=== 13.5.1. Get a process instance

....
GET runtime/process-instances/{processInstanceId}
....

.Table 58. Get a process instance - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processInstanceId |Yes |String |The id of the process instance to get.
|===

.Table 59. Get a process instance - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the process instance was found and returned.
|404 |Indicates the requested process instance was not found.
|===

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-p]#\{# [.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"7"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/process-instances/7"#[.tok-p]#,#
[.tok-nt]#"businessKey"#[.tok-p]#:#[.tok-s2]#"myBusinessKey"#[.tok-p]#,#
[.tok-nt]#"suspended"#[.tok-p]#:#[.tok-kc]#false#[.tok-p]#,#
[.tok-nt]#"processDefinitionUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/repository/process-definitions/processOne%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"activityId"#[.tok-p]#:#[.tok-s2]#"processTask"#[.tok-p]#,#
[.tok-nt]#"tenantId"#[.tok-p]#:# [.tok-kc]#null# [.tok-p]#}#

[[_delete_a_process_instance]]
== 13.5.2. Delete a process instance

....
DELETE runtime/process-instances/{processInstanceId}
....

.Table 60. Delete a process instance - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processInstanceId |Yes |String |The id of the process instance to
delete.
|===

.Table 61. Delete a process instance - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|204 |Indicates the process instance was found and deleted. Response
body is left empty intentionally.

|404 |Indicates the requested process instance was not found.
|===

[[_activate_or_suspend_a_process_instance]]
== 13.5.3. Activate or suspend a process instance

....
PUT runtime/process-instances/{processInstanceId}
....

.Table 62. Activate or suspend a process instance - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processInstanceId |Yes |String |The id of the process instance to
activate/suspend.
|===

*Request response body (suspend):*

[source,pygments,highlight]
----
1
2
3
----

[.tok-p]#\{# [.tok-nt]#"action"#[.tok-p]#:#[.tok-s2]#"suspend"#
[.tok-p]#}#

*Request response body (activate):*

[source,pygments,highlight]
----
1
2
3
----

[.tok-p]#\{# [.tok-nt]#"action"#[.tok-p]#:#[.tok-s2]#"activate"#
[.tok-p]#}#

.Table 63. Activate or suspend a process instance - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the process instance was found and action was executed.

|400 |Indicates an invalid action was supplied.

|404 |Indicates the requested process instance was not found.

|409 |Indicates the requested process instance action cannot be executed
since the process-instance is already activated/suspended.
|===

[[_start_a_process_instance]]
== 13.5.4. Start a process instance

....
POST runtime/process-instances
....

*Request body (start by process definition id):*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
----

[.tok-p]#\{#
[.tok-nt]#"processDefinitionId"#[.tok-p]#:#[.tok-s2]#"oneTaskProcess:1:158"#[.tok-p]#,#
[.tok-nt]#"businessKey"#[.tok-p]#:#[.tok-s2]#"myBusinessKey"#[.tok-p]#,#
[.tok-nt]#"variables"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"myVar"#[.tok-p]#,#
[.tok-nt]#"value"#[.tok-p]#:#[.tok-s2]#"This is a variable"#[.tok-p]#,#
[.tok-p]#}# [.tok-p]#]# [.tok-p]#}#

*Request body (start by process definition key):*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
----

[.tok-p]#\{#
[.tok-nt]#"processDefinitionKey"#[.tok-p]#:#[.tok-s2]#"oneTaskProcess"#[.tok-p]#,#
[.tok-nt]#"businessKey"#[.tok-p]#:#[.tok-s2]#"myBusinessKey"#[.tok-p]#,#
[.tok-nt]#"tenantId"#[.tok-p]#:# [.tok-s2]#"tenant1"#[.tok-p]#,#
[.tok-nt]#"variables"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"myVar"#[.tok-p]#,#
[.tok-nt]#"value"#[.tok-p]#:#[.tok-s2]#"This is a variable"#[.tok-p]#,#
[.tok-p]#}# [.tok-p]#]# [.tok-p]#}#

*Request body (start by message):*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
----

[.tok-p]#\{#
[.tok-nt]#"message"#[.tok-p]#:#[.tok-s2]#"newOrderMessage"#[.tok-p]#,#
[.tok-nt]#"businessKey"#[.tok-p]#:#[.tok-s2]#"myBusinessKey"#[.tok-p]#,#
[.tok-nt]#"tenantId"#[.tok-p]#:# [.tok-s2]#"tenant1"#[.tok-p]#,#
[.tok-nt]#"variables"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"myVar"#[.tok-p]#,#
[.tok-nt]#"value"#[.tok-p]#:#[.tok-s2]#"This is a variable"#[.tok-p]#,#
[.tok-p]#}# [.tok-p]#]# [.tok-p]#}#

Note that also a _transientVariables_ property is accepted as part of
this json, that follows the same structure as the _variables_ property.

Only one of `processDefinitionId`, `processDefinitionKey` or `message`
can be used in the request body. Parameters `businessKey`, `variables`
and `tenantId` are optional. If `tenantId` is omitted, the default
tenant will be used. More information about the variable format can be
found in link:#restVariables[the REST variables section]. Note that the
variable-scope that is supplied is ignored, process-variables are always
`local`.

.Table 64. Start a process instance - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|201 |Indicates the process instance was created.

|400 |Indicates either the process-definition was not found (based on id
or key), no process is started by sending the given message or an
invalid variable has been passed. Status description contains additional
information about the error.
|===

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-p]#\{# [.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"7"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/process-instances/7"#[.tok-p]#,#
[.tok-nt]#"businessKey"#[.tok-p]#:#[.tok-s2]#"myBusinessKey"#[.tok-p]#,#
[.tok-nt]#"suspended"#[.tok-p]#:#[.tok-kc]#false#[.tok-p]#,#
[.tok-nt]#"processDefinitionUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/repository/process-definitions/processOne%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"activityId"#[.tok-p]#:#[.tok-s2]#"processTask"#[.tok-p]#,#
[.tok-nt]#"tenantId"# [.tok-p]#:# [.tok-kc]#null# [.tok-p]#}#

[[restProcessInstancesGet]]
== 13.5.5. List of process instances

....
GET runtime/process-instances
....

.Table 65. List of process instances - URL query parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|id |No |String |Only return process instance with the given id.

|processDefinitionKey |No |String |Only return process instances with
the given process definition key.

|processDefinitionId |No |String |Only return process instances with the
given process definition id.

|businessKey |No |String |Only return process instances with the given
businessKey.

|involvedUser |No |String |Only return process instances in which the
given user is involved.

|suspended |No |Boolean |If `true`, only return process instance which
are suspended. If `false`, only return process instances which are not
suspended (active).

|superProcessInstanceId |No |String |Only return process instances which
have the given super process-instance id (for processes that have a
call-activities).

|subProcessInstanceId |No |String |Only return process instances which
have the given sub process-instance id (for processes started as a
call-activity).

|excludeSubprocesses |No |Boolean |Return only process instances which
aren’t sub processes.

|includeProcessVariables |No |Boolean |Indication to include process
variables in the result.

|tenantId |No |String |Only return process instances with the given
tenantId.

|tenantIdLike |No |String |Only return process instances with a tenantId
like the given value.

|withoutTenantId |No |Boolean |If `true`, only returns process instances
without a tenantId set. If `false`, the `withoutTenantId` parameter is
ignored.

|sort |No |String |Sort field, should be either one of `id` (default),
`processDefinitionId`, `tenantId` or `processDefinitionKey`.
|===

.Table 66. List of process instances - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates request was successful and the process-instances are
returned

|400 |Indicates a parameter was passed in the wrong format . The
status-message contains additional information.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
----

[.tok-p]#\{# [.tok-nt]#"data"#[.tok-p]#:[# [.tok-p]#\{#
[.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"7"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/process-instances/7"#[.tok-p]#,#
[.tok-nt]#"businessKey"#[.tok-p]#:#[.tok-s2]#"myBusinessKey"#[.tok-p]#,#
[.tok-nt]#"suspended"#[.tok-p]#:#[.tok-kc]#false#[.tok-p]#,#
[.tok-nt]#"processDefinitionUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/repository/process-definitions/processOne%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"activityId"#[.tok-p]#:#[.tok-s2]#"processTask"#[.tok-p]#,#
[.tok-nt]#"tenantId"# [.tok-p]#:# [.tok-kc]#null# [.tok-p]#}#
[.tok-p]#],# [.tok-nt]#"total"#[.tok-p]#:#[.tok-mi]#2#[.tok-p]#,#
[.tok-nt]#"start"#[.tok-p]#:#[.tok-mi]#0#[.tok-p]#,#
[.tok-nt]#"sort"#[.tok-p]#:#[.tok-s2]#"id"#[.tok-p]#,#
[.tok-nt]#"order"#[.tok-p]#:#[.tok-s2]#"asc"#[.tok-p]#,#
[.tok-nt]#"size"#[.tok-p]#:#[.tok-mi]#2# [.tok-p]#}#

[[_query_process_instances]]
== 13.5.6. Query process instances

....
POST query/process-instances
....

*Request body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
----

[.tok-p]#\{#
[.tok-nt]#"processDefinitionKey"#[.tok-p]#:#[.tok-s2]#"oneTaskProcess"#[.tok-p]#,#
[.tok-nt]#"variables"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"name"# [.tok-p]#:# [.tok-s2]#"myVariable"#[.tok-p]#,#
[.tok-nt]#"value"# [.tok-p]#:# [.tok-mi]#1234#[.tok-p]#,#
[.tok-nt]#"operation"# [.tok-p]#:# [.tok-s2]#"equals"#[.tok-p]#,#
[.tok-nt]#"type"# [.tok-p]#:# [.tok-s2]#"long"# [.tok-p]#}# [.tok-p]#]#
[.tok-p]#}#

The request body can contain all possible filters that can be used in
the link:#restProcessInstancesGet[List process instances] URL query. On
top of these, it’s possible to provide an array of variables to include
in the query, with their format link:#restQueryVariable[described here].

The general link:#restPagingAndSort[paging and sorting query-parameters]
can be used for this URL.

.Table 67. Query process instances - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates request was successful and the process-instances are
returned

|400 |Indicates a parameter was passed in the wrong format . The
status-message contains additional information.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
----

[.tok-p]#\{# [.tok-nt]#"data"#[.tok-p]#:[# [.tok-p]#\{#
[.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"7"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/process-instances/7"#[.tok-p]#,#
[.tok-nt]#"businessKey"#[.tok-p]#:#[.tok-s2]#"myBusinessKey"#[.tok-p]#,#
[.tok-nt]#"suspended"#[.tok-p]#:#[.tok-kc]#false#[.tok-p]#,#
[.tok-nt]#"processDefinitionUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/repository/process-definitions/processOne%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"activityId"#[.tok-p]#:#[.tok-s2]#"processTask"#[.tok-p]#,#
[.tok-nt]#"tenantId"# [.tok-p]#:# [.tok-kc]#null# [.tok-p]#}#
[.tok-p]#],# [.tok-nt]#"total"#[.tok-p]#:#[.tok-mi]#2#[.tok-p]#,#
[.tok-nt]#"start"#[.tok-p]#:#[.tok-mi]#0#[.tok-p]#,#
[.tok-nt]#"sort"#[.tok-p]#:#[.tok-s2]#"id"#[.tok-p]#,#
[.tok-nt]#"order"#[.tok-p]#:#[.tok-s2]#"asc"#[.tok-p]#,#
[.tok-nt]#"size"#[.tok-p]#:#[.tok-mi]#2# [.tok-p]#}#

[[_get_diagram_for_a_process_instance]]
== 13.5.7. Get diagram for a process instance

....
GET runtime/process-instances/{processInstanceId}/diagram
....

.Table 68. Get diagram for a process instance - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processInstanceId |Yes |String |The id of the process instance to get
the diagram for.
|===

.Table 69. Get diagram for a process instance - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the process instance was found and the diagram was
returned.

|400 |Indicates the requested process instance was not found but the
process doesn’t contain any graphical information (BPMN:DI) and no
diagram can be created.

|404 |Indicates the requested process instance was not found.
|===

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
----

[.tok-p]#\{# [.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"7"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/process-instances/7"#[.tok-p]#,#
[.tok-nt]#"businessKey"#[.tok-p]#:#[.tok-s2]#"myBusinessKey"#[.tok-p]#,#
[.tok-nt]#"suspended"#[.tok-p]#:#[.tok-kc]#false#[.tok-p]#,#
[.tok-nt]#"processDefinitionUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/repository/process-definitions/processOne%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"activityId"#[.tok-p]#:#[.tok-s2]#"processTask"# [.tok-p]#}#

[[_get_involved_people_for_process_instance]]
== 13.5.8. Get involved people for process instance

....
GET runtime/process-instances/{processInstanceId}/identitylinks
....

.Table 70. Get involved people for process instance - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processInstanceId |Yes |String |The id of the process instance to the
links for.
|===

.Table 71. Get involved people for process instance - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the process instance was found and links are returned.
|404 |Indicates the requested process instance was not found.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
----

[.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/process-instances/5/identitylinks/users/john/customType"#[.tok-p]#,#
[.tok-nt]#"user"#[.tok-p]#:#[.tok-s2]#"john"#[.tok-p]#,#
[.tok-nt]#"group"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"customType"# [.tok-p]#},#
[.tok-p]#\{#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/process-instances/5/identitylinks/users/paul/candidate"#[.tok-p]#,#
[.tok-nt]#"user"#[.tok-p]#:#[.tok-s2]#"paul"#[.tok-p]#,#
[.tok-nt]#"group"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"candidate"# [.tok-p]#}#
[.tok-p]#]#

Note that the `groupId` will always be null, as it’s only possible to
involve users with a process-instance.

[[_add_an_involved_user_to_a_process_instance]]
== 13.5.9. Add an involved user to a process instance

....
POST runtime/process-instances/{processInstanceId}/identitylinks
....

.Table 72. Add an involved user to a process instance - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processInstanceId |Yes |String |The id of the process instance to the
links for.
|===

*Request body:*

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-p]#\{#
[.tok-nt]#"userId"#[.tok-p]#:#[.tok-s2]#"kermit"#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"participant"# [.tok-p]#}#

Both `userId` and `type` are required.

.Table 73. Add an involved user to a process instance - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|201 |Indicates the process instance was found and the link is created.
|400 |Indicates the requested body did not contain a userId or a type.
|404 |Indicates the requested process instance was not found.
|===

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-p]#\{#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/process-instances/5/identitylinks/users/john/customType"#[.tok-p]#,#
[.tok-nt]#"user"#[.tok-p]#:#[.tok-s2]#"john"#[.tok-p]#,#
[.tok-nt]#"group"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"customType"# [.tok-p]#}#

Note that the `groupId` will always be null, as it’s only possible to
involve users with a process-instance.

[[_remove_an_involved_user_to_from_process_instance]]
== 13.5.10. Remove an involved user to from process instance

....
DELETE runtime/process-instances/{processInstanceId}/identitylinks/users/{userId}/{type}
....

.Table 74. Remove an involved user to from process instance - URL
parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processInstanceId |Yes |String |The id of the process instance.
|userId |Yes |String |The id of the user to delete link for.
|type |Yes |String |Type of link to delete.
|===

.Table 75. Remove an involved user to from process instance - Response
codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|204 |Indicates the process instance was found and the link has been
deleted. Response body is left empty intentionally.

|404 |Indicates the requested process instance was not found or the link
to delete doesn’t exist. The response status contains additional
information about the error.
|===

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-p]#\{#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/process-instances/5/identitylinks/users/john/customType"#[.tok-p]#,#
[.tok-nt]#"user"#[.tok-p]#:#[.tok-s2]#"john"#[.tok-p]#,#
[.tok-nt]#"group"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"customType"# [.tok-p]#}#

Note that the `groupId` will always be null, as it’s only possible to
involve users with a process-instance.

[[_list_of_variables_for_a_process_instance]]
== 13.5.11. List of variables for a process instance

....
GET runtime/process-instances/{processInstanceId}/variables
....

.Table 76. List of variables for a process instance - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processInstanceId |Yes |String |The id of the process instance to the
variables for.
|===

.Table 77. List of variables for a process instance - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the process instance was found and variables are
returned.

|404 |Indicates the requested process instance was not found.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
----

[.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"intProcVar"#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"integer"#[.tok-p]#,#
[.tok-nt]#"value"#[.tok-p]#:#[.tok-mi]#123#[.tok-p]#,#
[.tok-nt]#"scope"#[.tok-p]#:#[.tok-s2]#"local"# [.tok-p]#},#
[.tok-p]#\{#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"byteArrayProcVar"#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"binary"#[.tok-p]#,#
[.tok-nt]#"value"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"valueUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/process-instances/5/variables/byteArrayProcVar/data"#[.tok-p]#,#
[.tok-nt]#"scope"#[.tok-p]#:#[.tok-s2]#"local"# [.tok-p]#}# [.tok-p]#]#

In case the variable is a binary variable or serializable, the
`valueUrl` points to an URL to fetch the raw value. If it’s a plain
variable, the value is present in the response. Note that only `local`
scoped variables are returned, as there is no `global` scope for
process-instance variables.

[[_get_a_variable_for_a_process_instance]]
== 13.5.12. Get a variable for a process instance

....
GET runtime/process-instances/{processInstanceId}/variables/{variableName}
....

.Table 78. Get a variable for a process instance - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processInstanceId |Yes |String |The id of the process instance to the
variables for.

|variableName |Yes |String |Name of the variable to get.
|===

.Table 79. Get a variable for a process instance - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates both the process instance and variable were found and
variable is returned.

|400 |Indicates the request body is incomplete or contains illegal
values. The status description contains additional information about the
error.

|404 |Indicates the requested process instance was not found or the
process instance does not have a variable with the given name. Status
description contains additional information about the error.
|===

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-p]#\{#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"intProcVar"#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"integer"#[.tok-p]#,#
[.tok-nt]#"value"#[.tok-p]#:#[.tok-mi]#123#[.tok-p]#,#
[.tok-nt]#"scope"#[.tok-p]#:#[.tok-s2]#"local"# [.tok-p]#}#

In case the variable is a binary variable or serializable, the
`valueUrl` points to an URL to fetch the raw value. If it’s a plain
variable, the value is present in the response. Note that only `local`
scoped variables are returned, as there is no `global` scope for
process-instance variables.

[[_create_or_update_variables_on_a_process_instance]]
== 13.5.13. Create (or update) variables on a process instance

....
POST runtime/process-instances/{processInstanceId}/variables
....

....
PUT runtime/process-instances/{processInstanceId}/variables
....

When using `POST`, all variables that are passed are created. In case
one of the variables already exists on the process instance, the request
results in an error (409 - CONFLICT). When `PUT` is used, nonexistent
variables are created on the process-instance and existing ones are
overridden without any error.

.Table 80. Create (or update) variables on a process instance - URL
parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processInstanceId |Yes |String |The id of the process instance to the
variables for.
|===

*Request body:*

....
[
   {
      "name":"intProcVar"
      "type":"integer"
      "value":123
   },

   ...
]
....

Any number of variables can be passed into the request body array. More
information about the variable format can be found in
link:#restVariables[the REST variables section]. Note that scope is
ignored, only `local` variables can be set in a process instance.

.Table 81. Create (or update) variables on a process instance - Response
codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|201 |Indicates the process instance was found and variable is created.

|400 |Indicates the request body is incomplete or contains illegal
values. The status description contains additional information about the
error.

|404 |Indicates the requested process instance was not found.

|409 |Indicates the process instance was found but already contains a
variable with the given name (only thrown when POST method is used). Use
the update-method instead.
|===

*Success response body:*

....
[
   {
      "name":"intProcVar",
      "type":"integer",
      "value":123,
      "scope":"local"
   },

   ...

]
....

[[_update_a_single_variable_on_a_process_instance]]
== 13.5.14. Update a single variable on a process instance

....
PUT runtime/process-instances/{processInstanceId}/variables/{variableName}
....

.Table 82. Update a single variable on a process instance - URL
parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processInstanceId |Yes |String |The id of the process instance to the
variables for.

|variableName |Yes |String |Name of the variable to get.
|===

*Request body:*

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-p]#\{# [.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"intProcVar"#
[.tok-s2]#"type"#[.tok-p]#:#[.tok-s2]#"integer"#
[.tok-s2]#"value"#[.tok-p]#:#[.tok-mi]#123# [.tok-p]#}#

More information about the variable format can be found in
link:#restVariables[the REST variables section]. Note that scope is
ignored, only `local` variables can be set in a process instance.

.Table 83. Update a single variable on a process instance - Response
codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates both the process instance and variable were found and
variable is updated.

|404 |Indicates the requested process instance was not found or the
process instance does not have a variable with the given name. Status
description contains additional information about the error.
|===

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-p]#\{#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"intProcVar"#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"integer"#[.tok-p]#,#
[.tok-nt]#"value"#[.tok-p]#:#[.tok-mi]#123#[.tok-p]#,#
[.tok-nt]#"scope"#[.tok-p]#:#[.tok-s2]#"local"# [.tok-p]#}#

In case the variable is a binary variable or serializable, the
`valueUrl` points to an URL to fetch the raw value. If it’s a plain
variable, the value is present in the response. Note that only `local`
scoped variables are returned, as there is no `global` scope for
process-instance variables.

[[_create_a_new_binary_variable_on_a_process_instance]]
== 13.5.15. Create a new binary variable on a process-instance

....
POST runtime/process-instances/{processInstanceId}/variables
....

.Table 84. Create a new binary variable on a process-instance - URL
parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processInstanceId |Yes |String |The id of the process instance to
create the new variable for.
|===

*Request body:*

The request should be of type `multipart/form-data`. There should be a
single file-part included with the binary value of the variable. On top
of that, the following additional form-fields can be present:

* `name`: Required name of the variable.
* `type`: Type of variable that is created. If omitted, `binary` is
assumed and the binary data in the request will be stored as an array of
bytes.

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-p]#\{# [.tok-nt]#"name"# [.tok-p]#:#
[.tok-s2]#"binaryVariable"#[.tok-p]#,# [.tok-nt]#"scope"# [.tok-p]#:#
[.tok-s2]#"local"#[.tok-p]#,# [.tok-nt]#"type"# [.tok-p]#:#
[.tok-s2]#"binary"#[.tok-p]#,# [.tok-nt]#"value"# [.tok-p]#:#
[.tok-kc]#null#[.tok-p]#,# [.tok-nt]#"valueUrl"# [.tok-p]#:#
[.tok-s2]#"http://.../runtime/process-instances/123/variables/binaryVariable/data"#
[.tok-p]#}#

.Table 85. Create a new binary variable on a process-instance - Response
codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|201 |Indicates the variable was created and the result is returned.

|400 |Indicates the name of the variable to create was missing. Status
message provides additional information.

|404 |Indicates the requested process instance was not found.

|409 |Indicates the process instance already has a variable with the
given name. Use the PUT method to update the task variable instead.

|415 |Indicates the serializable data contains an object for which no
class is present in the JVM running the Activiti engine and therefore
cannot be deserialized.
|===

[[_update_an_existing_binary_variable_on_a_process_instance]]
== 13.5.16. Update an existing binary variable on a process-instance

....
PUT runtime/process-instances/{processInstanceId}/variables
....

.Table 86. Update an existing binary variable on a process-instance -
URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processInstanceId |Yes |String |The id of the process instance to
create the new variable for.
|===

*Request body:* The request should be of type `multipart/form-data`.
There should be a single file-part included with the binary value of the
variable. On top of that, the following additional form-fields can be
present:

* `name`: Required name of the variable.
* `type`: Type of variable that is created. If omitted, `binary` is
assumed and the binary data in the request will be stored as an array of
bytes.

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-p]#\{# [.tok-nt]#"name"# [.tok-p]#:#
[.tok-s2]#"binaryVariable"#[.tok-p]#,# [.tok-nt]#"scope"# [.tok-p]#:#
[.tok-s2]#"local"#[.tok-p]#,# [.tok-nt]#"type"# [.tok-p]#:#
[.tok-s2]#"binary"#[.tok-p]#,# [.tok-nt]#"value"# [.tok-p]#:#
[.tok-kc]#null#[.tok-p]#,# [.tok-nt]#"valueUrl"# [.tok-p]#:#
[.tok-s2]#"http://.../runtime/process-instances/123/variables/binaryVariable/data"#
[.tok-p]#}#

.Table 87. Update an existing binary variable on a process-instance -
Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the variable was updated and the result is returned.

|400 |Indicates the name of the variable to update was missing. Status
message provides additional information.

|404 |Indicates the requested process instance was not found or the
process instance does not have a variable with the given name.

|415 |Indicates the serializable data contains an object for which no
class is present in the JVM running the Activiti engine and therefore
cannot be deserialized.
|===

[[_executions]]
== 13.6. Executions

[[_get_an_execution]]
=== 13.6.1. Get an execution

....
GET runtime/executions/{executionId}
....

.Table 88. Get an execution - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|executionId |Yes |String |The id of the execution to get.
|===

.Table 89. Get an execution - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the execution was found and returned.
|404 |Indicates the execution was not found.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
----

[.tok-p]#\{# [.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/executions/5"#[.tok-p]#,#
[.tok-nt]#"parentId"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"parentUrl"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"processInstanceId"#[.tok-p]#:#[.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/process-instances/5"#[.tok-p]#,#
[.tok-nt]#"suspended"#[.tok-p]#:#[.tok-kc]#false#[.tok-p]#,#
[.tok-nt]#"activityId"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"tenantId"#[.tok-p]#:# [.tok-kc]#null# [.tok-p]#}#

[[_execute_an_action_on_an_execution]]
== 13.6.2. Execute an action on an execution

....
PUT runtime/executions/{executionId}
....

.Table 90. Execute an action on an execution - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|executionId |Yes |String |The id of the execution to execute action on.
|===

*Request body (signal an execution):*

[source,pygments,highlight]
----
1
2
3
----

[.tok-p]#\{# [.tok-nt]#"action"#[.tok-p]#:#[.tok-s2]#"signal"#
[.tok-p]#}#

Both a _variables_ and _transientVariables_ property is accepted with
following structure:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-p]#\{#
[.tok-nt]#"action"#[.tok-p]#:#[.tok-s2]#"signal"#[.tok-p]#,#
[.tok-nt]#"variables"# [.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"name"#[.tok-p]#:# [.tok-s2]#"myVar"#[.tok-p]#,#
[.tok-nt]#"value"#[.tok-p]#:# [.tok-s2]#"someValue"# [.tok-p]#}#
[.tok-p]#]# [.tok-p]#}#

*Request body (signal event received for execution):*

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-p]#\{#
[.tok-nt]#"action"#[.tok-p]#:#[.tok-s2]#"signalEventReceived"#[.tok-p]#,#
[.tok-nt]#"signalName"#[.tok-p]#:#[.tok-s2]#"mySignal"#
[.tok-s2]#"variables"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#]# [.tok-p]#}#

Notifies the execution that a signal event has been received, requires a
`signalName` parameter. Optional `variables` can be passed that are set
on the execution before the action is executed.

*Request body (signal event received for execution):*

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-p]#\{#
[.tok-nt]#"action"#[.tok-p]#:#[.tok-s2]#"messageEventReceived"#[.tok-p]#,#
[.tok-nt]#"messageName"#[.tok-p]#:#[.tok-s2]#"myMessage"#
[.tok-s2]#"variables"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#]# [.tok-p]#}#

Notifies the execution that a message event has been received, requires
a `messageName` parameter. Optional `variables` can be passed that are
set on the execution before the action is executed.

.Table 91. Execute an action on an execution - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the execution was found and the action is performed.

|204 |Indicates the execution was found, the action was performed and
the action caused the execution to end.

|400 |Indicates an illegal action was requested, required parameters are
missing in the request body or illegal variables are passed in. Status
description contains additional information about the error.

|404 |Indicates the execution was not found.
|===

*Success response body (in case execution is not ended due to action):*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
----

[.tok-p]#\{# [.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/executions/5"#[.tok-p]#,#
[.tok-nt]#"parentId"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"parentUrl"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"processInstanceId"#[.tok-p]#:#[.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/process-instances/5"#[.tok-p]#,#
[.tok-nt]#"suspended"#[.tok-p]#:#[.tok-kc]#false#[.tok-p]#,#
[.tok-nt]#"activityId"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"tenantId"# [.tok-p]#:# [.tok-kc]#null# [.tok-p]#}#

[[_get_active_activities_in_an_execution]]
== 13.6.3. Get active activities in an execution

....
GET runtime/executions/{executionId}/activities
....

Returns all activities which are active in the execution and in all
child-executions (and their children, recursively), if any.

.Table 92. Get active activities in an execution - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|executionId |Yes |String |The id of the execution to get activities
for.
|===

.Table 93. Get active activities in an execution - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the execution was found and activities are returned.
|404 |Indicates the execution was not found.
|===

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-p]#[# [.tok-s2]#"userTaskForManager"#[.tok-p]#,#
[.tok-s2]#"receiveTask"# [.tok-p]#]#

[[restExecutionsGet]]
== 13.6.4. List of executions

....
GET runtime/executions
....

.Table 94. List of executions - URL query parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|id |No |String |Only return executions with the given id.

|activityId |No |String |Only return executions with the given activity
id.

|processDefinitionKey |No |String |Only return executions with the given
process definition key.

|processDefinitionId |No |String |Only return executions with the given
process definition id.

|processInstanceId |No |String |Only return executions which are part of
the process instance with the given id.

|messageEventSubscriptionName |No |String |Only return executions which
are subscribed to a message with the given name.

|signalEventSubscriptionName |No |String |Only return executions which
are subscribed to a signal with the given name.

|parentId |No |String |Only return executions which are a direct child
of the given execution.

|tenantId |No |String |Only return executions with the given tenantId.

|tenantIdLike |No |String |Only return executions with a tenantId like
the given value.

|withoutTenantId |No |Boolean |If `true`, only returns executions
without a tenantId set. If `false`, the `withoutTenantId` parameter is
ignored.

|sort |No |String |Sort field, should be either one of
`processInstanceId` (default), `processDefinitionId`,
`processDefinitionKey` or `tenantId`.
|===

.Table 95. List of executions - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates request was successful and the executions are returned

|400 |Indicates a parameter was passed in the wrong format . The
status-message contains additional information.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
----

[.tok-p]#\{# [.tok-nt]#"data"#[.tok-p]#:[# [.tok-p]#\{#
[.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/executions/5"#[.tok-p]#,#
[.tok-nt]#"parentId"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"parentUrl"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"processInstanceId"#[.tok-p]#:#[.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/process-instances/5"#[.tok-p]#,#
[.tok-nt]#"suspended"#[.tok-p]#:#[.tok-kc]#false#[.tok-p]#,#
[.tok-nt]#"activityId"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"tenantId"#[.tok-p]#:#[.tok-kc]#null# [.tok-p]#},#
[.tok-p]#\{# [.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"7"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/executions/7"#[.tok-p]#,#
[.tok-nt]#"parentId"#[.tok-p]#:#[.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"parentUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/executions/5"#[.tok-p]#,#
[.tok-nt]#"processInstanceId"#[.tok-p]#:#[.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/process-instances/5"#[.tok-p]#,#
[.tok-nt]#"suspended"#[.tok-p]#:#[.tok-kc]#false#[.tok-p]#,#
[.tok-nt]#"activityId"#[.tok-p]#:#[.tok-s2]#"processTask"#[.tok-p]#,#
[.tok-nt]#"tenantId"#[.tok-p]#:#[.tok-kc]#null# [.tok-p]#}# [.tok-p]#],#
[.tok-nt]#"total"#[.tok-p]#:#[.tok-mi]#2#[.tok-p]#,#
[.tok-nt]#"start"#[.tok-p]#:#[.tok-mi]#0#[.tok-p]#,#
[.tok-nt]#"sort"#[.tok-p]#:#[.tok-s2]#"processInstanceId"#[.tok-p]#,#
[.tok-nt]#"order"#[.tok-p]#:#[.tok-s2]#"asc"#[.tok-p]#,#
[.tok-nt]#"size"#[.tok-p]#:#[.tok-mi]#2# [.tok-p]#}#

[[_query_executions]]
== 13.6.5. Query executions

....
POST query/executions
....

*Request body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
----

[.tok-p]#\{#
[.tok-nt]#"processDefinitionKey"#[.tok-p]#:#[.tok-s2]#"oneTaskProcess"#[.tok-p]#,#
[.tok-nt]#"variables"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"name"# [.tok-p]#:# [.tok-s2]#"myVariable"#[.tok-p]#,#
[.tok-nt]#"value"# [.tok-p]#:# [.tok-mi]#1234#[.tok-p]#,#
[.tok-nt]#"operation"# [.tok-p]#:# [.tok-s2]#"equals"#[.tok-p]#,#
[.tok-nt]#"type"# [.tok-p]#:# [.tok-s2]#"long"# [.tok-p]#}# [.tok-p]#],#
[.tok-nt]#"processInstanceVariables"#[.tok-p]#:# [.tok-p]#[#
[.tok-p]#\{# [.tok-nt]#"name"# [.tok-p]#:#
[.tok-s2]#"processVariable"#[.tok-p]#,# [.tok-nt]#"value"# [.tok-p]#:#
[.tok-s2]#"some string"#[.tok-p]#,# [.tok-nt]#"operation"# [.tok-p]#:#
[.tok-s2]#"equals"#[.tok-p]#,# [.tok-nt]#"type"# [.tok-p]#:#
[.tok-s2]#"string"# [.tok-p]#}# [.tok-p]#]# [.tok-p]#}#

The request body can contain all possible filters that can be used in
the link:#restExecutionsGet[List executions] URL query. On top of these,
it’s possible to provide an array of `variables` and
`processInstanceVariables` to include in the query, with their format
link:#restQueryVariable[described here].

The general link:#restPagingAndSort[paging and sorting query-parameters]
can be used for this URL.

.Table 96. Query executions - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates request was successful and the executions are returned

|400 |Indicates a parameter was passed in the wrong format . The
status-message contains additional information.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
----

[.tok-p]#\{# [.tok-nt]#"data"#[.tok-p]#:[# [.tok-p]#\{#
[.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/executions/5"#[.tok-p]#,#
[.tok-nt]#"parentId"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"parentUrl"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"processInstanceId"#[.tok-p]#:#[.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/process-instances/5"#[.tok-p]#,#
[.tok-nt]#"suspended"#[.tok-p]#:#[.tok-kc]#false#[.tok-p]#,#
[.tok-nt]#"activityId"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"tenantId"#[.tok-p]#:#[.tok-kc]#null# [.tok-p]#},#
[.tok-p]#\{# [.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"7"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/executions/7"#[.tok-p]#,#
[.tok-nt]#"parentId"#[.tok-p]#:#[.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"parentUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/executions/5"#[.tok-p]#,#
[.tok-nt]#"processInstanceId"#[.tok-p]#:#[.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/process-instances/5"#[.tok-p]#,#
[.tok-nt]#"suspended"#[.tok-p]#:#[.tok-kc]#false#[.tok-p]#,#
[.tok-nt]#"activityId"#[.tok-p]#:#[.tok-s2]#"processTask"#[.tok-p]#,#
[.tok-nt]#"tenantId"#[.tok-p]#:#[.tok-kc]#null# [.tok-p]#}# [.tok-p]#],#
[.tok-nt]#"total"#[.tok-p]#:#[.tok-mi]#2#[.tok-p]#,#
[.tok-nt]#"start"#[.tok-p]#:#[.tok-mi]#0#[.tok-p]#,#
[.tok-nt]#"sort"#[.tok-p]#:#[.tok-s2]#"processInstanceId"#[.tok-p]#,#
[.tok-nt]#"order"#[.tok-p]#:#[.tok-s2]#"asc"#[.tok-p]#,#
[.tok-nt]#"size"#[.tok-p]#:#[.tok-mi]#2# [.tok-p]#}#

[[_list_of_variables_for_an_execution]]
== 13.6.6. List of variables for an execution

....
GET runtime/executions/{executionId}/variables?scope={scope}
....

.Table 97. List of variables for an execution - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|executionId |Yes |String |The id of the execution to the variables for.

|scope |No |String |Either `local` or `global`. If omitted, both local
and global scoped variables are returned.
|===

.Table 98. List of variables for an execution - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the execution was found and variables are returned.
|404 |Indicates the requested execution was not found.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
----

[.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"intProcVar"#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"integer"#[.tok-p]#,#
[.tok-nt]#"value"#[.tok-p]#:#[.tok-mi]#123#[.tok-p]#,#
[.tok-nt]#"scope"#[.tok-p]#:#[.tok-s2]#"global"# [.tok-p]#},#
[.tok-p]#\{#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"byteArrayProcVar"#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"binary"#[.tok-p]#,#
[.tok-nt]#"value"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"valueUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/process-instances/5/variables/byteArrayProcVar/data"#[.tok-p]#,#
[.tok-nt]#"scope"#[.tok-p]#:#[.tok-s2]#"local"# [.tok-p]#}# [.tok-p]#]#

In case the variable is a binary variable or serializable, the
`valueUrl` points to an URL to fetch the raw value. If it’s a plain
variable, the value is present in the response.

[[_get_a_variable_for_an_execution]]
== 13.6.7. Get a variable for an execution

....
GET runtime/executions/{executionId}/variables/{variableName}?scope={scope}
....

.Table 99. Get a variable for an execution - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|executionId |Yes |String |The id of the execution to the variables for.

|variableName |Yes |String |Name of the variable to get.

|scope |No |String |Either `local` or `global`. If omitted, local
variable is returned (if exists). If not, a global variable is returned
(if exists).
|===

.Table 100. Get a variable for an execution - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates both the execution and variable were found and variable
is returned.

|400 |Indicates the request body is incomplete or contains illegal
values. The status description contains additional information about the
error.

|404 |Indicates the requested execution was not found or the execution
does not have a variable with the given name in the requested scope (in
case scope-query parameter was omitted, variable doesn’t exist in local
and global scope). Status description contains additional information
about the error.
|===

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-p]#\{#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"intProcVar"#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"integer"#[.tok-p]#,#
[.tok-nt]#"value"#[.tok-p]#:#[.tok-mi]#123#[.tok-p]#,#
[.tok-nt]#"scope"#[.tok-p]#:#[.tok-s2]#"local"# [.tok-p]#}#

In case the variable is a binary variable or serializable, the
`valueUrl` points to an URL to fetch the raw value. If it’s a plain
variable, the value is present in the response.

[[_create_or_update_variables_on_an_execution]]
== 13.6.8. Create (or update) variables on an execution

....
POST runtime/executions/{executionId}/variables
....

....
PUT runtime/executions/{executionId}/variables
....

When using `POST`, all variables that are passed are created. In case
one of the variables already exists on the execution in the requested
scope, the request results in an error (409 - CONFLICT). When `PUT` is
used, nonexistent variables are created on the execution and existing
ones are overridden without any error.

.Table 101. Create (or update) variables on an execution - URL
parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|executionId |Yes |String |The id of the execution to the variables for.
|===

*Request body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
----

[.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"intProcVar"#
[.tok-s2]#"type"#[.tok-p]#:#[.tok-s2]#"integer"#
[.tok-s2]#"value"#[.tok-p]#:#[.tok-mi]#123#[.tok-p]#,#
[.tok-nt]#"scope"#[.tok-p]#:#[.tok-s2]#"local"# [.tok-p]#}# [.tok-p]#]#

*Note that you can only provide variables that have the same scope. If
the request-body array contains variables from mixed scopes, the request
results in an error (400 - BAD REQUEST).*Any number of variables can be
passed into the request body array. More information about the variable
format can be found in link:#restVariables[the REST variables section].
Note that scope is ignored, only `local` variables can be set in a
process instance.

.Table 102. Create (or update) variables on an execution - Response
codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|201 |Indicates the execution was found and variable is created.

|400 |Indicates the request body is incomplete or contains illegal
values. The status description contains additional information about the
error.

|404 |Indicates the requested execution was not found.

|409 |Indicates the execution was found but already contains a variable
with the given name (only thrown when POST method is used). Use the
update-method instead.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
----

[.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"intProcVar"#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"integer"#[.tok-p]#,#
[.tok-nt]#"value"#[.tok-p]#:#[.tok-mi]#123#[.tok-p]#,#
[.tok-nt]#"scope"#[.tok-p]#:#[.tok-s2]#"local"# [.tok-p]#}# [.tok-p]#]#

[[_update_a_variable_on_an_execution]]
== 13.6.9. Update a variable on an execution

....
PUT runtime/executions/{executionId}/variables/{variableName}
....

.Table 103. Update a variable on an execution - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|executionId |Yes |String |The id of the execution to update the
variables for.

|variableName |Yes |String |Name of the variable to update.
|===

*Request body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-p]#\{# [.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"intProcVar"#
[.tok-s2]#"type"#[.tok-p]#:#[.tok-s2]#"integer"#
[.tok-s2]#"value"#[.tok-p]#:#[.tok-mi]#123#[.tok-p]#,#
[.tok-nt]#"scope"#[.tok-p]#:#[.tok-s2]#"global"# [.tok-p]#}#

More information about the variable format can be found in
link:#restVariables[the REST variables section].

.Table 104. Update a variable on an execution - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates both the process instance and variable were found and
variable is updated.

|404 |Indicates the requested process instance was not found or the
process instance does not have a variable with the given name. Status
description contains additional information about the error.
|===

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-p]#\{#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"intProcVar"#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"integer"#[.tok-p]#,#
[.tok-nt]#"value"#[.tok-p]#:#[.tok-mi]#123#[.tok-p]#,#
[.tok-nt]#"scope"#[.tok-p]#:#[.tok-s2]#"global"# [.tok-p]#}#

In case the variable is a binary variable or serializable, the
`valueUrl` points to an URL to fetch the raw value. If it’s a plain
variable, the value is present in the response.

[[_create_a_new_binary_variable_on_an_execution]]
== 13.6.10. Create a new binary variable on an execution

....
POST runtime/executions/{executionId}/variables
....

.Table 105. Create a new binary variable on an execution - URL
parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|executionId |Yes |String |The id of the execution to create the new
variable for.
|===

*Request body:*

The request should be of type `multipart/form-data`. There should be a
single file-part included with the binary value of the variable. On top
of that, the following additional form-fields can be present:

* `name`: Required name of the variable.
* `type`: Type of variable that is created. If omitted, `binary` is
assumed and the binary data in the request will be stored as an array of
bytes.
* `scope`: Scope of variable that is created. If omitted, `local` is
assumed.

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-p]#\{# [.tok-nt]#"name"# [.tok-p]#:#
[.tok-s2]#"binaryVariable"#[.tok-p]#,# [.tok-nt]#"scope"# [.tok-p]#:#
[.tok-s2]#"local"#[.tok-p]#,# [.tok-nt]#"type"# [.tok-p]#:#
[.tok-s2]#"binary"#[.tok-p]#,# [.tok-nt]#"value"# [.tok-p]#:#
[.tok-kc]#null#[.tok-p]#,# [.tok-nt]#"valueUrl"# [.tok-p]#:#
[.tok-s2]#"http://.../runtime/executions/123/variables/binaryVariable/data"#
[.tok-p]#}#

.Table 106. Create a new binary variable on an execution - Response
codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|201 |Indicates the variable was created and the result is returned.

|400 |Indicates the name of the variable to create was missing. Status
message provides additional information.

|404 |Indicates the requested execution was not found.

|409 |Indicates the execution already has a variable with the given
name. Use the PUT method to update the task variable instead.

|415 |Indicates the serializable data contains an object for which no
class is present in the JVM running the Activiti engine and therefore
cannot be deserialized.
|===

[[_update_an_existing_binary_variable_on_a_process_instance_2]]
== 13.6.11. Update an existing binary variable on a process-instance

....
PUT runtime/executions/{executionId}/variables/{variableName}
....

.Table 107. Update an existing binary variable on a process-instance -
URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|executionId |Yes |String |The id of the execution to create the new
variable for.

|variableName |Yes |String |The name of the variable to update.
|===

*Request body:* The request should be of type `multipart/form-data`.
There should be a single file-part included with the binary value of the
variable. On top of that, the following additional form-fields can be
present:

* `name`: Required name of the variable.
* `type`: Type of variable that is created. If omitted, `binary` is
assumed and the binary data in the request will be stored as an array of
bytes.
* `scope`: Scope of variable that is created. If omitted, `local` is
assumed.

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-p]#\{# [.tok-nt]#"name"# [.tok-p]#:#
[.tok-s2]#"binaryVariable"#[.tok-p]#,# [.tok-nt]#"scope"# [.tok-p]#:#
[.tok-s2]#"local"#[.tok-p]#,# [.tok-nt]#"type"# [.tok-p]#:#
[.tok-s2]#"binary"#[.tok-p]#,# [.tok-nt]#"value"# [.tok-p]#:#
[.tok-kc]#null#[.tok-p]#,# [.tok-nt]#"valueUrl"# [.tok-p]#:#
[.tok-s2]#"http://.../runtime/executions/123/variables/binaryVariable/data"#
[.tok-p]#}#

.Table 108. Update an existing binary variable on a process-instance -
Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the variable was updated and the result is returned.

|400 |Indicates the name of the variable to update was missing. Status
message provides additional information.

|404 |Indicates the requested execution was not found or the execution
does not have a variable with the given name.

|415 |Indicates the serializable data contains an object for which no
class is present in the JVM running the Activiti engine and therefore
cannot be deserialized.
|===

[[_tasks]]
== 13.7. Tasks

[[_get_a_task]]
=== 13.7.1. Get a task

....
GET runtime/tasks/{taskId}
....

.Table 109. Get a task - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task to get.
|===

.Table 110. Get a task - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the task was found and returned.
|404 |Indicates the requested task was not found.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
----

[.tok-p]#\{# [.tok-nt]#"assignee"# [.tok-p]#:#
[.tok-s2]#"kermit"#[.tok-p]#,# [.tok-nt]#"createTime"# [.tok-p]#:#
[.tok-s2]#"2013-04-17T10:17:43.902+0000"#[.tok-p]#,#
[.tok-nt]#"delegationState"# [.tok-p]#:# [.tok-s2]#"pending"#[.tok-p]#,#
[.tok-nt]#"description"# [.tok-p]#:# [.tok-s2]#"Task
description"#[.tok-p]#,# [.tok-nt]#"dueDate"# [.tok-p]#:#
[.tok-s2]#"2013-04-17T10:17:43.902+0000"#[.tok-p]#,#
[.tok-nt]#"execution"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/runtime/executions/5"#[.tok-p]#,#
[.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"8"#[.tok-p]#,# [.tok-nt]#"name"#
[.tok-p]#:# [.tok-s2]#"My task"#[.tok-p]#,# [.tok-nt]#"owner"#
[.tok-p]#:# [.tok-s2]#"owner"#[.tok-p]#,# [.tok-nt]#"parentTask"#
[.tok-p]#:#
[.tok-s2]#"http://localhost:8182/runtime/tasks/9"#[.tok-p]#,#
[.tok-nt]#"priority"# [.tok-p]#:# [.tok-mi]#50#[.tok-p]#,#
[.tok-nt]#"processDefinition"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"processInstance"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/runtime/process-instances/5"#[.tok-p]#,#
[.tok-nt]#"suspended"# [.tok-p]#:# [.tok-kc]#false#[.tok-p]#,#
[.tok-nt]#"taskDefinitionKey"# [.tok-p]#:#
[.tok-s2]#"theTask"#[.tok-p]#,# [.tok-nt]#"url"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/runtime/tasks/8"#[.tok-p]#,#
[.tok-nt]#"tenantId"# [.tok-p]#:# [.tok-kc]#null# [.tok-p]#}#

* `delegationState`: Delegation-state of the task, can be `null`,
`"pending"` or `"resolved".`

[[restTasksGet]]
== 13.7.2. List of tasks

....
GET runtime/tasks
....

.Table 111. List of tasks - URL query parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|name |No |String |Only return tasks with the given name.

|nameLike |No |String |Only return tasks with a name like the given
name.

|description |No |String |Only return tasks with the given description.

|priority |No |Integer |Only return tasks with the given priority.

|minimumPriority |No |Integer |Only return tasks with a priority greater
than the given value.

|maximumPriority |No |Integer |Only return tasks with a priority lower
than the given value.

|assignee |No |String |Only return tasks assigned to the given user.

|assigneeLike |No |String |Only return tasks assigned with an assignee
like the given value.

|owner |No |String |Only return tasks owned by the given user.

|ownerLike |No |String |Only return tasks assigned with an owner like
the given value.

|unassigned |No |Boolean |Only return tasks that are not assigned to
anyone. If `false` is passed, the value is ignored.

|delegationState |No |String |Only return tasks that have the given
delegation state. Possible values are `pending` and `resolved`.

|candidateUser |No |String |Only return tasks that can be claimed by the
given user. This includes both tasks where the user is an explicit
candidate for and task that are claimable by a group that the user is a
member of.

|candidateGroup |No |String |Only return tasks that can be claimed by a
user in the given group.

|candidateGroups |No |String |Only return tasks that can be claimed by a
user in the given groups. Values split by comma.

|involvedUser |No |String |Only return tasks in which the given user is
involved.

|taskDefinitionKey |No |String |Only return tasks with the given task
definition id.

|taskDefinitionKeyLike |No |String |Only return tasks with a given task
definition id like the given value.

|processInstanceId |No |String |Only return tasks which are part of the
process instance with the given id.

|processInstanceBusinessKey |No |String |Only return tasks which are
part of the process instance with the given business key.

|processInstanceBusinessKeyLike |No |String |Only return tasks which are
part of the process instance which has a business key like the given
value.

|processDefinitionId |No |String |Only return tasks which are part of a
process instance which has a process definition with the given id.

|processDefinitionKey |No |String |Only return tasks which are part of a
process instance which has a process definition with the given key.

|processDefinitionKeyLike |No |String |Only return tasks which are part
of a process instance which has a process definition with a key like the
given value.

|processDefinitionName |No |String |Only return tasks which are part of
a process instance which has a process definition with the given name.

|processDefinitionNameLike |No |String |Only return tasks which are part
of a process instance which has a process definition with a name like
the given value.

|executionId |No |String |Only return tasks which are part of the
execution with the given id.

|createdOn |No |ISO Date |Only return tasks which are created on the
given date.

|createdBefore |No |ISO Date |Only return tasks which are created before
the given date.

|createdAfter |No |ISO Date |Only return tasks which are created after
the given date.

|dueOn |No |ISO Date |Only return tasks which are due on the given date.

|dueBefore |No |ISO Date |Only return tasks which are due before the
given date.

|dueAfter |No |ISO Date |Only return tasks which are due after the given
date.

|withoutDueDate |No |boolean |Only return tasks which don’t have a due
date. The property is ignored if the value is `false`.

|withoutDueDate |No |boolean |Only return tasks which don’t have a due
date. The property is ignored if the value is `false`.

|withoutDueDate |No |boolean |Only return tasks which don’t have a due
date. The property is ignored if the value is `false`.

|excludeSubTasks |No |Boolean |Only return tasks that are not a subtask
of another task.

|active |No |Boolean |If `true`, only return tasks that are not
suspended (either part of a process that is not suspended or not part of
a process at all). If false, only tasks that are part of suspended
process instances are returned.

|includeTaskLocalVariables |No |Boolean |Indication to include task
local variables in the result.

|includeProcessVariables |No |Boolean |Indication to include process
variables in the result.

|tenantId |No |String |Only return tasks with the given tenantId.

|tenantIdLike |No |String |Only return tasks with a tenantId like the
given value.

|withoutTenantId |No |Boolean |If `true`, only returns tasks without a
tenantId set. If `false`, the `withoutTenantId` parameter is ignored.

|candidateOrAssigned |No |String |Select tasks that has been claimed or
assigned to user or waiting to claim by user (candidate user or groups).

|category |No |string |Select tasks with the given category. Note that
this is the task category, not the category of the process definition
(namespace within the BPMN Xml).
|===

.Table 112. List of tasks - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates request was successful and the tasks are returned

|400 |Indicates a parameter was passed in the wrong format or that
_delegationState_ has an invalid value (other than _pending_ and
_resolved_). The status-message contains additional information.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
----

[.tok-p]#\{# [.tok-nt]#"data"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"assignee"# [.tok-p]#:# [.tok-s2]#"kermit"#[.tok-p]#,#
[.tok-nt]#"createTime"# [.tok-p]#:#
[.tok-s2]#"2013-04-17T10:17:43.902+0000"#[.tok-p]#,#
[.tok-nt]#"delegationState"# [.tok-p]#:# [.tok-s2]#"pending"#[.tok-p]#,#
[.tok-nt]#"description"# [.tok-p]#:# [.tok-s2]#"Task
description"#[.tok-p]#,# [.tok-nt]#"dueDate"# [.tok-p]#:#
[.tok-s2]#"2013-04-17T10:17:43.902+0000"#[.tok-p]#,#
[.tok-nt]#"execution"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/runtime/executions/5"#[.tok-p]#,#
[.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"8"#[.tok-p]#,# [.tok-nt]#"name"#
[.tok-p]#:# [.tok-s2]#"My task"#[.tok-p]#,# [.tok-nt]#"owner"#
[.tok-p]#:# [.tok-s2]#"owner"#[.tok-p]#,# [.tok-nt]#"parentTask"#
[.tok-p]#:#
[.tok-s2]#"http://localhost:8182/runtime/tasks/9"#[.tok-p]#,#
[.tok-nt]#"priority"# [.tok-p]#:# [.tok-mi]#50#[.tok-p]#,#
[.tok-nt]#"processDefinition"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"processInstance"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/runtime/process-instances/5"#[.tok-p]#,#
[.tok-nt]#"suspended"# [.tok-p]#:# [.tok-kc]#false#[.tok-p]#,#
[.tok-nt]#"taskDefinitionKey"# [.tok-p]#:#
[.tok-s2]#"theTask"#[.tok-p]#,# [.tok-nt]#"url"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/runtime/tasks/8"#[.tok-p]#,#
[.tok-nt]#"tenantId"# [.tok-p]#:# [.tok-kc]#null# [.tok-p]#}#
[.tok-p]#],# [.tok-nt]#"total"#[.tok-p]#:# [.tok-mi]#1#[.tok-p]#,#
[.tok-nt]#"start"#[.tok-p]#:# [.tok-mi]#0#[.tok-p]#,#
[.tok-nt]#"sort"#[.tok-p]#:# [.tok-s2]#"name"#[.tok-p]#,#
[.tok-nt]#"order"#[.tok-p]#:# [.tok-s2]#"asc"#[.tok-p]#,#
[.tok-nt]#"size"#[.tok-p]#:# [.tok-mi]#1# [.tok-p]#}#

[[_query_for_tasks]]
== 13.7.3. Query for tasks

....
POST query/tasks
....

*Request body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
----

[.tok-p]#\{# [.tok-nt]#"name"# [.tok-p]#:# [.tok-s2]#"My
task"#[.tok-p]#,# [.tok-nt]#"description"# [.tok-p]#:# [.tok-s2]#"The
task description"#[.tok-p]#,# [.tok-err]#...# [.tok-nt]#"taskVariables"#
[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{# [.tok-nt]#"name"# [.tok-p]#:#
[.tok-s2]#"myVariable"#[.tok-p]#,# [.tok-nt]#"value"# [.tok-p]#:#
[.tok-mi]#1234#[.tok-p]#,# [.tok-nt]#"operation"# [.tok-p]#:#
[.tok-s2]#"equals"#[.tok-p]#,# [.tok-nt]#"type"# [.tok-p]#:#
[.tok-s2]#"long"# [.tok-p]#}# [.tok-p]#],#
[.tok-nt]#"processInstanceVariables"# [.tok-p]#:# [.tok-p]#[#
[.tok-p]#\{# [.tok-err]#...# [.tok-p]#}# [.tok-p]#]# [.tok-err]#]#
[.tok-p]#}#

All supported JSON parameter fields allowed are exactly the same as the
parameters found for link:#restTasksGet[getting a collection of tasks]
(except for candidateGroupIn which is only available in this POST task
query REST service), but passed in as JSON-body arguments rather than
URL-parameters to allow for more advanced querying and preventing errors
with request-uri’s that are too long. On top of that, the query allows
for filtering based on task and process variables. The `taskVariables`
and `processInstanceVariables` are both JSON-arrays containing objects
with the format link:#restQueryVariable[as described here.]

.Table 113. Query for tasks - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates request was successful and the tasks are returned

|400 |Indicates a parameter was passed in the wrong format or that
_delegationState_ has an invalid value (other than _pending_ and
_resolved_). The status-message contains additional information.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
----

[.tok-p]#\{# [.tok-nt]#"data"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"assignee"# [.tok-p]#:# [.tok-s2]#"kermit"#[.tok-p]#,#
[.tok-nt]#"createTime"# [.tok-p]#:#
[.tok-s2]#"2013-04-17T10:17:43.902+0000"#[.tok-p]#,#
[.tok-nt]#"delegationState"# [.tok-p]#:# [.tok-s2]#"pending"#[.tok-p]#,#
[.tok-nt]#"description"# [.tok-p]#:# [.tok-s2]#"Task
description"#[.tok-p]#,# [.tok-nt]#"dueDate"# [.tok-p]#:#
[.tok-s2]#"2013-04-17T10:17:43.902+0000"#[.tok-p]#,#
[.tok-nt]#"execution"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/runtime/executions/5"#[.tok-p]#,#
[.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"8"#[.tok-p]#,# [.tok-nt]#"name"#
[.tok-p]#:# [.tok-s2]#"My task"#[.tok-p]#,# [.tok-nt]#"owner"#
[.tok-p]#:# [.tok-s2]#"owner"#[.tok-p]#,# [.tok-nt]#"parentTask"#
[.tok-p]#:#
[.tok-s2]#"http://localhost:8182/runtime/tasks/9"#[.tok-p]#,#
[.tok-nt]#"priority"# [.tok-p]#:# [.tok-mi]#50#[.tok-p]#,#
[.tok-nt]#"processDefinition"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"processInstance"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/runtime/process-instances/5"#[.tok-p]#,#
[.tok-nt]#"suspended"# [.tok-p]#:# [.tok-kc]#false#[.tok-p]#,#
[.tok-nt]#"taskDefinitionKey"# [.tok-p]#:#
[.tok-s2]#"theTask"#[.tok-p]#,# [.tok-nt]#"url"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/runtime/tasks/8"#[.tok-p]#,#
[.tok-nt]#"tenantId"# [.tok-p]#:# [.tok-kc]#null# [.tok-p]#}#
[.tok-p]#],# [.tok-nt]#"total"#[.tok-p]#:# [.tok-mi]#1#[.tok-p]#,#
[.tok-nt]#"start"#[.tok-p]#:# [.tok-mi]#0#[.tok-p]#,#
[.tok-nt]#"sort"#[.tok-p]#:# [.tok-s2]#"name"#[.tok-p]#,#
[.tok-nt]#"order"#[.tok-p]#:# [.tok-s2]#"asc"#[.tok-p]#,#
[.tok-nt]#"size"#[.tok-p]#:# [.tok-mi]#1# [.tok-p]#}#

[[_update_a_task]]
== 13.7.4. Update a task

....
PUT runtime/tasks/{taskId}
....

*Body JSON:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
----

[.tok-p]#\{# [.tok-nt]#"assignee"# [.tok-p]#:#
[.tok-s2]#"assignee"#[.tok-p]#,# [.tok-nt]#"delegationState"#
[.tok-p]#:# [.tok-s2]#"resolved"#[.tok-p]#,# [.tok-nt]#"description"#
[.tok-p]#:# [.tok-s2]#"New task description"#[.tok-p]#,#
[.tok-nt]#"dueDate"# [.tok-p]#:#
[.tok-s2]#"2013-04-17T13:06:02.438+02:00"#[.tok-p]#,# [.tok-nt]#"name"#
[.tok-p]#:# [.tok-s2]#"New task name"#[.tok-p]#,# [.tok-nt]#"owner"#
[.tok-p]#:# [.tok-s2]#"owner"#[.tok-p]#,# [.tok-nt]#"parentTaskId"#
[.tok-p]#:# [.tok-s2]#"3"#[.tok-p]#,# [.tok-nt]#"priority"# [.tok-p]#:#
[.tok-mi]#20# [.tok-p]#}#

All request values are optional. For example, you can only include the
_assignee_ attribute in the request body JSON-object, only updating the
assignee of the task, leaving all other fields unaffected. When an
attribute is explicitly included and is set to null, the task-value will
be updated to null. Example: `{"dueDate" : null}` will clear the duedate
of the task).

.Table 114. Update a task - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the task was updated.
|404 |Indicates the requested task was not found.
|409 |Indicates the requested task was updated simultaneously.
|===

*Success response body:* see response for `runtime/tasks/{taskId}`.

[[_task_actions]]
== 13.7.5. Task actions

....
POST runtime/tasks/{taskId}
....

*Complete a task - Body JSON:*

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-p]#\{# [.tok-nt]#"action"# [.tok-p]#:#
[.tok-s2]#"complete"#[.tok-p]#,# [.tok-nt]#"variables"# [.tok-p]#:#
[.tok-p]#[]# [.tok-p]#}#

Completes the task. Optional variable array can be passed in using the
`variables` property. More information about the variable format can be
found in link:#restVariables[the REST variables section]. Note that the
variable-scope that is supplied is ignored and the variables are set on
the parent-scope unless a variable exists in a local scope, which is
overridden in this case. This is the same behavior as the
`TaskService.completeTask(taskId, variables)` invocation.

Note that also a _transientVariables_ property is accepted as part of
this json, that follows the same structure as the _variables_ property.

*Claim a task - Body JSON:*

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-p]#\{# [.tok-nt]#"action"# [.tok-p]#:#
[.tok-s2]#"claim"#[.tok-p]#,# [.tok-nt]#"assignee"# [.tok-p]#:#
[.tok-s2]#"userWhoClaims"# [.tok-p]#}#

Claims the task by the given assignee. If the assignee is `null`, the
task is assigned to no-one, claimable again.

*Delegate a task - Body JSON:*

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-p]#\{# [.tok-nt]#"action"# [.tok-p]#:#
[.tok-s2]#"delegate"#[.tok-p]#,# [.tok-nt]#"assignee"# [.tok-p]#:#
[.tok-s2]#"userToDelegateTo"# [.tok-p]#}#

Delegates the task to the given assignee. The assignee is required.

*Resolve a task - Body JSON:*

[source,pygments,highlight]
----
1
2
3
----

[.tok-p]#\{# [.tok-nt]#"action"# [.tok-p]#:# [.tok-s2]#"resolve"#
[.tok-p]#}#

Resolves the task delegation. The task is assigned back to the task
owner (if any).

.Table 115. Task actions - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the action was executed.

|400 |When the body contains an invalid value or when the assignee is
missing when the action requires it.

|404 |Indicates the requested task was not found.

|409 |Indicates the action cannot be performed due to a conflict. Either
the task was updates simultaneously or the task was claimed by another
user, in case of the _`claim`_ action.
|===

*Success response body:* see response for `runtime/tasks/{taskId}`.

[[_delete_a_task]]
== 13.7.6. Delete a task

....
DELETE runtime/tasks/{taskId}?cascadeHistory={cascadeHistory}&deleteReason={deleteReason}
....

.Table 116. >Delete a task - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task to delete.

|cascadeHistory |False |Boolean |Whether or not to delete the
HistoricTask instance when deleting the task (if applicable). If not
provided, this value defaults to false.

|deleteReason |False |String |Reason why the task is deleted. This value
is ignored when `cascadeHistory` is true.
|===

.Table 117. >Delete a task - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|204 |Indicates the task was found and has been deleted. Response-body
is intentionally empty.

|403 |Indicates the requested task cannot be deleted because it’s part
of a workflow.

|404 |Indicates the requested task was not found.
|===

[[_get_all_variables_for_a_task]]
== 13.7.7. Get all variables for a task

....
GET runtime/tasks/{taskId}/variables?scope={scope}
....

.Table 118. Get all variables for a task - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task to get variables for.

|scope |False |String |Scope of variables to be returned. When
_`local`_, only task-local variables are returned. When _`global`_, only
variables from the task’s parent execution-hierarchy are returned. When
the parameter is omitted, both local and global variables are returned.
|===

.Table 119. Get all variables for a task - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the task was found and the requested variables are
returned.

|404 |Indicates the requested task was not found.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
----

[.tok-p]#[# [.tok-p]#\{# [.tok-nt]#"name"# [.tok-p]#:#
[.tok-s2]#"doubleTaskVar"#[.tok-p]#,# [.tok-nt]#"scope"# [.tok-p]#:#
[.tok-s2]#"local"#[.tok-p]#,# [.tok-nt]#"type"# [.tok-p]#:#
[.tok-s2]#"double"#[.tok-p]#,# [.tok-nt]#"value"# [.tok-p]#:#
[.tok-mf]#99.99# [.tok-p]#},# [.tok-p]#\{# [.tok-nt]#"name"# [.tok-p]#:#
[.tok-s2]#"stringProcVar"#[.tok-p]#,# [.tok-nt]#"scope"# [.tok-p]#:#
[.tok-s2]#"global"#[.tok-p]#,# [.tok-nt]#"type"# [.tok-p]#:#
[.tok-s2]#"string"#[.tok-p]#,# [.tok-nt]#"value"# [.tok-p]#:#
[.tok-s2]#"This is a ProcVariable"# [.tok-p]#}# [.tok-p]#]#

The variables are returned as a JSON array. Full response description
can be found in the general link:#restVariables[REST-variables section].

[[_get_a_variable_from_a_task]]
== 13.7.8. Get a variable from a task

....
GET runtime/tasks/{taskId}/variables/{variableName}?scope={scope}
....

.Table 120. Get a variable from a task - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task to get a variable for.

|variableName |Yes |String |The name of the variable to get.

|scope |False |String |Scope of variable to be returned. When _`local`_,
only task-local variable value is returned. When _`global`_, only
variable value from the task’s parent execution-hierarchy are returned.
When the parameter is omitted, a local variable will be returned if it
exists, otherwise a global variable.
|===

.Table 121. Get a variable from a task - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the task was found and the requested variables are
returned.

|404 |Indicates the requested task was not found or the task doesn’t
have a variable with the given name (in the given scope). Status message
provides additional information.
|===

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-p]#\{# [.tok-nt]#"name"# [.tok-p]#:#
[.tok-s2]#"myTaskVariable"#[.tok-p]#,# [.tok-nt]#"scope"# [.tok-p]#:#
[.tok-s2]#"local"#[.tok-p]#,# [.tok-nt]#"type"# [.tok-p]#:#
[.tok-s2]#"string"#[.tok-p]#,# [.tok-nt]#"value"# [.tok-p]#:#
[.tok-s2]#"Hello my friend"# [.tok-p]#}#

Full response body description can be found in the general
link:#restVariables[REST-variables section].

[[_get_the_binary_data_for_a_variable]]
== 13.7.9. Get the binary data for a variable

....
GET runtime/tasks/{taskId}/variables/{variableName}/data?scope={scope}
....

.Table 122. Get the binary data for a variable - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task to get a variable data for.

|variableName |Yes |String |The name of the variable to get data for.
Only variables of type `binary` and `serializable` can be used. If any
other type of variable is used, a `404` is returned.

|scope |False |String |Scope of variable to be returned. When _`local`_,
only task-local variable value is returned. When _`global`_, only
variable value from the task’s parent execution-hierarchy are returned.
When the parameter is omitted, a local variable will be returned if it
exists, otherwise a global variable.
|===

.Table 123. Get the binary data for a variable - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the task was found and the requested variables are
returned.

|404 |Indicates the requested task was not found or the task doesn’t
have a variable with the given name (in the given scope) or the variable
doesn’t have a binary stream available. Status message provides
additional information.
|===

*Success response body:*

The response body contains the binary value of the variable. When the
variable is of type `binary`, the content-type of the response is set to
`application/octet-stream`, regardless of the content of the variable or
the request accept-type header. In case of `serializable`,
`application/x-java-serialized-object` is used as content-type.

[[_create_new_variables_on_a_task]]
== 13.7.10. Create new variables on a task

....
POST runtime/tasks/{taskId}/variables
....

.Table 124. Create new variables on a task - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task to create the new variable for.
|===

*Request body for creating simple (non-binary) variables:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
----

[.tok-p]#[# [.tok-p]#\{# [.tok-nt]#"name"# [.tok-p]#:#
[.tok-s2]#"myTaskVariable"#[.tok-p]#,# [.tok-nt]#"scope"# [.tok-p]#:#
[.tok-s2]#"local"#[.tok-p]#,# [.tok-nt]#"type"# [.tok-p]#:#
[.tok-s2]#"string"#[.tok-p]#,# [.tok-nt]#"value"# [.tok-p]#:#
[.tok-s2]#"Hello my friend"# [.tok-p]#},# [.tok-p]#\{# [.tok-p]#}#
[.tok-p]#]#

The request body should be an array containing one or more JSON-objects
representing the variables that should be created.

* `name`: Required name of the variable
* `scope`: Scope of variable that is created. If omitted, `local` is
assumed.
* `type`: Type of variable that is created. If omitted, reverts to raw
JSON-value type (string, boolean, integer or double).
* `value`: Variable value.

More information about the variable format can be found in
link:#restVariables[the REST variables section].

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
----

[.tok-p]#[# [.tok-p]#\{# [.tok-nt]#"name"# [.tok-p]#:#
[.tok-s2]#"myTaskVariable"#[.tok-p]#,# [.tok-nt]#"scope"# [.tok-p]#:#
[.tok-s2]#"local"#[.tok-p]#,# [.tok-nt]#"type"# [.tok-p]#:#
[.tok-s2]#"string"#[.tok-p]#,# [.tok-nt]#"value"# [.tok-p]#:#
[.tok-s2]#"Hello my friend"# [.tok-p]#},# [.tok-p]#\{# [.tok-p]#}#
[.tok-p]#]#

.Table 125. Create new variables on a task - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|201 |Indicates the variables were created and the result is returned.

|400 |Indicates the name of a variable to create was missing or that an
attempt is done to create a variable on a standalone task (without a
process associated) with scope `global` or an empty array of variables
was included in the request or request did not contain an array of
variables. Status message provides additional information.

|404 |Indicates the requested task was not found.

|409 |Indicates the task already has a variable with the given name. Use
the PUT method to update the task variable instead.
|===

[[_create_a_new_binary_variable_on_a_task]]
== 13.7.11. Create a new binary variable on a task

....
POST runtime/tasks/{taskId}/variables
....

.Table 126. Create a new binary variable on a task - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task to create the new variable for.
|===

*Request body:*

The request should be of type `multipart/form-data`. There should be a
single file-part included with the binary value of the variable. On top
of that, the following additional form-fields can be present:

* `name`: Required name of the variable.
* `scope`: Scope of variable that is created. If omitted, `local` is
assumed.
* `type`: Type of variable that is created. If omitted, `binary` is
assumed and the binary data in the request will be stored as an array of
bytes.

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-p]#\{# [.tok-nt]#"name"# [.tok-p]#:#
[.tok-s2]#"binaryVariable"#[.tok-p]#,# [.tok-nt]#"scope"# [.tok-p]#:#
[.tok-s2]#"local"#[.tok-p]#,# [.tok-nt]#"type"# [.tok-p]#:#
[.tok-s2]#"binary"#[.tok-p]#,# [.tok-nt]#"value"# [.tok-p]#:#
[.tok-kc]#null#[.tok-p]#,# [.tok-nt]#"valueUrl"# [.tok-p]#:#
[.tok-s2]#"http://.../runtime/tasks/123/variables/binaryVariable/data"#
[.tok-p]#}#

.Table 127. Create a new binary variable on a task - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|201 |Indicates the variable was created and the result is returned.

|400 |Indicates the name of the variable to create was missing or that
an attempt is done to create a variable on a standalone task (without a
process associated) with scope `global`. Status message provides
additional information.

|404 |Indicates the requested task was not found.

|409 |Indicates the task already has a variable with the given name. Use
the PUT method to update the task variable instead.

|415 |Indicates the serializable data contains an object for which no
class is present in the JVM running the Activiti engine and therefore
cannot be deserialized.
|===

[[_update_an_existing_variable_on_a_task]]
== 13.7.12. Update an existing variable on a task

....
PUT runtime/tasks/{taskId}/variables/{variableName}
....

.Table 128. Update an existing variable on a task - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task to update the variable for.
|variableName |Yes |String |The name of the variable to update.
|===

*Request body for updating simple (non-binary) variables:*

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-p]#\{# [.tok-nt]#"name"# [.tok-p]#:#
[.tok-s2]#"myTaskVariable"#[.tok-p]#,# [.tok-nt]#"scope"# [.tok-p]#:#
[.tok-s2]#"local"#[.tok-p]#,# [.tok-nt]#"type"# [.tok-p]#:#
[.tok-s2]#"string"#[.tok-p]#,# [.tok-nt]#"value"# [.tok-p]#:#
[.tok-s2]#"Hello my friend"# [.tok-p]#}#

* `name`: Required name of the variable
* `scope`: Scope of variable that is updated. If omitted, `local` is
assumed.
* `type`: Type of variable that is updated. If omitted, reverts to raw
JSON-value type (string, boolean, integer or double).
* `value`: Variable value.

More information about the variable format can be found in
link:#restVariables[the REST variables section].

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-p]#\{# [.tok-nt]#"name"# [.tok-p]#:#
[.tok-s2]#"myTaskVariable"#[.tok-p]#,# [.tok-nt]#"scope"# [.tok-p]#:#
[.tok-s2]#"local"#[.tok-p]#,# [.tok-nt]#"type"# [.tok-p]#:#
[.tok-s2]#"string"#[.tok-p]#,# [.tok-nt]#"value"# [.tok-p]#:#
[.tok-s2]#"Hello my friend"# [.tok-p]#}#

.Table 129. Update an existing variable on a task - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the variables was updated and the result is returned.

|400 |Indicates the name of a variable to update was missing or that an
attempt is done to update a variable on a standalone task (without a
process associated) with scope `global`. Status message provides
additional information.

|404 |Indicates the requested task was not found or the task doesn’t
have a variable with the given name in the given scope. Status message
contains additional information about the error.
|===

[[_updating_a_binary_variable_on_a_task]]
== 13.7.13. Updating a binary variable on a task

....
PUT runtime/tasks/{taskId}/variables/{variableName}
....

.Table 130. Updating a binary variable on a task - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task to update the variable for.
|variableName |Yes |String |The name of the variable to update.
|===

*Request body:*

The request should be of type `multipart/form-data`. There should be a
single file-part included with the binary value of the variable. On top
of that, the following additional form-fields can be present:

* `name`: Required name of the variable.
* `scope`: Scope of variable that is updated. If omitted, `local` is
assumed.
* `type`: Type of variable that is updated. If omitted, `binary` is
assumed and the binary data in the request will be stored as an array of
bytes.

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-p]#\{# [.tok-nt]#"name"# [.tok-p]#:#
[.tok-s2]#"binaryVariable"#[.tok-p]#,# [.tok-nt]#"scope"# [.tok-p]#:#
[.tok-s2]#"local"#[.tok-p]#,# [.tok-nt]#"type"# [.tok-p]#:#
[.tok-s2]#"binary"#[.tok-p]#,# [.tok-nt]#"value"# [.tok-p]#:#
[.tok-kc]#null#[.tok-p]#,# [.tok-nt]#"valueUrl"# [.tok-p]#:#
[.tok-s2]#"http://.../runtime/tasks/123/variables/binaryVariable/data"#
[.tok-p]#}#

.Table 131. Updating a binary variable on a task - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the variable was updated and the result is returned.

|400 |Indicates the name of the variable to update was missing or that
an attempt is done to update a variable on a standalone task (without a
process associated) with scope `global`. Status message provides
additional information.

|404 |Indicates the requested task was not found or the variable to
update doesn’t exist for the given task in the given scope.

|415 |Indicates the serializable data contains an object for which no
class is present in the JVM running the Activiti engine and therefore
cannot be deserialized.
|===

[[_delete_a_variable_on_a_task]]
== 13.7.14. Delete a variable on a task

....
DELETE runtime/tasks/{taskId}/variables/{variableName}?scope={scope}
....

.Table 132. Delete a variable on a task - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task the variable to delete belongs
to.

|variableName |Yes |String |The name of the variable to delete.

|scope |No |String |Scope of variable to delete in. Can be either
`local` or `global`. If omitted, `local` is assumed.
|===

.Table 133. Delete a variable on a task - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|204 |Indicates the task variable was found and has been deleted.
Response-body is intentionally empty.

|404 |Indicates the requested task was not found or the task doesn’t
have a variable with the given name. Status message contains additional
information about the error.
|===

[[_delete_all_local_variables_on_a_task]]
== 13.7.15. Delete all local variables on a task

....
DELETE runtime/tasks/{taskId}/variables
....

.Table 134. Delete all local variables on a task - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task the variable to delete belongs
to.
|===

.Table 135. Delete all local variables on a task - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|204 |Indicates all local task variables have been deleted.
Response-body is intentionally empty.

|404 |Indicates the requested task was not found.
|===

[[_get_all_identity_links_for_a_task]]
== 13.7.16. Get all identity links for a task

....
GET runtime/tasks/{taskId}/identitylinks
....

.Table 136. Get all identity links for a task - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task to get the identity links for.
|===

.Table 137. Get all identity links for a task - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the task was found and the requested identity links are
returned.

|404 |Indicates the requested task was not found.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
----

[.tok-p]#[# [.tok-p]#\{# [.tok-nt]#"userId"# [.tok-p]#:#
[.tok-s2]#"kermit"#[.tok-p]#,# [.tok-nt]#"groupId"# [.tok-p]#:#
[.tok-kc]#null#[.tok-p]#,# [.tok-nt]#"type"# [.tok-p]#:#
[.tok-s2]#"candidate"#[.tok-p]#,# [.tok-nt]#"url"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8081/activiti-rest/service/runtime/tasks/100/identitylinks/users/kermit/candidate"#
[.tok-p]#},# [.tok-p]#\{# [.tok-nt]#"userId"# [.tok-p]#:#
[.tok-kc]#null#[.tok-p]#,# [.tok-nt]#"groupId"# [.tok-p]#:#
[.tok-s2]#"sales"#[.tok-p]#,# [.tok-nt]#"type"# [.tok-p]#:#
[.tok-s2]#"candidate"#[.tok-p]#,# [.tok-nt]#"url"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8081/activiti-rest/service/runtime/tasks/100/identitylinks/groups/sales/candidate"#
[.tok-p]#},# [.tok-err]#...# [.tok-p]#]#

[[_get_all_identitylinks_for_a_task_for_either_groups_or_users]]
== 13.7.17. Get all identitylinks for a task for either groups or users

....
GET runtime/tasks/{taskId}/identitylinks/users
GET runtime/tasks/{taskId}/identitylinks/groups
....

Returns only identity links targetting either users or groups. Response
body and status-codes are exactly the same as when getting the full list
of identity links for a task.

[[_get_a_single_identity_link_on_a_task]]
== 13.7.18. Get a single identity link on a task

....
GET runtime/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}
....

.Table 138. Get all identitylinks for a task for either groups or users
- URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task .

|family |Yes |String |Either `groups` or `users`, depending on what kind
of identity is targeted.

|identityId |Yes |String |The id of the identity.

|type |Yes |String |The type of identity link.
|===

.Table 139. Get all identitylinks for a task for either groups or users
- Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the task and identity link was found and returned.

|404 |Indicates the requested task was not found or the task doesn’t
have the requested identityLink. The status contains additional
information about this error.
|===

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-p]#\{# [.tok-nt]#"userId"# [.tok-p]#:# [.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"groupId"# [.tok-p]#:# [.tok-s2]#"sales"#[.tok-p]#,#
[.tok-nt]#"type"# [.tok-p]#:# [.tok-s2]#"candidate"#[.tok-p]#,#
[.tok-nt]#"url"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8081/activiti-rest/service/runtime/tasks/100/identitylinks/groups/sales/candidate"#
[.tok-p]#}#

[[_create_an_identity_link_on_a_task]]
== 13.7.19. Create an identity link on a task

....
POST runtime/tasks/{taskId}/identitylinks
....

.Table 140. Create an identity link on a task - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task .
|===

*Request body (user):*

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-p]#\{# [.tok-nt]#"userId"# [.tok-p]#:#
[.tok-s2]#"kermit"#[.tok-p]#,# [.tok-nt]#"type"# [.tok-p]#:#
[.tok-s2]#"candidate"#[.tok-p]#,# [.tok-p]#}#

*Request body (group):*

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-p]#\{# [.tok-nt]#"groupId"# [.tok-p]#:#
[.tok-s2]#"sales"#[.tok-p]#,# [.tok-nt]#"type"# [.tok-p]#:#
[.tok-s2]#"candidate"#[.tok-p]#,# [.tok-p]#}#

.Table 141. Create an identity link on a task - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|201 |Indicates the task was found and the identity link was created.

|404 |Indicates the requested task was not found or the task doesn’t
have the requested identityLink. The status contains additional
information about this error.
|===

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-p]#\{# [.tok-nt]#"userId"# [.tok-p]#:# [.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"groupId"# [.tok-p]#:# [.tok-s2]#"sales"#[.tok-p]#,#
[.tok-nt]#"type"# [.tok-p]#:# [.tok-s2]#"candidate"#[.tok-p]#,#
[.tok-nt]#"url"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8081/activiti-rest/service/runtime/tasks/100/identitylinks/groups/sales/candidate"#
[.tok-p]#}#

[[_delete_an_identity_link_on_a_task]]
== 13.7.20. Delete an identity link on a task

....
DELETE runtime/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}
....

.Table 142. Delete an identity link on a task - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task.

|family |Yes |String |Either `groups` or `users`, depending on what kind
of identity is targeted.

|identityId |Yes |String |The id of the identity.

|type |Yes |String |The type of identity link.
|===

.Table 143. Delete an identity link on a task - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|204 |Indicates the task and identity link were found and the link has
been deleted. Response-body is intentionally empty.

|404 |Indicates the requested task was not found or the task doesn’t
have the requested identityLink. The status contains additional
information about this error.
|===

[[_create_a_new_comment_on_a_task]]
== 13.7.21. Create a new comment on a task

....
POST runtime/tasks/{taskId}/comments
....

.Table 144. Create a new comment on a task - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task to create the comment for.
|===

*Request body:*

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-p]#\{# [.tok-nt]#"message"# [.tok-p]#:# [.tok-s2]#"This is a
comment on the task."#[.tok-p]#,# [.tok-nt]#"saveProcessInstanceId"#
[.tok-p]#:# [.tok-kc]#true# [.tok-p]#}#

Parameter `saveProcessInstanceId` is optional, if `true` save process
instance id of task with comment.

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
----

[.tok-p]#\{# [.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"123"#[.tok-p]#,#
[.tok-nt]#"taskUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8081/activiti-rest/service/runtime/tasks/101/comments/123"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8081/activiti-rest/service/history/historic-process-instances/100/comments/123"#[.tok-p]#,#
[.tok-nt]#"message"# [.tok-p]#:# [.tok-s2]#"This is a comment on the
task."#[.tok-p]#,# [.tok-nt]#"author"# [.tok-p]#:#
[.tok-s2]#"kermit"#[.tok-p]#,# [.tok-nt]#"time"# [.tok-p]#:#
[.tok-s2]#"2014-07-13T13:13:52.232+08:00"# [.tok-s2]#"taskId"#
[.tok-p]#:# [.tok-s2]#"101"#[.tok-p]#,# [.tok-nt]#"processInstanceId"#
[.tok-p]#:# [.tok-s2]#"100"# [.tok-p]#}#

.Table 145. Create a new comment on a task - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|201 |Indicates the comment was created and the result is returned.
|400 |Indicates the comment is missing from the request.
|404 |Indicates the requested task was not found.
|===

[[_get_all_comments_on_a_task]]
== 13.7.22. Get all comments on a task

....
GET runtime/tasks/{taskId}/comments
....

.Table 146. Get all comments on a task - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task to get the comments for.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
----

[.tok-p]#[# [.tok-p]#\{# [.tok-nt]#"id"# [.tok-p]#:#
[.tok-s2]#"123"#[.tok-p]#,# [.tok-nt]#"taskUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8081/activiti-rest/service/runtime/tasks/101/comments/123"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8081/activiti-rest/service/history/historic-process-instances/100/comments/123"#[.tok-p]#,#
[.tok-nt]#"message"# [.tok-p]#:# [.tok-s2]#"This is a comment on the
task."#[.tok-p]#,# [.tok-nt]#"author"# [.tok-p]#:# [.tok-s2]#"kermit"#
[.tok-s2]#"time"# [.tok-p]#:# [.tok-s2]#"2014-07-13T13:13:52.232+08:00"#
[.tok-s2]#"taskId"# [.tok-p]#:# [.tok-s2]#"101"#[.tok-p]#,#
[.tok-nt]#"processInstanceId"# [.tok-p]#:# [.tok-s2]#"100"# [.tok-p]#},#
[.tok-p]#\{# [.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"456"#[.tok-p]#,#
[.tok-nt]#"taskUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8081/activiti-rest/service/runtime/tasks/101/comments/456"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8081/activiti-rest/service/history/historic-process-instances/100/comments/456"#[.tok-p]#,#
[.tok-nt]#"message"# [.tok-p]#:# [.tok-s2]#"This is another comment on
the task."#[.tok-p]#,# [.tok-nt]#"author"# [.tok-p]#:#
[.tok-s2]#"gonzo"#[.tok-p]#,# [.tok-nt]#"time"# [.tok-p]#:#
[.tok-s2]#"2014-07-13T13:13:52.232+08:00"# [.tok-s2]#"taskId"#
[.tok-p]#:# [.tok-s2]#"101"#[.tok-p]#,# [.tok-nt]#"processInstanceId"#
[.tok-p]#:# [.tok-s2]#"100"# [.tok-p]#}# [.tok-p]#]#

.Table 147. Get all comments on a task - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the task was found and the comments are returned.
|404 |Indicates the requested task was not found.
|===

[[_get_a_comment_on_a_task]]
== 13.7.23. Get a comment on a task

....
GET runtime/tasks/{taskId}/comments/{commentId}
....

.Table 148. Get a comment on a task - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task to get the comment for.
|commentId |Yes |String |The id of the comment.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
----

[.tok-p]#\{# [.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"123"#[.tok-p]#,#
[.tok-nt]#"taskUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8081/activiti-rest/service/runtime/tasks/101/comments/123"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8081/activiti-rest/service/history/historic-process-instances/100/comments/123"#[.tok-p]#,#
[.tok-nt]#"message"# [.tok-p]#:# [.tok-s2]#"This is a comment on the
task."#[.tok-p]#,# [.tok-nt]#"author"# [.tok-p]#:#
[.tok-s2]#"kermit"#[.tok-p]#,# [.tok-nt]#"time"# [.tok-p]#:#
[.tok-s2]#"2014-07-13T13:13:52.232+08:00"# [.tok-s2]#"taskId"#
[.tok-p]#:# [.tok-s2]#"101"#[.tok-p]#,# [.tok-nt]#"processInstanceId"#
[.tok-p]#:# [.tok-s2]#"100"# [.tok-p]#}#

.Table 149. Get a comment on a task - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the task and comment were found and the comment is
returned.

|404 |Indicates the requested task was not found or the tasks doesn’t
have a comment with the given ID.
|===

[[_delete_a_comment_on_a_task]]
== 13.7.24. Delete a comment on a task

....
DELETE runtime/tasks/{taskId}/comments/{commentId}
....

.Table 150. Delete a comment on a task - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task to delete the comment for.
|commentId |Yes |String |The id of the comment.
|===

.Table 151. Delete a comment on a task - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|204 |Indicates the task and comment were found and the comment is
deleted. Response body is left empty intentionally.

|404 |Indicates the requested task was not found or the tasks doesn’t
have a comment with the given ID.
|===

[[_get_all_events_for_a_task]]
== 13.7.25. Get all events for a task

....
GET runtime/tasks/{taskId}/events
....

.Table 152. Get all events for a task - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task to get the events for.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
----

[.tok-p]#[# [.tok-p]#\{# [.tok-nt]#"action"# [.tok-p]#:#
[.tok-s2]#"AddUserLink"#[.tok-p]#,# [.tok-nt]#"id"# [.tok-p]#:#
[.tok-s2]#"4"#[.tok-p]#,# [.tok-nt]#"message"# [.tok-p]#:# [.tok-p]#[#
[.tok-s2]#"gonzo"#[.tok-p]#,# [.tok-s2]#"contributor"# [.tok-p]#],#
[.tok-nt]#"taskUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/runtime/tasks/2"#[.tok-p]#,#
[.tok-nt]#"time"# [.tok-p]#:#
[.tok-s2]#"2013-05-17T11:50:50.000+0000"#[.tok-p]#,# [.tok-nt]#"url"#
[.tok-p]#:#
[.tok-s2]#"http://localhost:8182/runtime/tasks/2/events/4"#[.tok-p]#,#
[.tok-nt]#"userId"# [.tok-p]#:# [.tok-kc]#null# [.tok-p]#}# [.tok-p]#]#

.Table 153. Get all events for a task - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the task was found and the events are returned.
|404 |Indicates the requested task was not found.
|===

[[_get_an_event_on_a_task]]
== 13.7.26. Get an event on a task

....
GET runtime/tasks/{taskId}/events/{eventId}
....

.Table 154. Get an event on a task - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task to get the event for.
|eventId |Yes |String |The id of the event.
|===

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-p]#\{# [.tok-nt]#"action"# [.tok-p]#:#
[.tok-s2]#"AddUserLink"#[.tok-p]#,# [.tok-nt]#"id"# [.tok-p]#:#
[.tok-s2]#"4"#[.tok-p]#,# [.tok-nt]#"message"# [.tok-p]#:# [.tok-p]#[#
[.tok-s2]#"gonzo"#[.tok-p]#,# [.tok-s2]#"contributor"# [.tok-p]#],#
[.tok-nt]#"taskUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/runtime/tasks/2"#[.tok-p]#,#
[.tok-nt]#"time"# [.tok-p]#:#
[.tok-s2]#"2013-05-17T11:50:50.000+0000"#[.tok-p]#,# [.tok-nt]#"url"#
[.tok-p]#:#
[.tok-s2]#"http://localhost:8182/runtime/tasks/2/events/4"#[.tok-p]#,#
[.tok-nt]#"userId"# [.tok-p]#:# [.tok-kc]#null# [.tok-p]#}#

.Table 155. Get an event on a task - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the task and event were found and the event is returned.

|404 |Indicates the requested task was not found or the tasks doesn’t
have an event with the given ID.
|===

[[_create_a_new_attachment_on_a_task_containing_a_link_to_an_external_resource]]
== 13.7.27. Create a new attachment on a task, containing a link to an external resource

....
POST runtime/tasks/{taskId}/attachments
....

.Table 156. Create a new attachment on a task, containing a link to an
external resource - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task to create the attachment for.
|===

*Request body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-p]#\{# [.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"Simple
attachment"#[.tok-p]#,#
[.tok-nt]#"description"#[.tok-p]#:#[.tok-s2]#"Simple attachment
description"#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"simpleType"#[.tok-p]#,#
[.tok-nt]#"externalUrl"#[.tok-p]#:#[.tok-s2]#"http://activiti.org"#
[.tok-p]#}#

Only the attachment name is required to create a new attachment.

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
----

[.tok-p]#\{# [.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"3"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/tasks/2/attachments/3"#[.tok-p]#,#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"Simple attachment"#[.tok-p]#,#
[.tok-nt]#"description"#[.tok-p]#:#[.tok-s2]#"Simple attachment
description"#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"simpleType"#[.tok-p]#,#
[.tok-nt]#"taskUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/tasks/2"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"externalUrl"#[.tok-p]#:#[.tok-s2]#"http://activiti.org"#[.tok-p]#,#
[.tok-nt]#"contentUrl"#[.tok-p]#:#[.tok-kc]#null# [.tok-p]#}#

.Table 157. Create a new attachment on a task, containing a link to an
external resource - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|201 |Indicates the attachment was created and the result is returned.
|400 |Indicates the attachment name is missing from the request.
|404 |Indicates the requested task was not found.
|===

[[_create_a_new_attachment_on_a_task_with_an_attached_file]]
== 13.7.28. Create a new attachment on a task, with an attached file

....
POST runtime/tasks/{taskId}/attachments
....

.Table 158. Create a new attachment on a task, with an attached file -
URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task to create the attachment for.
|===

*Request body:*

The request should be of type `multipart/form-data`. There should be a
single file-part included with the binary value of the variable. On top
of that, the following additional form-fields can be present:

* `name`: Required name of the variable.
* `description`: Description of the attachment, optional.
* `type`: Type of attachment, optional. Supports any arbitrary string or
a valid HTTP content-type.

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
----

[.tok-p]#\{# [.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/tasks/2/attachments/5"#[.tok-p]#,#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"Binary attachment"#[.tok-p]#,#
[.tok-nt]#"description"#[.tok-p]#:#[.tok-s2]#"Binary attachment
description"#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"binaryType"#[.tok-p]#,#
[.tok-nt]#"taskUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/tasks/2"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"externalUrl"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"contentUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/tasks/2/attachments/5/content"#
[.tok-p]#}#

.Table 159. Create a new attachment on a task, with an attached file -
Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|201 |Indicates the attachment was created and the result is returned.

|400 |Indicates the attachment name is missing from the request or no
file was present in the request. The error-message contains additional
information.

|404 |Indicates the requested task was not found.
|===

[[_get_all_attachments_on_a_task]]
== 13.7.29. Get all attachments on a task

....
GET runtime/tasks/{taskId}/attachments
....

.Table 160. Get all attachments on a task - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task to get the attachments for.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
----

[.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"3"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/tasks/2/attachments/3"#[.tok-p]#,#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"Simple attachment"#[.tok-p]#,#
[.tok-nt]#"description"#[.tok-p]#:#[.tok-s2]#"Simple attachment
description"#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"simpleType"#[.tok-p]#,#
[.tok-nt]#"taskUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/tasks/2"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"externalUrl"#[.tok-p]#:#[.tok-s2]#"http://activiti.org"#[.tok-p]#,#
[.tok-nt]#"contentUrl"#[.tok-p]#:#[.tok-kc]#null# [.tok-p]#},#
[.tok-p]#\{# [.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/tasks/2/attachments/5"#[.tok-p]#,#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"Binary attachment"#[.tok-p]#,#
[.tok-nt]#"description"#[.tok-p]#:#[.tok-s2]#"Binary attachment
description"#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"binaryType"#[.tok-p]#,#
[.tok-nt]#"taskUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/tasks/2"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"externalUrl"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"contentUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/tasks/2/attachments/5/content"#
[.tok-p]#}# [.tok-p]#]#

.Table 161. Get all attachments on a task - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the task was found and the attachments are returned.
|404 |Indicates the requested task was not found.
|===

[[_get_an_attachment_on_a_task]]
== 13.7.30. Get an attachment on a task

....
GET runtime/tasks/{taskId}/attachments/{attachmentId}
....

.Table 162. Get an attachment on a task - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task to get the attachment for.
|attachmentId |Yes |String |The id of the attachment.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
----

[.tok-p]#\{# [.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/tasks/2/attachments/5"#[.tok-p]#,#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"Binary attachment"#[.tok-p]#,#
[.tok-nt]#"description"#[.tok-p]#:#[.tok-s2]#"Binary attachment
description"#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"binaryType"#[.tok-p]#,#
[.tok-nt]#"taskUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/tasks/2"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"externalUrl"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"contentUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/tasks/2/attachments/5/content"#
[.tok-p]#}#

* `externalUrl - contentUrl:`In case the attachment is a link to an
external resource, the `externalUrl` contains the URL to the external
content. If the attachment content is present in the Activiti engine,
the `contentUrl` will contain an URL where the binary content can be
streamed from.
* `type:`Can be any arbitrary value. When a valid formatted media-type
(e.g. application/xml, text/plain) is included, the binary content HTTP
response content-type will be set the the given value.

.Table 163. Get an attachment on a task - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the task and attachment were found and the attachment is
returned.

|404 |Indicates the requested task was not found or the tasks doesn’t
have a attachment with the given ID.
|===

[[_get_the_content_for_an_attachment]]
== 13.7.31. Get the content for an attachment

....
GET runtime/tasks/{taskId}/attachment/{attachmentId}/content
....

.Table 164. Get the content for an attachment - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task to get a variable data for.

|attachmentId |Yes |String |The id of the attachment, a `404` is
returned when the attachment points to an external URL rather than
content attached in Activiti.
|===

.Table 165. Get the content for an attachment - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the task and attachment was found and the requested
content is returned.

|404 |Indicates the requested task was not found or the task doesn’t
have an attachment with the given id or the attachment doesn’t have a
binary stream available. Status message provides additional information.
|===

*Success response body:*

The response body contains the binary content. By default, the
content-type of the response is set to `application/octet-stream` unless
the attachment type contains a valid Content-type.

[[_delete_an_attachment_on_a_task]]
== 13.7.32. Delete an attachment on a task

....
DELETE runtime/tasks/{taskId}/attachments/{attachmentId}
....

.Table 166. Delete an attachment on a task - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes |String |The id of the task to delete the attachment for.
|attachmentId |Yes |String |The id of the attachment.
|===

.Table 167. Delete an attachment on a task - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|204 |Indicates the task and attachment were found and the attachment is
deleted. Response body is left empty intentionally.

|404 |Indicates the requested task was not found or the tasks doesn’t
have a attachment with the given ID.
|===

[[_history]]
== 13.8. History

[[_get_a_historic_process_instance]]
=== 13.8.1. Get a historic process instance

....
GET history/historic-process-instances/{processInstanceId}
....

.Table 168. Get a historic process instance - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates that the historic process instances could be found.
|404 |Indicates that the historic process instances could not be found.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
----

[.tok-p]#\{# [.tok-nt]#"data"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"businessKey"# [.tok-p]#:# [.tok-s2]#"myKey"#[.tok-p]#,#
[.tok-nt]#"processDefinitionId"# [.tok-p]#:#
[.tok-s2]#"oneTaskProcess%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"processDefinitionUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"startTime"# [.tok-p]#:#
[.tok-s2]#"2013-04-17T10:17:43.902+0000"#[.tok-p]#,#
[.tok-nt]#"endTime"# [.tok-p]#:#
[.tok-s2]#"2013-04-18T14:06:32.715+0000"#[.tok-p]#,#
[.tok-nt]#"durationInMillis"# [.tok-p]#:# [.tok-mi]#86400056#[.tok-p]#,#
[.tok-nt]#"startUserId"# [.tok-p]#:# [.tok-s2]#"kermit"#[.tok-p]#,#
[.tok-nt]#"startActivityId"# [.tok-p]#:#
[.tok-s2]#"startEvent"#[.tok-p]#,# [.tok-nt]#"endActivityId"#
[.tok-p]#:# [.tok-s2]#"endEvent"#[.tok-p]#,# [.tok-nt]#"deleteReason"#
[.tok-p]#:# [.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"superProcessInstanceId"# [.tok-p]#:#
[.tok-s2]#"3"#[.tok-p]#,# [.tok-nt]#"url"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/history/historic-process-instances/5"#[.tok-p]#,#
[.tok-nt]#"variables"#[.tok-p]#:# [.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"tenantId"#[.tok-p]#:#[.tok-kc]#null# [.tok-p]#}# [.tok-p]#],#
[.tok-nt]#"total"#[.tok-p]#:# [.tok-mi]#1#[.tok-p]#,#
[.tok-nt]#"start"#[.tok-p]#:# [.tok-mi]#0#[.tok-p]#,#
[.tok-nt]#"sort"#[.tok-p]#:# [.tok-s2]#"name"#[.tok-p]#,#
[.tok-nt]#"order"#[.tok-p]#:# [.tok-s2]#"asc"#[.tok-p]#,#
[.tok-nt]#"size"#[.tok-p]#:# [.tok-mi]#1# [.tok-p]#}#

[[restHistoricProcessInstancesGet]]
== 13.8.2. List of historic process instances

....
GET history/historic-process-instances
....

.Table 169. List of historic process instances - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processInstanceId |No |String |An id of the historic process instance.

|processDefinitionKey |No |String |The process definition key of the
historic process instance.

|processDefinitionId |No |String |The process definition id of the
historic process instance.

|businessKey |No |String |The business key of the historic process
instance.

|involvedUser |No |String |An involved user of the historic process
instance.

|finished |No |Boolean |Indication if the historic process instance is
finished.

|superProcessInstanceId |No |String |An optional parent process id of
the historic process instance.

|excludeSubprocesses |No |Boolean |Return only historic process
instances which aren’t sub processes.

|finishedAfter |No |Date |Return only historic process instances that
were finished after this date.

|finishedBefore |No |Date |Return only historic process instances that
were finished before this date.

|startedAfter |No |Date |Return only historic process instances that
were started after this date.

|startedBefore |No |Date |Return only historic process instances that
were started before this date.

|startedBy |No |String |Return only historic process instances that were
started by this user.

|includeProcessVariables |No |Boolean |An indication if the historic
process instance variables should be returned as well.

|tenantId |No |String |Only return instances with the given tenantId.

|tenantIdLike |No |String |Only return instances with a tenantId like
the given value.

|withoutTenantId |No |Boolean |If `true`, only returns instances without
a tenantId set. If `false`, the `withoutTenantId` parameter is ignored.
|===

.Table 170. List of historic process instances - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates that historic process instances could be queried.

|400 |Indicates an parameter was passed in the wrong format. The
status-message contains additional information.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
----

[.tok-p]#\{# [.tok-nt]#"data"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"businessKey"# [.tok-p]#:# [.tok-s2]#"myKey"#[.tok-p]#,#
[.tok-nt]#"processDefinitionId"# [.tok-p]#:#
[.tok-s2]#"oneTaskProcess%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"processDefinitionUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"startTime"# [.tok-p]#:#
[.tok-s2]#"2013-04-17T10:17:43.902+0000"#[.tok-p]#,#
[.tok-nt]#"endTime"# [.tok-p]#:#
[.tok-s2]#"2013-04-18T14:06:32.715+0000"#[.tok-p]#,#
[.tok-nt]#"durationInMillis"# [.tok-p]#:# [.tok-mi]#86400056#[.tok-p]#,#
[.tok-nt]#"startUserId"# [.tok-p]#:# [.tok-s2]#"kermit"#[.tok-p]#,#
[.tok-nt]#"startActivityId"# [.tok-p]#:#
[.tok-s2]#"startEvent"#[.tok-p]#,# [.tok-nt]#"endActivityId"#
[.tok-p]#:# [.tok-s2]#"endEvent"#[.tok-p]#,# [.tok-nt]#"deleteReason"#
[.tok-p]#:# [.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"superProcessInstanceId"# [.tok-p]#:#
[.tok-s2]#"3"#[.tok-p]#,# [.tok-nt]#"url"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/history/historic-process-instances/5"#[.tok-p]#,#
[.tok-nt]#"variables"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"name"#[.tok-p]#:# [.tok-s2]#"test"#[.tok-p]#,#
[.tok-nt]#"variableScope"#[.tok-p]#:# [.tok-s2]#"local"#[.tok-p]#,#
[.tok-nt]#"value"#[.tok-p]#:# [.tok-s2]#"myTest"# [.tok-p]#}#
[.tok-p]#],# [.tok-nt]#"tenantId"#[.tok-p]#:#[.tok-kc]#null# [.tok-p]#}#
[.tok-p]#],# [.tok-nt]#"total"#[.tok-p]#:# [.tok-mi]#1#[.tok-p]#,#
[.tok-nt]#"start"#[.tok-p]#:# [.tok-mi]#0#[.tok-p]#,#
[.tok-nt]#"sort"#[.tok-p]#:# [.tok-s2]#"name"#[.tok-p]#,#
[.tok-nt]#"order"#[.tok-p]#:# [.tok-s2]#"asc"#[.tok-p]#,#
[.tok-nt]#"size"#[.tok-p]#:# [.tok-mi]#1# [.tok-p]#}#

[[_query_for_historic_process_instances]]
== 13.8.3. Query for historic process instances

....
POST query/historic-process-instances
....

*Request body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
----

[.tok-p]#\{# [.tok-nt]#"processDefinitionId"# [.tok-p]#:#
[.tok-s2]#"oneTaskProcess%3A1%3A4"#[.tok-p]#,# [.tok-nt]#"variables"#
[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{# [.tok-nt]#"name"# [.tok-p]#:#
[.tok-s2]#"myVariable"#[.tok-p]#,# [.tok-nt]#"value"# [.tok-p]#:#
[.tok-mi]#1234#[.tok-p]#,# [.tok-nt]#"operation"# [.tok-p]#:#
[.tok-s2]#"equals"#[.tok-p]#,# [.tok-nt]#"type"# [.tok-p]#:#
[.tok-s2]#"long"# [.tok-p]#}# [.tok-p]#]# [.tok-p]#}#

All supported JSON parameter fields allowed are exactly the same as the
parameters found for link:#restHistoricProcessInstancesGet[getting a
collection of historic process instances], but passed in as JSON-body
arguments rather than URL-parameters to allow for more advanced querying
and preventing errors with request-uri’s that are too long. On top of
that, the query allows for filtering based on process variables. The
`variables` property is a JSON-array containing objects with the format
link:#restQueryVariable[as described here.]

.Table 171. Query for historic process instances - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates request was successful and the tasks are returned

|400 |Indicates an parameter was passed in the wrong format. The
status-message contains additional information.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
----

[.tok-p]#\{# [.tok-nt]#"data"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"businessKey"# [.tok-p]#:# [.tok-s2]#"myKey"#[.tok-p]#,#
[.tok-nt]#"processDefinitionId"# [.tok-p]#:#
[.tok-s2]#"oneTaskProcess%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"processDefinitionUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"startTime"# [.tok-p]#:#
[.tok-s2]#"2013-04-17T10:17:43.902+0000"#[.tok-p]#,#
[.tok-nt]#"endTime"# [.tok-p]#:#
[.tok-s2]#"2013-04-18T14:06:32.715+0000"#[.tok-p]#,#
[.tok-nt]#"durationInMillis"# [.tok-p]#:# [.tok-mi]#86400056#[.tok-p]#,#
[.tok-nt]#"startUserId"# [.tok-p]#:# [.tok-s2]#"kermit"#[.tok-p]#,#
[.tok-nt]#"startActivityId"# [.tok-p]#:#
[.tok-s2]#"startEvent"#[.tok-p]#,# [.tok-nt]#"endActivityId"#
[.tok-p]#:# [.tok-s2]#"endEvent"#[.tok-p]#,# [.tok-nt]#"deleteReason"#
[.tok-p]#:# [.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"superProcessInstanceId"# [.tok-p]#:#
[.tok-s2]#"3"#[.tok-p]#,# [.tok-nt]#"url"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/history/historic-process-instances/5"#[.tok-p]#,#
[.tok-nt]#"variables"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"name"#[.tok-p]#:# [.tok-s2]#"test"#[.tok-p]#,#
[.tok-nt]#"variableScope"#[.tok-p]#:# [.tok-s2]#"local"#[.tok-p]#,#
[.tok-nt]#"value"#[.tok-p]#:# [.tok-s2]#"myTest"# [.tok-p]#}#
[.tok-p]#],# [.tok-nt]#"tenantId"#[.tok-p]#:#[.tok-kc]#null# [.tok-p]#}#
[.tok-p]#],# [.tok-nt]#"total"#[.tok-p]#:# [.tok-mi]#1#[.tok-p]#,#
[.tok-nt]#"start"#[.tok-p]#:# [.tok-mi]#0#[.tok-p]#,#
[.tok-nt]#"sort"#[.tok-p]#:# [.tok-s2]#"name"#[.tok-p]#,#
[.tok-nt]#"order"#[.tok-p]#:# [.tok-s2]#"asc"#[.tok-p]#,#
[.tok-nt]#"size"#[.tok-p]#:# [.tok-mi]#1# [.tok-p]#}#

[[_delete_a_historic_process_instance]]
== 13.8.4. Delete a historic process instance

....
DELETE history/historic-process-instances/{processInstanceId}
....

.Table 172. Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates that the historic process instance was deleted.
|404 |Indicates that the historic process instance could not be found.
|===

[[_get_the_identity_links_of_a_historic_process_instance]]
== 13.8.5. Get the identity links of a historic process instance

....
GET history/historic-process-instance/{processInstanceId}/identitylinks
....

.Table 173. Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates request was successful and the identity links are
returned

|404 |Indicates the process instance could not be found.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
----

[.tok-p]#[# [.tok-p]#\{# [.tok-nt]#"type"# [.tok-p]#:#
[.tok-s2]#"participant"#[.tok-p]#,# [.tok-nt]#"userId"# [.tok-p]#:#
[.tok-s2]#"kermit"#[.tok-p]#,# [.tok-nt]#"groupId"# [.tok-p]#:#
[.tok-kc]#null#[.tok-p]#,# [.tok-nt]#"taskId"# [.tok-p]#:#
[.tok-kc]#null#[.tok-p]#,# [.tok-nt]#"taskUrl"# [.tok-p]#:#
[.tok-kc]#null#[.tok-p]#,# [.tok-nt]#"processInstanceId"# [.tok-p]#:#
[.tok-s2]#"5"#[.tok-p]#,# [.tok-nt]#"processInstanceUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/history/historic-process-instances/5"#
[.tok-p]#}# [.tok-p]#]#

[[_get_the_binary_data_for_a_historic_process_instance_variable]]
== 13.8.6. Get the binary data for a historic process instance variable

....
GET history/historic-process-instances/{processInstanceId}/variables/{variableName}/data
....

.Table 174. Get the binary data for a historic process instance variable
- Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the process instance was found and the requested
variable data is returned.

|404 |Indicates the requested process instance was not found or the
process instance doesn’t have a variable with the given name or the
variable doesn’t have a binary stream available. Status message provides
additional information.
|===

*Success response body:*

The response body contains the binary value of the variable. When the
variable is of type `binary`, the content-type of the response is set to
`application/octet-stream`, regardless of the content of the variable or
the request accept-type header. In case of `serializable`,
`application/x-java-serialized-object` is used as content-type.

[[_create_a_new_comment_on_a_historic_process_instance]]
== 13.8.7. Create a new comment on a historic process instance

....
POST history/historic-process-instances/{processInstanceId}/comments
....

.Table 175. Create a new comment on a historic process instance - URL
parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processInstanceId |Yes |String |The id of the process instance to
create the comment for.
|===

*Request body:*

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-p]#\{# [.tok-nt]#"message"# [.tok-p]#:# [.tok-s2]#"This is a
comment."#[.tok-p]#,# [.tok-nt]#"saveProcessInstanceId"# [.tok-p]#:#
[.tok-kc]#true# [.tok-p]#}#

Parameter `saveProcessInstanceId` is optional, if `true` save process
instance id of task with comment.

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
----

[.tok-p]#\{# [.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"123"#[.tok-p]#,#
[.tok-nt]#"taskUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8081/activiti-rest/service/runtime/tasks/101/comments/123"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8081/activiti-rest/service/history/historic-process-instances/100/comments/123"#[.tok-p]#,#
[.tok-nt]#"message"# [.tok-p]#:# [.tok-s2]#"This is a comment on the
task."#[.tok-p]#,# [.tok-nt]#"author"# [.tok-p]#:#
[.tok-s2]#"kermit"#[.tok-p]#,# [.tok-nt]#"time"# [.tok-p]#:#
[.tok-s2]#"2014-07-13T13:13:52.232+08:00"#[.tok-p]#,#
[.tok-nt]#"taskId"# [.tok-p]#:# [.tok-s2]#"101"#[.tok-p]#,#
[.tok-nt]#"processInstanceId"# [.tok-p]#:# [.tok-s2]#"100"# [.tok-p]#}#

.Table 176. Create a new comment on a historic process instance -
Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|201 |Indicates the comment was created and the result is returned.
|400 |Indicates the comment is missing from the request.
|404 |Indicates the requested historic process instance was not found.
|===

[[_get_all_comments_on_a_historic_process_instance]]
== 13.8.8. Get all comments on a historic process instance

....
GET history/historic-process-instances/{processInstanceId}/comments
....

.Table 177. Get all comments on a process instance - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processInstanceId |Yes |String |The id of the process instance to get
the comments for.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
----

[.tok-p]#[# [.tok-p]#\{# [.tok-nt]#"id"# [.tok-p]#:#
[.tok-s2]#"123"#[.tok-p]#,# [.tok-nt]#"processInstanceUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8081/activiti-rest/service/history/historic-process-instances/100/comments/123"#[.tok-p]#,#
[.tok-nt]#"message"# [.tok-p]#:# [.tok-s2]#"This is a comment on the
task."#[.tok-p]#,# [.tok-nt]#"author"# [.tok-p]#:#
[.tok-s2]#"kermit"#[.tok-p]#,# [.tok-nt]#"time"# [.tok-p]#:#
[.tok-s2]#"2014-07-13T13:13:52.232+08:00"#[.tok-p]#,#
[.tok-nt]#"processInstanceId"# [.tok-p]#:# [.tok-s2]#"100"# [.tok-p]#},#
[.tok-p]#\{# [.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"456"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8081/activiti-rest/service/history/historic-process-instances/100/comments/456"#[.tok-p]#,#
[.tok-nt]#"message"# [.tok-p]#:# [.tok-s2]#"This is another
comment."#[.tok-p]#,# [.tok-nt]#"author"# [.tok-p]#:#
[.tok-s2]#"gonzo"#[.tok-p]#,# [.tok-nt]#"time"# [.tok-p]#:#
[.tok-s2]#"2014-07-14T15:16:52.232+08:00"#[.tok-p]#,#
[.tok-nt]#"processInstanceId"# [.tok-p]#:# [.tok-s2]#"100"# [.tok-p]#}#
[.tok-p]#]#

.Table 178. Get all comments on a process instance - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the process instance was found and the comments are
returned.

|404 |Indicates the requested task was not found.
|===

[[_get_a_comment_on_a_historic_process_instance]]
== 13.8.9. Get a comment on a historic process instance

....
GET history/historic-process-instances/{processInstanceId}/comments/{commentId}
....

.Table 179. Get a comment on a historic process instance - URL
parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processInstanceId |Yes |String |The id of the historic process instance
to get the comment for.

|commentId |Yes |String |The id of the comment.
|===

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
----

[.tok-p]#\{# [.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"123"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8081/activiti-rest/service/history/historic-process-instances/100/comments/456"#[.tok-p]#,#
[.tok-nt]#"message"# [.tok-p]#:# [.tok-s2]#"This is another
comment."#[.tok-p]#,# [.tok-nt]#"author"# [.tok-p]#:#
[.tok-s2]#"gonzo"#[.tok-p]#,# [.tok-nt]#"time"# [.tok-p]#:#
[.tok-s2]#"2014-07-14T15:16:52.232+08:00"#[.tok-p]#,#
[.tok-nt]#"processInstanceId"# [.tok-p]#:# [.tok-s2]#"100"# [.tok-p]#}#

.Table 180. Get a comment on a historic process instance - Response
codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the historic process instance and comment were found and
the comment is returned.

|404 |Indicates the requested historic process instance was not found or
the historic process instance doesn’t have a comment with the given ID.
|===

[[_delete_a_comment_on_a_historic_process_instance]]
== 13.8.10. Delete a comment on a historic process instance

....
DELETE history/historic-process-instances/{processInstanceId}/comments/{commentId}
....

.Table 181. Delete a comment on a historic process instance - URL
parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processInstanceId |Yes |String |The id of the historic process instance
to delete the comment for.

|commentId |Yes |String |The id of the comment.
|===

.Table 182. Delete a comment on a historic process instance - Response
codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|204 |Indicates the historic process instance and comment were found and
the comment is deleted. Response body is left empty intentionally.

|404 |Indicates the requested task was not found or the historic process
instance doesn’t have a comment with the given ID.
|===

[[_get_a_single_historic_task_instance]]
== 13.8.11. Get a single historic task instance

....
GET history/historic-task-instances/{taskId}
....

.Table 183. Get a single historic task instance - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates that the historic task instances could be found.
|404 |Indicates that the historic task instances could not be found.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
----

[.tok-p]#\{# [.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"processDefinitionId"# [.tok-p]#:#
[.tok-s2]#"oneTaskProcess%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"processDefinitionUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"processInstanceId"# [.tok-p]#:# [.tok-s2]#"3"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/history/historic-process-instances/3"#[.tok-p]#,#
[.tok-nt]#"executionId"# [.tok-p]#:# [.tok-s2]#"4"#[.tok-p]#,#
[.tok-nt]#"name"# [.tok-p]#:# [.tok-s2]#"My task name"#[.tok-p]#,#
[.tok-nt]#"description"# [.tok-p]#:# [.tok-s2]#"My task
description"#[.tok-p]#,# [.tok-nt]#"deleteReason"# [.tok-p]#:#
[.tok-kc]#null#[.tok-p]#,# [.tok-nt]#"owner"# [.tok-p]#:#
[.tok-s2]#"kermit"#[.tok-p]#,# [.tok-nt]#"assignee"# [.tok-p]#:#
[.tok-s2]#"fozzie"#[.tok-p]#,# [.tok-nt]#"startTime"# [.tok-p]#:#
[.tok-s2]#"2013-04-17T10:17:43.902+0000"#[.tok-p]#,#
[.tok-nt]#"endTime"# [.tok-p]#:#
[.tok-s2]#"2013-04-18T14:06:32.715+0000"#[.tok-p]#,#
[.tok-nt]#"durationInMillis"# [.tok-p]#:# [.tok-mi]#86400056#[.tok-p]#,#
[.tok-nt]#"workTimeInMillis"# [.tok-p]#:# [.tok-mi]#234890#[.tok-p]#,#
[.tok-nt]#"claimTime"# [.tok-p]#:#
[.tok-s2]#"2013-04-18T11:01:54.715+0000"#[.tok-p]#,#
[.tok-nt]#"taskDefinitionKey"# [.tok-p]#:#
[.tok-s2]#"taskKey"#[.tok-p]#,# [.tok-nt]#"formKey"# [.tok-p]#:#
[.tok-kc]#null#[.tok-p]#,# [.tok-nt]#"priority"# [.tok-p]#:#
[.tok-mi]#50#[.tok-p]#,# [.tok-nt]#"dueDate"# [.tok-p]#:#
[.tok-s2]#"2013-04-20T12:11:13.134+0000"#[.tok-p]#,#
[.tok-nt]#"parentTaskId"# [.tok-p]#:# [.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"url"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/history/historic-task-instances/5"#[.tok-p]#,#
[.tok-nt]#"variables"#[.tok-p]#:# [.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"tenantId"#[.tok-p]#:#[.tok-kc]#null# [.tok-p]#}#

[[restHistoricTaskInstancesGet]]
== 13.8.12. Get historic task instances

....
GET history/historic-task-instances
....

.Table 184. Get historic task instances - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |No |String |An id of the historic task instance.

|processInstanceId |No |String |The process instance id of the historic
task instance.

|processDefinitionKey |No |String |The process definition key of the
historic task instance.

|processDefinitionKeyLike |No |String |The process definition key of the
historic task instance, which matches the given value.

|processDefinitionId |No |String |The process definition id of the
historic task instance.

|processDefinitionName |No |String |The process definition name of the
historic task instance.

|processDefinitionNameLike |No |String |The process definition name of
the historic task instance, which matches the given value.

|processBusinessKey |No |String |The process instance business key of
the historic task instance.

|processBusinessKeyLike |No |String |The process instance business key
of the historic task instance that matches the given value.

|executionId |No |String |The execution id of the historic task
instance.

|taskDefinitionKey |No |String |The task definition key for tasks part
of a process

|taskName |No |String |The task name of the historic task instance.

|taskNameLike |No |String |The task name with _like_ operator for the
historic task instance.

|taskDescription |No |String |The task description of the historic task
instance.

|taskDescriptionLike |No |String |The task description with _like_
operator for the historic task instance.

|taskDefinitionKey |No |String |The task identifier from the process
definition for the historic task instance.

|taskCategory |No |String |Select tasks with the given category. Note
that this is the task category, not the category of the process
definition (namespace within the BPMN Xml).

|taskDeleteReason |No |String |The task delete reason of the historic
task instance.

|taskDeleteReasonLike |No |String |The task delete reason with _like_
operator for the historic task instance.

|taskAssignee |No |String |The assignee of the historic task instance.

|taskAssigneeLike |No |String |The assignee with _like_ operator for the
historic task instance.

|taskOwner |No |String |The owner of the historic task instance.

|taskOwnerLike |No |String |The owner with _like_ operator for the
historic task instance.

|taskInvolvedUser |No |String |An involved user of the historic task
instance.

|taskPriority |No |String |The priority of the historic task instance.

|finished |No |Boolean |Indication if the historic task instance is
finished.

|processFinished |No |Boolean |Indication if the process instance of the
historic task instance is finished.

|parentTaskId |No |String |An optional parent task id of the historic
task instance.

|dueDate |No |Date |Return only historic task instances that have a due
date equal this date.

|dueDateAfter |No |Date |Return only historic task instances that have a
due date after this date.

|dueDateBefore |No |Date |Return only historic task instances that have
a due date before this date.

|withoutDueDate |No |Boolean |Return only historic task instances that
have no due-date. When `false` is provided as value, this parameter is
ignored.

|taskCompletedOn |No |Date |Return only historic task instances that
have been completed on this date.

|taskCompletedAfter |No |Date |Return only historic task instances that
have been completed after this date.

|taskCompletedBefore |No |Date |Return only historic task instances that
have been completed before this date.

|taskCreatedOn |No |Date |Return only historic task instances that were
created on this date.

|taskCreatedBefore |No |Date |Return only historic task instances that
were created before this date.

|taskCreatedAfter |No |Date |Return only historic task instances that
were created after this date.

|includeTaskLocalVariables |No |Boolean |An indication if the historic
task instance local variables should be returned as well.

|includeProcessVariables |No |Boolean |An indication if the historic
task instance global variables should be returned as well.

|tenantId |No |String |Only return historic task instances with the
given tenantId.

|tenantIdLike |No |String |Only return historic task instances with a
tenantId like the given value.

|withoutTenantId |No |Boolean |If `true`, only returns historic task
instances without a tenantId set. If `false`, the `withoutTenantId`
parameter is ignored.
|===

.Table 185. Get historic task instances - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates that historic process instances could be queried.

|400 |Indicates an parameter was passed in the wrong format. The
status-message contains additional information.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
----

[.tok-p]#\{# [.tok-nt]#"data"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"processDefinitionId"# [.tok-p]#:#
[.tok-s2]#"oneTaskProcess%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"processDefinitionUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"processInstanceId"# [.tok-p]#:# [.tok-s2]#"3"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/history/historic-process-instances/3"#[.tok-p]#,#
[.tok-nt]#"executionId"# [.tok-p]#:# [.tok-s2]#"4"#[.tok-p]#,#
[.tok-nt]#"name"# [.tok-p]#:# [.tok-s2]#"My task name"#[.tok-p]#,#
[.tok-nt]#"description"# [.tok-p]#:# [.tok-s2]#"My task
description"#[.tok-p]#,# [.tok-nt]#"deleteReason"# [.tok-p]#:#
[.tok-kc]#null#[.tok-p]#,# [.tok-nt]#"owner"# [.tok-p]#:#
[.tok-s2]#"kermit"#[.tok-p]#,# [.tok-nt]#"assignee"# [.tok-p]#:#
[.tok-s2]#"fozzie"#[.tok-p]#,# [.tok-nt]#"startTime"# [.tok-p]#:#
[.tok-s2]#"2013-04-17T10:17:43.902+0000"#[.tok-p]#,#
[.tok-nt]#"endTime"# [.tok-p]#:#
[.tok-s2]#"2013-04-18T14:06:32.715+0000"#[.tok-p]#,#
[.tok-nt]#"durationInMillis"# [.tok-p]#:# [.tok-mi]#86400056#[.tok-p]#,#
[.tok-nt]#"workTimeInMillis"# [.tok-p]#:# [.tok-mi]#234890#[.tok-p]#,#
[.tok-nt]#"claimTime"# [.tok-p]#:#
[.tok-s2]#"2013-04-18T11:01:54.715+0000"#[.tok-p]#,#
[.tok-nt]#"taskDefinitionKey"# [.tok-p]#:#
[.tok-s2]#"taskKey"#[.tok-p]#,# [.tok-nt]#"formKey"# [.tok-p]#:#
[.tok-kc]#null#[.tok-p]#,# [.tok-nt]#"priority"# [.tok-p]#:#
[.tok-mi]#50#[.tok-p]#,# [.tok-nt]#"dueDate"# [.tok-p]#:#
[.tok-s2]#"2013-04-20T12:11:13.134+0000"#[.tok-p]#,#
[.tok-nt]#"parentTaskId"# [.tok-p]#:# [.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"url"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/history/historic-task-instances/5"#[.tok-p]#,#
[.tok-nt]#"taskVariables"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"name"#[.tok-p]#:# [.tok-s2]#"test"#[.tok-p]#,#
[.tok-nt]#"variableScope"#[.tok-p]#:# [.tok-s2]#"local"#[.tok-p]#,#
[.tok-nt]#"value"#[.tok-p]#:# [.tok-s2]#"myTest"# [.tok-p]#}#
[.tok-p]#],# [.tok-nt]#"processVariables"#[.tok-p]#:# [.tok-p]#[#
[.tok-p]#\{# [.tok-nt]#"name"#[.tok-p]#:#
[.tok-s2]#"processTest"#[.tok-p]#,#
[.tok-nt]#"variableScope"#[.tok-p]#:# [.tok-s2]#"global"#[.tok-p]#,#
[.tok-nt]#"value"#[.tok-p]#:# [.tok-s2]#"myProcessTest"# [.tok-p]#}#
[.tok-p]#],# [.tok-nt]#"tenantId"#[.tok-p]#:#[.tok-kc]#null# [.tok-p]#}#
[.tok-p]#],# [.tok-nt]#"total"#[.tok-p]#:# [.tok-mi]#1#[.tok-p]#,#
[.tok-nt]#"start"#[.tok-p]#:# [.tok-mi]#0#[.tok-p]#,#
[.tok-nt]#"sort"#[.tok-p]#:# [.tok-s2]#"name"#[.tok-p]#,#
[.tok-nt]#"order"#[.tok-p]#:# [.tok-s2]#"asc"#[.tok-p]#,#
[.tok-nt]#"size"#[.tok-p]#:# [.tok-mi]#1# [.tok-p]#}#

[[_query_for_historic_task_instances]]
== 13.8.13. Query for historic task instances

....
POST query/historic-task-instances
....

*Query for historic task instances - Request body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
----

[.tok-p]#\{# [.tok-nt]#"processDefinitionId"# [.tok-p]#:#
[.tok-s2]#"oneTaskProcess%3A1%3A4"#[.tok-p]#,# [.tok-err]#...#
[.tok-nt]#"variables"# [.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"name"# [.tok-p]#:# [.tok-s2]#"myVariable"#[.tok-p]#,#
[.tok-nt]#"value"# [.tok-p]#:# [.tok-mi]#1234#[.tok-p]#,#
[.tok-nt]#"operation"# [.tok-p]#:# [.tok-s2]#"equals"#[.tok-p]#,#
[.tok-nt]#"type"# [.tok-p]#:# [.tok-s2]#"long"# [.tok-p]#}# [.tok-p]#]#
[.tok-p]#}#

All supported JSON parameter fields allowed are exactly the same as the
parameters found for link:#restHistoricTaskInstancesGet[getting a
collection of historic task instances], but passed in as JSON-body
arguments rather than URL-parameters to allow for more advanced querying
and preventing errors with request-uri’s that are too long. On top of
that, the query allows for filtering based on process variables. The
`taskVariables` and `processVariables` properties are JSON-arrays
containing objects with the format link:#restQueryVariable[as described
here.]

.Table 186. Query for historic task instances - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates request was successful and the tasks are returned

|400 |Indicates an parameter was passed in the wrong format. The
status-message contains additional information.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
----

[.tok-p]#\{# [.tok-nt]#"data"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"processDefinitionId"# [.tok-p]#:#
[.tok-s2]#"oneTaskProcess%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"processDefinitionUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"processInstanceId"# [.tok-p]#:# [.tok-s2]#"3"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/history/historic-process-instances/3"#[.tok-p]#,#
[.tok-nt]#"executionId"# [.tok-p]#:# [.tok-s2]#"4"#[.tok-p]#,#
[.tok-nt]#"name"# [.tok-p]#:# [.tok-s2]#"My task name"#[.tok-p]#,#
[.tok-nt]#"description"# [.tok-p]#:# [.tok-s2]#"My task
description"#[.tok-p]#,# [.tok-nt]#"deleteReason"# [.tok-p]#:#
[.tok-kc]#null#[.tok-p]#,# [.tok-nt]#"owner"# [.tok-p]#:#
[.tok-s2]#"kermit"#[.tok-p]#,# [.tok-nt]#"assignee"# [.tok-p]#:#
[.tok-s2]#"fozzie"#[.tok-p]#,# [.tok-nt]#"startTime"# [.tok-p]#:#
[.tok-s2]#"2013-04-17T10:17:43.902+0000"#[.tok-p]#,#
[.tok-nt]#"endTime"# [.tok-p]#:#
[.tok-s2]#"2013-04-18T14:06:32.715+0000"#[.tok-p]#,#
[.tok-nt]#"durationInMillis"# [.tok-p]#:# [.tok-mi]#86400056#[.tok-p]#,#
[.tok-nt]#"workTimeInMillis"# [.tok-p]#:# [.tok-mi]#234890#[.tok-p]#,#
[.tok-nt]#"claimTime"# [.tok-p]#:#
[.tok-s2]#"2013-04-18T11:01:54.715+0000"#[.tok-p]#,#
[.tok-nt]#"taskDefinitionKey"# [.tok-p]#:#
[.tok-s2]#"taskKey"#[.tok-p]#,# [.tok-nt]#"formKey"# [.tok-p]#:#
[.tok-kc]#null#[.tok-p]#,# [.tok-nt]#"priority"# [.tok-p]#:#
[.tok-mi]#50#[.tok-p]#,# [.tok-nt]#"dueDate"# [.tok-p]#:#
[.tok-s2]#"2013-04-20T12:11:13.134+0000"#[.tok-p]#,#
[.tok-nt]#"parentTaskId"# [.tok-p]#:# [.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"url"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/history/historic-task-instances/5"#[.tok-p]#,#
[.tok-nt]#"taskVariables"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"name"#[.tok-p]#:# [.tok-s2]#"test"#[.tok-p]#,#
[.tok-nt]#"variableScope"#[.tok-p]#:# [.tok-s2]#"local"#[.tok-p]#,#
[.tok-nt]#"value"#[.tok-p]#:# [.tok-s2]#"myTest"# [.tok-p]#}#
[.tok-p]#],# [.tok-nt]#"processVariables"#[.tok-p]#:# [.tok-p]#[#
[.tok-p]#\{# [.tok-nt]#"name"#[.tok-p]#:#
[.tok-s2]#"processTest"#[.tok-p]#,#
[.tok-nt]#"variableScope"#[.tok-p]#:# [.tok-s2]#"global"#[.tok-p]#,#
[.tok-nt]#"value"#[.tok-p]#:# [.tok-s2]#"myProcessTest"# [.tok-p]#}#
[.tok-p]#],# [.tok-nt]#"tenantId"#[.tok-p]#:#[.tok-kc]#null# [.tok-p]#}#
[.tok-p]#],# [.tok-nt]#"total"#[.tok-p]#:# [.tok-mi]#1#[.tok-p]#,#
[.tok-nt]#"start"#[.tok-p]#:# [.tok-mi]#0#[.tok-p]#,#
[.tok-nt]#"sort"#[.tok-p]#:# [.tok-s2]#"name"#[.tok-p]#,#
[.tok-nt]#"order"#[.tok-p]#:# [.tok-s2]#"asc"#[.tok-p]#,#
[.tok-nt]#"size"#[.tok-p]#:# [.tok-mi]#1# [.tok-p]#}#

[[_delete_a_historic_task_instance]]
== 13.8.14. Delete a historic task instance

....
DELETE history/historic-task-instances/{taskId}
....

.Table 187. Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates that the historic task instance was deleted.
|404 |Indicates that the historic task instance could not be found.
|===

[[_get_the_identity_links_of_a_historic_task_instance]]
== 13.8.15. Get the identity links of a historic task instance

....
GET history/historic-task-instance/{taskId}/identitylinks
....

.Table 188. Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates request was successful and the identity links are
returned

|404 |Indicates the task instance could not be found.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
----

[.tok-p]#[# [.tok-p]#\{# [.tok-nt]#"type"# [.tok-p]#:#
[.tok-s2]#"assignee"#[.tok-p]#,# [.tok-nt]#"userId"# [.tok-p]#:#
[.tok-s2]#"kermit"#[.tok-p]#,# [.tok-nt]#"groupId"# [.tok-p]#:#
[.tok-kc]#null#[.tok-p]#,# [.tok-nt]#"taskId"# [.tok-p]#:#
[.tok-s2]#"6"#[.tok-p]#,# [.tok-nt]#"taskUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/history/historic-task-instances/5"#[.tok-p]#,#
[.tok-nt]#"processInstanceId"# [.tok-p]#:# [.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"# [.tok-p]#:# [.tok-kc]#null# [.tok-p]#}#
[.tok-p]#]#

[[_get_the_binary_data_for_a_historic_task_instance_variable]]
== 13.8.16. Get the binary data for a historic task instance variable

....
GET history/historic-task-instances/{taskId}/variables/{variableName}/data
....

.Table 189. Get the binary data for a historic task instance variable -
Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the task instance was found and the requested variable
data is returned.

|404 |Indicates the requested task instance was not found or the process
instance doesn’t have a variable with the given name or the variable
doesn’t have a binary stream available. Status message provides
additional information.
|===

*Success response body:*

The response body contains the binary value of the variable. When the
variable is of type `binary`, the content-type of the response is set to
`application/octet-stream`, regardless of the content of the variable or
the request accept-type header. In case of `serializable`,
`application/x-java-serialized-object` is used as content-type.

[[restHistoricActivityInstancesGet]]
== 13.8.17. Get historic activity instances

....
GET history/historic-activity-instances
....

.Table 190. Get historic activity instances - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|activityId |No |String |An id of the activity instance.

|activityInstanceId |No |String |An id of the historic activity
instance.

|activityName |No |String |The name of the historic activity instance.

|activityType |No |String |The element type of the historic activity
instance.

|executionId |No |String |The execution id of the historic activity
instance.

|finished |No |Boolean |Indication if the historic activity instance is
finished.

|taskAssignee |No |String |The assignee of the historic activity
instance.

|processInstanceId |No |String |The process instance id of the historic
activity instance.

|processDefinitionId |No |String |The process definition id of the
historic activity instance.

|tenantId |No |String |Only return instances with the given tenantId.

|tenantIdLike |No |String |Only return instances with a tenantId like
the given value.

|withoutTenantId |No |Boolean |If `true`, only returns instances without
a tenantId set. If `false`, the `withoutTenantId` parameter is ignored.
|===

.Table 191. Get historic activity instances - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates that historic activity instances could be queried.

|400 |Indicates an parameter was passed in the wrong format. The
status-message contains additional information.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
----

[.tok-p]#\{# [.tok-nt]#"data"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"activityId"# [.tok-p]#:# [.tok-s2]#"4"#[.tok-p]#,#
[.tok-nt]#"activityName"# [.tok-p]#:# [.tok-s2]#"My user
task"#[.tok-p]#,# [.tok-nt]#"activityType"# [.tok-p]#:#
[.tok-s2]#"userTask"#[.tok-p]#,# [.tok-nt]#"processDefinitionId"#
[.tok-p]#:# [.tok-s2]#"oneTaskProcess%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"processDefinitionUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"processInstanceId"# [.tok-p]#:# [.tok-s2]#"3"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/history/historic-process-instances/3"#[.tok-p]#,#
[.tok-nt]#"executionId"# [.tok-p]#:# [.tok-s2]#"4"#[.tok-p]#,#
[.tok-nt]#"taskId"# [.tok-p]#:# [.tok-s2]#"4"#[.tok-p]#,#
[.tok-nt]#"calledProcessInstanceId"# [.tok-p]#:#
[.tok-kc]#null#[.tok-p]#,# [.tok-nt]#"assignee"# [.tok-p]#:#
[.tok-s2]#"fozzie"#[.tok-p]#,# [.tok-nt]#"startTime"# [.tok-p]#:#
[.tok-s2]#"2013-04-17T10:17:43.902+0000"#[.tok-p]#,#
[.tok-nt]#"endTime"# [.tok-p]#:#
[.tok-s2]#"2013-04-18T14:06:32.715+0000"#[.tok-p]#,#
[.tok-nt]#"durationInMillis"# [.tok-p]#:# [.tok-mi]#86400056#[.tok-p]#,#
[.tok-nt]#"tenantId"#[.tok-p]#:#[.tok-kc]#null# [.tok-p]#}# [.tok-p]#],#
[.tok-nt]#"total"#[.tok-p]#:# [.tok-mi]#1#[.tok-p]#,#
[.tok-nt]#"start"#[.tok-p]#:# [.tok-mi]#0#[.tok-p]#,#
[.tok-nt]#"sort"#[.tok-p]#:# [.tok-s2]#"name"#[.tok-p]#,#
[.tok-nt]#"order"#[.tok-p]#:# [.tok-s2]#"asc"#[.tok-p]#,#
[.tok-nt]#"size"#[.tok-p]#:# [.tok-mi]#1# [.tok-p]#}#

[[_query_for_historic_activity_instances]]
== 13.8.18. Query for historic activity instances

....
POST query/historic-activity-instances
....

*Request body:*

[source,pygments,highlight]
----
1
2
3
----

[.tok-p]#\{# [.tok-nt]#"processDefinitionId"# [.tok-p]#:#
[.tok-s2]#"oneTaskProcess%3A1%3A4"# [.tok-p]#}#

All supported JSON parameter fields allowed are exactly the same as the
parameters found for link:#restHistoricTaskInstancesGet[getting a
collection of historic task instances], but passed in as JSON-body
arguments rather than URL-parameters to allow for more advanced querying
and preventing errors with request-uri’s that are too long.

.Table 192. Query for historic activity instances - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates request was successful and the activities are returned

|400 |Indicates an parameter was passed in the wrong format. The
status-message contains additional information.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
----

[.tok-p]#\{# [.tok-nt]#"data"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"activityId"# [.tok-p]#:# [.tok-s2]#"4"#[.tok-p]#,#
[.tok-nt]#"activityName"# [.tok-p]#:# [.tok-s2]#"My user
task"#[.tok-p]#,# [.tok-nt]#"activityType"# [.tok-p]#:#
[.tok-s2]#"userTask"#[.tok-p]#,# [.tok-nt]#"processDefinitionId"#
[.tok-p]#:# [.tok-s2]#"oneTaskProcess%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"processDefinitionUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"processInstanceId"# [.tok-p]#:# [.tok-s2]#"3"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/history/historic-process-instances/3"#[.tok-p]#,#
[.tok-nt]#"executionId"# [.tok-p]#:# [.tok-s2]#"4"#[.tok-p]#,#
[.tok-nt]#"taskId"# [.tok-p]#:# [.tok-s2]#"4"#[.tok-p]#,#
[.tok-nt]#"calledProcessInstanceId"# [.tok-p]#:#
[.tok-kc]#null#[.tok-p]#,# [.tok-nt]#"assignee"# [.tok-p]#:#
[.tok-s2]#"fozzie"#[.tok-p]#,# [.tok-nt]#"startTime"# [.tok-p]#:#
[.tok-s2]#"2013-04-17T10:17:43.902+0000"#[.tok-p]#,#
[.tok-nt]#"endTime"# [.tok-p]#:#
[.tok-s2]#"2013-04-18T14:06:32.715+0000"#[.tok-p]#,#
[.tok-nt]#"durationInMillis"# [.tok-p]#:# [.tok-mi]#86400056#[.tok-p]#,#
[.tok-nt]#"tenantId"#[.tok-p]#:#[.tok-kc]#null# [.tok-p]#}# [.tok-p]#],#
[.tok-nt]#"total"#[.tok-p]#:# [.tok-mi]#1#[.tok-p]#,#
[.tok-nt]#"start"#[.tok-p]#:# [.tok-mi]#0#[.tok-p]#,#
[.tok-nt]#"sort"#[.tok-p]#:# [.tok-s2]#"name"#[.tok-p]#,#
[.tok-nt]#"order"#[.tok-p]#:# [.tok-s2]#"asc"#[.tok-p]#,#
[.tok-nt]#"size"#[.tok-p]#:# [.tok-mi]#1# [.tok-p]#}#

[[restHistoricVariableInstancesGet]]
== 13.8.19. List of historic variable instances

....
GET history/historic-variable-instances
....

.Table 193. List of historic variable instances - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|processInstanceId |No |String |The process instance id of the historic
variable instance.

|taskId |No |String |The task id of the historic variable instance.

|excludeTaskVariables |No |Boolean |Indication to exclude the task
variables from the result.

|variableName |No |String |The variable name of the historic variable
instance.

|variableNameLike |No |String |The variable name using the _like_
operator for the historic variable instance.
|===

.Table 194. List of historic variable instances - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates that historic variable instances could be queried.

|400 |Indicates an parameter was passed in the wrong format. The
status-message contains additional information.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
----

[.tok-p]#\{# [.tok-nt]#"data"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"14"#[.tok-p]#,#
[.tok-nt]#"processInstanceId"# [.tok-p]#:# [.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/history/historic-process-instances/5"#[.tok-p]#,#
[.tok-nt]#"taskId"# [.tok-p]#:# [.tok-s2]#"6"#[.tok-p]#,#
[.tok-nt]#"variable"# [.tok-p]#:# [.tok-p]#\{# [.tok-nt]#"name"#
[.tok-p]#:# [.tok-s2]#"myVariable"#[.tok-p]#,#
[.tok-nt]#"variableScope"#[.tok-p]#,# [.tok-nt]#"global"#[.tok-p]#,#
[.tok-nt]#"value"# [.tok-p]#:# [.tok-s2]#"test"# [.tok-p]#}# [.tok-p]#}#
[.tok-p]#],# [.tok-nt]#"total"#[.tok-p]#:# [.tok-mi]#1#[.tok-p]#,#
[.tok-nt]#"start"#[.tok-p]#:# [.tok-mi]#0#[.tok-p]#,#
[.tok-nt]#"sort"#[.tok-p]#:# [.tok-s2]#"name"#[.tok-p]#,#
[.tok-nt]#"order"#[.tok-p]#:# [.tok-s2]#"asc"#[.tok-p]#,#
[.tok-nt]#"size"#[.tok-p]#:# [.tok-mi]#1# [.tok-p]#}#

[[_query_for_historic_variable_instances]]
== 13.8.20. Query for historic variable instances

....
POST query/historic-variable-instances
....

*Request body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
----

[.tok-p]#\{# [.tok-nt]#"processDefinitionId"# [.tok-p]#:#
[.tok-s2]#"oneTaskProcess%3A1%3A4"#[.tok-p]#,# [.tok-err]#...#
[.tok-nt]#"variables"# [.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"name"# [.tok-p]#:# [.tok-s2]#"myVariable"#[.tok-p]#,#
[.tok-nt]#"value"# [.tok-p]#:# [.tok-mi]#1234#[.tok-p]#,#
[.tok-nt]#"operation"# [.tok-p]#:# [.tok-s2]#"equals"#[.tok-p]#,#
[.tok-nt]#"type"# [.tok-p]#:# [.tok-s2]#"long"# [.tok-p]#}# [.tok-p]#]#
[.tok-p]#}#

All supported JSON parameter fields allowed are exactly the same as the
parameters found for link:#restHistoricVariableInstancesGet[getting a
collection of historic process instances], but passed in as JSON-body
arguments rather than URL-parameters to allow for more advanced querying
and preventing errors with request-uri’s that are too long. On top of
that, the query allows for filtering based on process variables. The
`variables` property is a JSON-array containing objects with the format
link:#restQueryVariable[as described here.]

.Table 195. Query for historic variable instances - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates request was successful and the tasks are returned

|400 |Indicates an parameter was passed in the wrong format. The
status-message contains additional information.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
----

[.tok-p]#\{# [.tok-nt]#"data"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"14"#[.tok-p]#,#
[.tok-nt]#"processInstanceId"# [.tok-p]#:# [.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/history/historic-process-instances/5"#[.tok-p]#,#
[.tok-nt]#"taskId"# [.tok-p]#:# [.tok-s2]#"6"#[.tok-p]#,#
[.tok-nt]#"variable"# [.tok-p]#:# [.tok-p]#\{# [.tok-nt]#"name"#
[.tok-p]#:# [.tok-s2]#"myVariable"#[.tok-p]#,#
[.tok-nt]#"variableScope"#[.tok-p]#,# [.tok-nt]#"global"#[.tok-p]#,#
[.tok-nt]#"value"# [.tok-p]#:# [.tok-s2]#"test"# [.tok-p]#}# [.tok-p]#}#
[.tok-p]#],# [.tok-nt]#"total"#[.tok-p]#:# [.tok-mi]#1#[.tok-p]#,#
[.tok-nt]#"start"#[.tok-p]#:# [.tok-mi]#0#[.tok-p]#,#
[.tok-nt]#"sort"#[.tok-p]#:# [.tok-s2]#"name"#[.tok-p]#,#
[.tok-nt]#"order"#[.tok-p]#:# [.tok-s2]#"asc"#[.tok-p]#,#
[.tok-nt]#"size"#[.tok-p]#:# [.tok-mi]#1# [.tok-p]#}#

====Get the binary data for a historic task instance variable

....
GET history/historic-variable-instances/{varInstanceId}/data
....

.Table 196. Get the binary data for a historic task instance variable -
Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the variable instance was found and the requested
variable data is returned.

|404 |Indicates the requested variable instance was not found or the
variable instance doesn’t have a variable with the given name or the
variable doesn’t have a binary stream available. Status message provides
additional information.
|===

*Success response body:*

The response body contains the binary value of the variable. When the
variable is of type `binary`, the content-type of the response is set to
`application/octet-stream`, regardless of the content of the variable or
the request accept-type header. In case of `serializable`,
`application/x-java-serialized-object` is used as content-type.

[[restHistoricDetailGet]]
== 13.8.21. Get historic detail

....
GET history/historic-detail
....

.Table 197. Get historic detail - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|id |No |String |The id of the historic detail.

|processInstanceId |No |String |The process instance id of the historic
detail.

|executionId |No |String |The execution id of the historic detail.

|activityInstanceId |No |String |The activity instance id of the
historic detail.

|taskId |No |String |The task id of the historic detail.

|selectOnlyFormProperties |No |Boolean |Indication to only return form
properties in the result.

|selectOnlyVariableUpdates |No |Boolean |Indication to only return
variable updates in the result.
|===

.Table 198. Get historic detail - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates that historic detail could be queried.

|400 |Indicates an parameter was passed in the wrong format. The
status-message contains additional information.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
----

[.tok-p]#\{# [.tok-nt]#"data"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"26"#[.tok-p]#,#
[.tok-nt]#"processInstanceId"# [.tok-p]#:# [.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/history/historic-process-instances/5"#[.tok-p]#,#
[.tok-nt]#"executionId"# [.tok-p]#:# [.tok-s2]#"6"#[.tok-p]#,#
[.tok-nt]#"activityInstanceId"#[.tok-p]#,# [.tok-nt]#"10"#[.tok-p]#,#
[.tok-nt]#"taskId"# [.tok-p]#:# [.tok-s2]#"6"#[.tok-p]#,#
[.tok-nt]#"taskUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/history/historic-task-instances/6"#[.tok-p]#,#
[.tok-nt]#"time"# [.tok-p]#:#
[.tok-s2]#"2013-04-17T10:17:43.902+0000"#[.tok-p]#,#
[.tok-nt]#"detailType"# [.tok-p]#:#
[.tok-s2]#"variableUpdate"#[.tok-p]#,# [.tok-nt]#"revision"# [.tok-p]#:#
[.tok-mi]#2#[.tok-p]#,# [.tok-nt]#"variable"# [.tok-p]#:# [.tok-p]#\{#
[.tok-nt]#"name"# [.tok-p]#:# [.tok-s2]#"myVariable"#[.tok-p]#,#
[.tok-nt]#"variableScope"#[.tok-p]#,# [.tok-nt]#"global"#[.tok-p]#,#
[.tok-nt]#"value"# [.tok-p]#:# [.tok-s2]#"test"# [.tok-p]#},#
[.tok-nt]#"propertyId"#[.tok-p]#:# [.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"propertyValue"#[.tok-p]#:# [.tok-kc]#null# [.tok-p]#}#
[.tok-p]#],# [.tok-nt]#"total"#[.tok-p]#:# [.tok-mi]#1#[.tok-p]#,#
[.tok-nt]#"start"#[.tok-p]#:# [.tok-mi]#0#[.tok-p]#,#
[.tok-nt]#"sort"#[.tok-p]#:# [.tok-s2]#"name"#[.tok-p]#,#
[.tok-nt]#"order"#[.tok-p]#:# [.tok-s2]#"asc"#[.tok-p]#,#
[.tok-nt]#"size"#[.tok-p]#:# [.tok-mi]#1# [.tok-p]#}#

[[_query_for_historic_details]]
== 13.8.22. Query for historic details

....
POST query/historic-detail
....

*Request body:*

....
{
  "processInstanceId" : "5",
}
....

All supported JSON parameter fields allowed are exactly the same as the
parameters found for link:#restHistoricDetailGet[getting a collection of
historic process instances], but passed in as JSON-body arguments rather
than URL-parameters to allow for more advanced querying and preventing
errors with request-uri’s that are too long.

.Table 199. Query for historic details - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates request was successful and the historic details are
returned

|400 |Indicates an parameter was passed in the wrong format. The
status-message contains additional information.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
----

[.tok-p]#\{# [.tok-nt]#"data"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"26"#[.tok-p]#,#
[.tok-nt]#"processInstanceId"# [.tok-p]#:# [.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/history/historic-process-instances/5"#[.tok-p]#,#
[.tok-nt]#"executionId"# [.tok-p]#:# [.tok-s2]#"6"#[.tok-p]#,#
[.tok-nt]#"activityInstanceId"#[.tok-p]#,# [.tok-nt]#"10"#[.tok-p]#,#
[.tok-nt]#"taskId"# [.tok-p]#:# [.tok-s2]#"6"#[.tok-p]#,#
[.tok-nt]#"taskUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/history/historic-task-instances/6"#[.tok-p]#,#
[.tok-nt]#"time"# [.tok-p]#:#
[.tok-s2]#"2013-04-17T10:17:43.902+0000"#[.tok-p]#,#
[.tok-nt]#"detailType"# [.tok-p]#:#
[.tok-s2]#"variableUpdate"#[.tok-p]#,# [.tok-nt]#"revision"# [.tok-p]#:#
[.tok-mi]#2#[.tok-p]#,# [.tok-nt]#"variable"# [.tok-p]#:# [.tok-p]#\{#
[.tok-nt]#"name"# [.tok-p]#:# [.tok-s2]#"myVariable"#[.tok-p]#,#
[.tok-nt]#"variableScope"#[.tok-p]#,# [.tok-nt]#"global"#[.tok-p]#,#
[.tok-nt]#"value"# [.tok-p]#:# [.tok-s2]#"test"# [.tok-p]#},#
[.tok-nt]#"propertyId"# [.tok-p]#:# [.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"propertyValue"# [.tok-p]#:# [.tok-kc]#null# [.tok-p]#}#
[.tok-p]#],# [.tok-nt]#"total"#[.tok-p]#:# [.tok-mi]#1#[.tok-p]#,#
[.tok-nt]#"start"#[.tok-p]#:# [.tok-mi]#0#[.tok-p]#,#
[.tok-nt]#"sort"#[.tok-p]#:# [.tok-s2]#"name"#[.tok-p]#,#
[.tok-nt]#"order"#[.tok-p]#:# [.tok-s2]#"asc"#[.tok-p]#,#
[.tok-nt]#"size"#[.tok-p]#:# [.tok-mi]#1# [.tok-p]#}#

[[_get_the_binary_data_for_a_historic_detail_variable]]
== 13.8.23. Get the binary data for a historic detail variable

....
GET history/historic-detail/{detailId}/data
....

.Table 200. Get the binary data for a historic detail variable -
Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the historic detail instance was found and the requested
variable data is returned.

|404 |Indicates the requested historic detail instance was not found or
the historic detail instance doesn’t have a variable with the given name
or the variable doesn’t have a binary stream available. Status message
provides additional information.
|===

*Success response body:*

The response body contains the binary value of the variable. When the
variable is of type `binary`, the content-type of the response is set to
`application/octet-stream`, regardless of the content of the variable or
the request accept-type header. In case of `serializable`,
`application/x-java-serialized-object` is used as content-type.

[[_forms]]
== 13.9. Forms

[[_get_form_data]]
=== 13.9.1. Get form data

....
GET form/form-data
....

.Table 201. Get form data - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|taskId |Yes (if no processDefinitionId) |String |The task id
corresponding to the form data that needs to be retrieved.

|processDefinitionId |Yes (if no taskId) |String |The process definition
id corresponding to the start event form data that needs to be
retrieved.
|===

.Table 202. Get form data - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates that form data could be queried.
|404 |Indicates that form data could not be found.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
----

[.tok-p]#\{# [.tok-nt]#"data"#[.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"formKey"# [.tok-p]#:# [.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"deploymentId"# [.tok-p]#:# [.tok-s2]#"2"#[.tok-p]#,#
[.tok-nt]#"processDefinitionId"# [.tok-p]#:# [.tok-s2]#"3"#[.tok-p]#,#
[.tok-nt]#"processDefinitionUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/repository/process-definition/3"#[.tok-p]#,#
[.tok-nt]#"taskId"# [.tok-p]#:# [.tok-s2]#"6"#[.tok-p]#,#
[.tok-nt]#"taskUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/runtime/task/6"#[.tok-p]#,#
[.tok-nt]#"formProperties"# [.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"room"#[.tok-p]#,#
[.tok-nt]#"name"# [.tok-p]#:# [.tok-s2]#"Room"#[.tok-p]#,#
[.tok-nt]#"type"# [.tok-p]#:# [.tok-s2]#"string"#[.tok-p]#,#
[.tok-nt]#"value"# [.tok-p]#:# [.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"readable"# [.tok-p]#:# [.tok-kc]#true#[.tok-p]#,#
[.tok-nt]#"writable"# [.tok-p]#:# [.tok-kc]#true#[.tok-p]#,#
[.tok-nt]#"required"# [.tok-p]#:# [.tok-kc]#true#[.tok-p]#,#
[.tok-nt]#"datePattern"# [.tok-p]#:# [.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"enumValues"# [.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"normal"#[.tok-p]#,#
[.tok-nt]#"name"# [.tok-p]#:# [.tok-s2]#"Normal bed"# [.tok-p]#},#
[.tok-p]#\{# [.tok-nt]#"id"# [.tok-p]#:#
[.tok-s2]#"kingsize"#[.tok-p]#,# [.tok-nt]#"name"# [.tok-p]#:#
[.tok-s2]#"Kingsize bed"# [.tok-p]#},# [.tok-p]#]# [.tok-p]#}#
[.tok-p]#]# [.tok-p]#}# [.tok-p]#],# [.tok-nt]#"total"#[.tok-p]#:#
[.tok-mi]#1#[.tok-p]#,# [.tok-nt]#"start"#[.tok-p]#:#
[.tok-mi]#0#[.tok-p]#,# [.tok-nt]#"sort"#[.tok-p]#:#
[.tok-s2]#"name"#[.tok-p]#,# [.tok-nt]#"order"#[.tok-p]#:#
[.tok-s2]#"asc"#[.tok-p]#,# [.tok-nt]#"size"#[.tok-p]#:# [.tok-mi]#1#
[.tok-p]#}#

[[_submit_task_form_data]]
== 13.9.2. Submit task form data

....
POST form/form-data
....

*Request body for task form:*

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-p]#\{# [.tok-nt]#"taskId"# [.tok-p]#:# [.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"properties"# [.tok-p]#:# [.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"room"#[.tok-p]#,#
[.tok-nt]#"value"# [.tok-p]#:# [.tok-s2]#"normal"# [.tok-p]#}#
[.tok-p]#]# [.tok-p]#}#

*Request body for start event form:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
----

[.tok-p]#\{# [.tok-nt]#"processDefinitionId"# [.tok-p]#:#
[.tok-s2]#"5"#[.tok-p]#,# [.tok-nt]#"businessKey"# [.tok-p]#:#
[.tok-s2]#"myKey"#[.tok-p]#,# [.tok-nt]#"properties"# [.tok-p]#:#
[.tok-p]#[# [.tok-p]#\{# [.tok-nt]#"id"# [.tok-p]#:#
[.tok-s2]#"room"#[.tok-p]#,# [.tok-nt]#"value"# [.tok-p]#:#
[.tok-s2]#"normal"# [.tok-p]#}# [.tok-p]#]# [.tok-p]#}#

.Table 203. Submit task form data - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates request was successful and the form data was submitted

|400 |Indicates an parameter was passed in the wrong format. The
status-message contains additional information.
|===

*Success response body for start event form data (no response for task
form data):*

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-p]#\{# [.tok-nt]#"id"# [.tok-p]#:# [.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"url"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/history/historic-process-instances/5"#[.tok-p]#,#
[.tok-nt]#"businessKey"# [.tok-p]#:# [.tok-s2]#"myKey"#[.tok-p]#,#
[.tok-nt]#"suspended"#[.tok-p]#:# [.tok-kc]#false#[.tok-p]#,#
[.tok-nt]#"processDefinitionId"# [.tok-p]#:# [.tok-s2]#"3"#[.tok-p]#,#
[.tok-nt]#"processDefinitionUrl"# [.tok-p]#:#
[.tok-s2]#"http://localhost:8182/repository/process-definition/3"#[.tok-p]#,#
[.tok-nt]#"activityId"# [.tok-p]#:# [.tok-s2]#"myTask"# [.tok-p]#}#

[[_database_tables]]
== 13.10. Database tables

[[_list_of_tables]]
=== 13.10.1. List of tables

....
GET management/tables
....

.Table 204. List of tables - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the request was successful.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
----

[.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"ACT_RU_VARIABLE"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/management/tables/ACT_RU_VARIABLE"#[.tok-p]#,#
[.tok-nt]#"count"#[.tok-p]#:#[.tok-mi]#4528# [.tok-p]#},# [.tok-p]#\{#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"ACT_RU_EVENT_SUBSCR"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/management/tables/ACT_RU_EVENT_SUBSCR"#[.tok-p]#,#
[.tok-nt]#"count"#[.tok-p]#:#[.tok-mi]#3# [.tok-p]#}# [.tok-p]#]#

[[_get_a_single_table]]
== 13.10.2. Get a single table

....
GET management/tables/{tableName}
....

.Table 205. Get a single table - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|tableName |Yes |String |The name of the table to get.
|===

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-p]#\{#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"ACT_RE_PROCDEF"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/management/tables/ACT_RE_PROCDEF"#[.tok-p]#,#
[.tok-nt]#"count"#[.tok-p]#:#[.tok-mi]#60# [.tok-p]#}#

.Table 206. Get a single table - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the table exists and the table count is returned.
|404 |Indicates the requested table does not exist.
|===

[[_get_column_info_for_a_single_table]]
== 13.10.3. Get column info for a single table

....
GET management/tables/{tableName}/columns
....

.Table 207. Get column info for a single table - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|tableName |Yes |String |The name of the table to get.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
----

[.tok-p]#\{#
[.tok-nt]#"tableName"#[.tok-p]#:#[.tok-s2]#"ACT_RU_VARIABLE"#[.tok-p]#,#
[.tok-nt]#"columnNames"#[.tok-p]#:[# [.tok-s2]#"ID_"#[.tok-p]#,#
[.tok-s2]#"REV_"#[.tok-p]#,# [.tok-s2]#"TYPE_"#[.tok-p]#,#
[.tok-s2]#"NAME_"# [.tok-p]#],# [.tok-nt]#"columnTypes"#[.tok-p]#:[#
[.tok-s2]#"VARCHAR"#[.tok-p]#,# [.tok-s2]#"INTEGER"#[.tok-p]#,#
[.tok-s2]#"VARCHAR"#[.tok-p]#,# [.tok-s2]#"VARCHAR"# [.tok-p]#]#
[.tok-p]#}#

.Table 208. Get column info for a single table - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the table exists and the table column info is returned.
|404 |Indicates the requested table does not exist.
|===

[[_get_row_data_for_a_single_table]]
== 13.10.4. Get row data for a single table

....
GET management/tables/{tableName}/data
....

.Table 209. Get row data for a single table - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|tableName |Yes |String |The name of the table to get.
|===

.Table 210. Get row data for a single table - URL query parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|start |No |Integer |Index of the first row to fetch. Defaults to 0.

|size |No |Integer |Number of rows to fetch, starting from `start`.
Defaults to 10.

|orderAscendingColumn |No |String |Name of the column to sort the
resulting rows on, ascending.

|orderDescendingColumn |No |String |Name of the column to sort the
resulting rows on, descending.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
----

[.tok-p]#\{# [.tok-nt]#"total"#[.tok-p]#:#[.tok-mi]#3#[.tok-p]#,#
[.tok-nt]#"start"#[.tok-p]#:#[.tok-mi]#0#[.tok-p]#,#
[.tok-nt]#"sort"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"order"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"size"#[.tok-p]#:#[.tok-mi]#3#[.tok-p]#,#
[.tok-nt]#"data"#[.tok-p]#:[# [.tok-p]#\{#
[.tok-nt]#"TASK_ID_"#[.tok-p]#:#[.tok-s2]#"2"#[.tok-p]#,#
[.tok-nt]#"NAME_"#[.tok-p]#:#[.tok-s2]#"var1"#[.tok-p]#,#
[.tok-nt]#"REV_"#[.tok-p]#:#[.tok-mi]#1#[.tok-p]#,#
[.tok-nt]#"TEXT_"#[.tok-p]#:#[.tok-s2]#"123"#[.tok-p]#,#
[.tok-nt]#"LONG_"#[.tok-p]#:#[.tok-mi]#123#[.tok-p]#,#
[.tok-nt]#"ID_"#[.tok-p]#:#[.tok-s2]#"3"#[.tok-p]#,#
[.tok-nt]#"TYPE_"#[.tok-p]#:#[.tok-s2]#"integer"# [.tok-p]#}#
[.tok-p]#]# [.tok-p]#}#

.Table 211. Get row data for a single table - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the table exists and the table row data is returned.
|404 |Indicates the requested table does not exist.
|===

[[_engine]]
== 13.11. Engine

[[_get_engine_properties]]
=== 13.11.1. Get engine properties

....
GET management/properties
....

Returns a read-only view of the properties used internally in the
engine.

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-p]#\{#
[.tok-nt]#"next.dbid"#[.tok-p]#:#[.tok-s2]#"101"#[.tok-p]#,#
[.tok-nt]#"schema.history"#[.tok-p]#:#[.tok-s2]#"create(5.15)"#[.tok-p]#,#
[.tok-nt]#"schema.version"#[.tok-p]#:#[.tok-s2]#"5.15"# [.tok-p]#}#

.Table 212. Get engine properties - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the properties are returned.
|===

[[_get_engine_info]]
== 13.11.2. Get engine info

....
GET management/engine
....

Returns a read-only view of the engine that is used in this
REST-service.

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-p]#\{# [.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"default"#[.tok-p]#,#
[.tok-nt]#"version"#[.tok-p]#:#[.tok-s2]#"5.15"#[.tok-p]#,#
[.tok-nt]#"resourceUrl"#[.tok-p]#:#[.tok-s2]#"file://activiti/activiti.cfg.xml"#[.tok-p]#,#
[.tok-nt]#"exception"#[.tok-p]#:#[.tok-kc]#null# [.tok-p]#}#

.Table 213. Get engine info - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the engine info is returned.
|===

[[_runtime]]
== 13.12. Runtime

[[_signal_event_received]]
=== 13.12.1. Signal event received

....
POST runtime/signals
....

Notifies the engine that a signal event has been received, not
explicitly related to a specific execution.

*Body JSON:*

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
9
----

[.tok-p]#\{# [.tok-nt]#"signalName"#[.tok-p]#:# [.tok-s2]#"My
Signal"#[.tok-p]#,# [.tok-nt]#"tenantId"# [.tok-p]#:#
[.tok-s2]#"execute"#[.tok-p]#,# [.tok-nt]#"async"#[.tok-p]#:#
[.tok-kc]#true#[.tok-p]#,# [.tok-nt]#"variables"#[.tok-p]#:# [.tok-p]#[#
[.tok-p]#\{#[.tok-nt]#"name"#[.tok-p]#:# [.tok-s2]#"testVar"#[.tok-p]#,#
[.tok-nt]#"value"#[.tok-p]#:# [.tok-s2]#"This is a string"#[.tok-p]#}#
[.tok-p]#]# [.tok-p]#}#

.Table 214. Signal event received - JSON Body parameters
[width="100%",cols="34%,33%,33%",options="header",]
|===
|Parameter |Description |Required
|signalName |Name of the signal |Yes

|tenantId |ID of the tenant that the signal event should be processed in
|No

|async |If `true`, handling of the signal will happen asynchronously.
Return code will be `202 - Accepted` to indicate the request is accepted
but not yet executed. If `false`, handling the signal will be done
immediately and result (`200 - OK`) will only return after this
completed successfully. Defaults to `false` if omitted. |No

|variables |Array of variables (in the general variables format) to use
as payload to pass along with the signal. Cannot be used in case `async`
is set to `true`, this will result in an error. |No
|===

*Success response body:*

.Table 215. Signal event received - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicated signal has been processed and no errors occurred.

|202 |Indicated signal processing is queued as a job, ready to be
executed.

|400 |Signal not processed. The signal name is missing or variables are
used together with async, which is not allowed. Response body contains
additional information about the error.
|===

[[_jobs]]
== 13.13. Jobs

[[_get_a_single_job]]
=== 13.13.1. Get a single job

....
GET management/jobs/{jobId}
....

.Table 216. Get a single job - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|jobId |Yes |String |The id of the job to get.
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
----

[.tok-p]#\{# [.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"8"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/management/jobs/8"#[.tok-p]#,#
[.tok-nt]#"processInstanceId"#[.tok-p]#:#[.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/process-instances/5"#[.tok-p]#,#
[.tok-nt]#"processDefinitionId"#[.tok-p]#:#[.tok-s2]#"timerProcess:1:4"#[.tok-p]#,#
[.tok-nt]#"processDefinitionUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/repository/process-definitions/timerProcess%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"executionId"#[.tok-p]#:#[.tok-s2]#"7"#[.tok-p]#,#
[.tok-nt]#"executionUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/executions/7"#[.tok-p]#,#
[.tok-nt]#"retries"#[.tok-p]#:#[.tok-mi]#3#[.tok-p]#,#
[.tok-nt]#"exceptionMessage"#[.tok-p]#:#[.tok-kc]#null#[.tok-p]#,#
[.tok-nt]#"dueDate"#[.tok-p]#:#[.tok-s2]#"2013-06-04T22:05:05.474+0000"#[.tok-p]#,#
[.tok-nt]#"tenantId"#[.tok-p]#:#[.tok-kc]#null# [.tok-p]#}#

.Table 217. Get a single job - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the job exists and is returned.
|404 |Indicates the requested job does not exist.
|===

[[_delete_a_job]]
== 13.13.2. Delete a job

....
DELETE management/jobs/{jobId}
....

.Table 218. Delete a job - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|jobId |Yes |String |The id of the job to delete.
|===

.Table 219. Delete a job - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|204 |Indicates the job was found and has been deleted. Response-body is
intentionally empty.

|404 |Indicates the requested job was not found.
|===

[[_execute_a_single_job]]
== 13.13.3. Execute a single job

....
POST management/jobs/{jobId}
....

*Body JSON:*

[source,pygments,highlight]
----
1
2
3
----

[.tok-p]#\{# [.tok-nt]#"action"# [.tok-p]#:# [.tok-s2]#"execute"#
[.tok-p]#}#

.Table 220. Execute a single job - JSON Body parameters
[width="100%",cols="34%,33%,33%",options="header",]
|===
|Parameter |Description |Required
|action |Action to perform. Only `execute` is supported. |Yes
|===

.Table 221. Execute a single job - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|204 |Indicates the job was executed. Response-body is intentionally
empty.

|404 |Indicates the requested job was not found.

|500 |Indicates the an exception occurred while executing the job. The
status-description contains additional detail about the error. The full
error-stacktrace can be fetched later on if needed.
|===

[[_get_the_exception_stacktrace_for_a_job]]
== 13.13.4. Get the exception stacktrace for a job

....
GET management/jobs/{jobId}/exception-stacktrace
....

.Table 222. Get the exception stacktrace for a job - URL parameters
[width="100%",cols="34%,33%,33%",options="header",]
|===
|Parameter |Description |Required
|jobId |Id of the job to get the stacktrace for. |Yes
|===

.Table 223. Get the exception stacktrace for a job - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the requested job was not found and the stacktrace has
been returned. The response contains the raw stacktrace and always has a
Content-type of `text/plain`.

|404 |Indicates the requested job was not found or the job doesn’t have
an exception stacktrace. Status-description contains additional
information about the error.
|===

[[_get_a_list_of_jobs]]
== 13.13.5. Get a list of jobs

....
GET management/jobs
....

.Table 224. Get a list of jobs - URL query parameters
[width="100%",cols="34%,33%,33%",options="header",]
|===
|Parameter |Description |Type
|id |Only return job with the given id |String

|processInstanceId |Only return jobs part of a process with the given id
|String

|executionId |Only return jobs part of an execution with the given id
|String

|processDefinitionId |Only return jobs with the given process definition
id |String

|withRetriesLeft |If `true`, only return jobs with retries left. If
false, this parameter is ignored. |Boolean

|executable |If `true`, only return jobs which are executable. If false,
this parameter is ignored. |Boolean

|timersOnly |If `true`, only return jobs which are timers. If false,
this parameter is ignored. Cannot be used together with
`'messagesOnly'`. |Boolean

|messagesOnly |If `true`, only return jobs which are messages. If false,
this parameter is ignored. Cannot be used together with `'timersOnly'`
|Boolean

|withException |If `true`, only return jobs for which an exception
occurred while executing it. If false, this parameter is ignored.
|Boolean

|dueBefore |Only return jobs which are due to be executed before the
given date. Jobs without duedate are never returned using this
parameter. |Date

|dueAfter |Only return jobs which are due to be executed after the given
date. Jobs without duedate are never returned using this parameter.
|Date

|exceptionMessage |Only return jobs with the given exception message
|String

|tenantId |No |String

|Only return jobs with the given tenantId. |tenantIdLike |No

|String |Only return jobs with a tenantId like the given value.
|withoutTenantId

|No |Boolean |If `true`, only returns jobs without a tenantId set. If
`false`, the `withoutTenantId` parameter is ignored.

|sort |Field to sort results on, should be one of `id`, `dueDate`,
`executionId`, `processInstanceId`, `retries` or `tenantId`. |String
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
----

[.tok-p]#\{# [.tok-nt]#"data"#[.tok-p]#:[# [.tok-p]#\{#
[.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"13"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/management/jobs/13"#[.tok-p]#,#
[.tok-nt]#"processInstanceId"#[.tok-p]#:#[.tok-s2]#"5"#[.tok-p]#,#
[.tok-nt]#"processInstanceUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/process-instances/5"#[.tok-p]#,#
[.tok-nt]#"processDefinitionId"#[.tok-p]#:#[.tok-s2]#"timerProcess:1:4"#[.tok-p]#,#
[.tok-nt]#"processDefinitionUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/repository/process-definitions/timerProcess%3A1%3A4"#[.tok-p]#,#
[.tok-nt]#"executionId"#[.tok-p]#:#[.tok-s2]#"12"#[.tok-p]#,#
[.tok-nt]#"executionUrl"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/runtime/executions/12"#[.tok-p]#,#
[.tok-nt]#"retries"#[.tok-p]#:#[.tok-mi]#0#[.tok-p]#,#
[.tok-nt]#"exceptionMessage"#[.tok-p]#:#[.tok-s2]#"Can't find scripting
engine for 'unexistinglanguage'"#[.tok-p]#,#
[.tok-nt]#"dueDate"#[.tok-p]#:#[.tok-s2]#"2013-06-07T10:00:24.653+0000"#[.tok-p]#,#
[.tok-nt]#"tenantId"#[.tok-p]#:#[.tok-kc]#null# [.tok-p]#}# [.tok-p]#],#
[.tok-nt]#"total"#[.tok-p]#:#[.tok-mi]#2#[.tok-p]#,#
[.tok-nt]#"start"#[.tok-p]#:#[.tok-mi]#0#[.tok-p]#,#
[.tok-nt]#"sort"#[.tok-p]#:#[.tok-s2]#"id"#[.tok-p]#,#
[.tok-nt]#"order"#[.tok-p]#:#[.tok-s2]#"asc"#[.tok-p]#,#
[.tok-nt]#"size"#[.tok-p]#:#[.tok-mi]#2# [.tok-p]#}#

.Table 225. Get a list of jobs - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the requested jobs were returned.

|400 |Indicates an illegal value has been used in a url query parameter
or the both `'messagesOnly'` and `'timersOnly'` are used as parameters.
Status description contains additional details about the error.
|===

[[_users]]
== 13.14. Users

[[_get_a_single_user]]
=== 13.14.1. Get a single user

....
GET identity/users/{userId}
....

.Table 226. Get a single user - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|userId |Yes |String |The id of the user to get.
|===

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-p]#\{# [.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"testuser"#[.tok-p]#,#
[.tok-nt]#"firstName"#[.tok-p]#:#[.tok-s2]#"Fred"#[.tok-p]#,#
[.tok-nt]#"lastName"#[.tok-p]#:#[.tok-s2]#"McDonald"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/identity/users/testuser"#[.tok-p]#,#
[.tok-nt]#"email"#[.tok-p]#:#[.tok-s2]#"no-reply@activiti.org"#
[.tok-p]#}#

.Table 227. Get a single user - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the user exists and is returned.
|404 |Indicates the requested user does not exist.
|===

[[_get_a_list_of_users]]
== 13.14.2. Get a list of users

....
GET identity/users
....

.Table 228. Get a list of users - URL query parameters
[width="100%",cols="34%,33%,33%",options="header",]
|===
|Parameter |Description |Type
|id |Only return user with the given id |String

|firstName |Only return users with the given firstname |String

|lastName |Only return users with the given lastname |String

|email |Only return users with the given email |String

|firstNameLike |Only return userswith a firstname like the given value.
Use `%` as wildcard-character. |String

|lastNameLike |Only return users with a lastname like the given value.
Use `%` as wildcard-character. |String

|emailLike |Only return users with an email like the given value. Use
`%` as wildcard-character. |String

|memberOfGroup |Only return users which are a member of the given group.
|String

|potentialStarter |Only return users which are potential starters for a
process-definition with the given id. |String

|sort |Field to sort results on, should be one of `id`, `firstName`,
`lastname` or `email`. |String
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
----

[.tok-p]#\{# [.tok-nt]#"data"#[.tok-p]#:[# [.tok-p]#\{#
[.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"anotherUser"#[.tok-p]#,#
[.tok-nt]#"firstName"#[.tok-p]#:#[.tok-s2]#"Tijs"#[.tok-p]#,#
[.tok-nt]#"lastName"#[.tok-p]#:#[.tok-s2]#"Barrez"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/identity/users/anotherUser"#[.tok-p]#,#
[.tok-nt]#"email"#[.tok-p]#:#[.tok-s2]#"no-reply@alfresco.org"#
[.tok-p]#},# [.tok-p]#\{#
[.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"kermit"#[.tok-p]#,#
[.tok-nt]#"firstName"#[.tok-p]#:#[.tok-s2]#"Kermit"#[.tok-p]#,#
[.tok-nt]#"lastName"#[.tok-p]#:#[.tok-s2]#"the Frog"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/identity/users/kermit"#[.tok-p]#,#
[.tok-nt]#"email"#[.tok-p]#:#[.tok-kc]#null# [.tok-p]#},# [.tok-p]#\{#
[.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"testuser"#[.tok-p]#,#
[.tok-nt]#"firstName"#[.tok-p]#:#[.tok-s2]#"Fred"#[.tok-p]#,#
[.tok-nt]#"lastName"#[.tok-p]#:#[.tok-s2]#"McDonald"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/identity/users/testuser"#[.tok-p]#,#
[.tok-nt]#"email"#[.tok-p]#:#[.tok-s2]#"no-reply@activiti.org"#
[.tok-p]#}# [.tok-p]#],#
[.tok-nt]#"total"#[.tok-p]#:#[.tok-mi]#3#[.tok-p]#,#
[.tok-nt]#"start"#[.tok-p]#:#[.tok-mi]#0#[.tok-p]#,#
[.tok-nt]#"sort"#[.tok-p]#:#[.tok-s2]#"id"#[.tok-p]#,#
[.tok-nt]#"order"#[.tok-p]#:#[.tok-s2]#"asc"#[.tok-p]#,#
[.tok-nt]#"size"#[.tok-p]#:#[.tok-mi]#3# [.tok-p]#}#

.Table 229. Get a list of users - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the requested users were returned.
|===

[[_update_a_user]]
== 13.14.3. Update a user

....
PUT identity/users/{userId}
....

*Body JSON:*

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-p]#\{#
[.tok-nt]#"firstName"#[.tok-p]#:#[.tok-s2]#"Tijs"#[.tok-p]#,#
[.tok-nt]#"lastName"#[.tok-p]#:#[.tok-s2]#"Barrez"#[.tok-p]#,#
[.tok-nt]#"email"#[.tok-p]#:#[.tok-s2]#"no-reply@alfresco.org"#[.tok-p]#,#
[.tok-nt]#"password"#[.tok-p]#:#[.tok-s2]#"pass123"# [.tok-p]#}#

All request values are optional. For example, you can only include the
_firstName_ attribute in the request body JSON-object, only updating the
firstName of the user, leaving all other fields unaffected. When an
attribute is explicitly included and is set to null, the user-value will
be updated to null. Example: `{"firstName" : null}` will clear the
firstName of the user).

.Table 230. Update a user - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the user was updated.
|404 |Indicates the requested user was not found.
|409 |Indicates the requested user was updated simultaneously.
|===

*Success response body:* see response for `identity/users/{userId}`.

[[_create_a_user]]
== 13.14.4. Create a user

....
POST identity/users
....

*Body JSON:*

....
{
  "id":"tijs",
  "firstName":"Tijs",
  "lastName":"Barrez",
  "email":"no-reply@alfresco.org",
  "password":"pass123"
}
....

.Table 231. Create a user - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|201 |Indicates the user was created.
|400 |Indicates the id of the user was missing.
|===

*Success response body:* see response for `identity/users/{userId}`.

[[_delete_a_user]]
== 13.14.5. Delete a user

....
DELETE identity/users/{userId}
....

.Table 232. Delete a user - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|userId |Yes |String |The id of the user to delete.
|===

.Table 233. Delete a user - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|204 |Indicates the user was found and has been deleted. Response-body
is intentionally empty.

|404 |Indicates the requested user was not found.
|===

[[_get_a_user_s_picture]]
== 13.14.6. Get a user’s picture

....
GET identity/users/{userId}/picture
....

.Table 234. Get a user’s picture - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|userId |Yes |String |The id of the user to get the picture for.
|===

*Response Body:*

The response body contains the raw picture data, representing the user’s
picture. The Content-type of the response corresponds to the mimeType
that was set when creating the picture.

.Table 235. Get a user’s picture - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the user was found and has a picture, which is returned
in the body.

|404 |Indicates the requested user was not found or the user does not
have a profile picture. Status-description contains additional
information about the error.
|===

[[_updating_a_user_s_picture]]
== 13.14.7. Updating a user’s picture

....
GET identity/users/{userId}/picture
....

.Table 236. Updating a user’s picture - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|userId |Yes |String |The id of the user to get the picture for.
|===

*Request body:*

The request should be of type `multipart/form-data`. There should be a
single file-part included with the binary value of the picture. On top
of that, the following additional form-fields can be present:

* `mimeType`: Optional mime-type for the uploaded picture. If omitted,
the default of `image/jpeg` is used as a mime-type for the picture.

.Table 237. Updating a user’s picture - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the user was found and the picture has been updated. The
response-body is left empty intentionally.

|404 |Indicates the requested user was not found.
|===

[[_list_a_user_s_info]]
== 13.14.8. List a user’s info

....
PUT identity/users/{userId}/info
....

.Table 238. List a user’s info - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|userId |Yes |String |The id of the user to get the info for.
|===

*Response Body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
----

[.tok-p]#[# [.tok-p]#\{#
[.tok-nt]#"key"#[.tok-p]#:#[.tok-s2]#"key1"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/identity/users/testuser/info/key1"#
[.tok-p]#},# [.tok-p]#\{#
[.tok-nt]#"key"#[.tok-p]#:#[.tok-s2]#"key2"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/identity/users/testuser/info/key2"#
[.tok-p]#}# [.tok-p]#]#

.Table 239. List a user’s info - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the user was found and list of info (key and url) is
returned.

|404 |Indicates the requested user was not found.
|===

[[_get_a_user_s_info]]
== 13.14.9. Get a user’s info

....
GET identity/users/{userId}/info/{key}
....

.Table 240. Get a user’s info - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|userId |Yes |String |The id of the user to get the info for.
|key |Yes |String |The key of the user info to get.
|===

*Response Body:*

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-p]#\{# [.tok-nt]#"key"#[.tok-p]#:#[.tok-s2]#"key1"#[.tok-p]#,#
[.tok-nt]#"value"#[.tok-p]#:#[.tok-s2]#"Value 1"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/identity/users/testuser/info/key1"#
[.tok-p]#}#

.Table 241. Get a user’s info - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the user was found and the user has info for the given
key..

|404 |Indicates the requested user was not found or the user doesn’t
have info for the given key. Status description contains additional
information about the error.
|===

[[_update_a_user_s_info]]
== 13.14.10. Update a user’s info

....
PUT identity/users/{userId}/info/{key}
....

.Table 242. Update a user’s info - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|userId |Yes |String |The id of the user to update the info for.
|key |Yes |String |The key of the user info to update.
|===

*Request Body:*

[source,pygments,highlight]
----
1
2
3
----

[.tok-p]#\{# [.tok-nt]#"value"#[.tok-p]#:#[.tok-s2]#"The updated value"#
[.tok-p]#}#

*Response Body:*

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-p]#\{# [.tok-nt]#"key"#[.tok-p]#:#[.tok-s2]#"key1"#[.tok-p]#,#
[.tok-nt]#"value"#[.tok-p]#:#[.tok-s2]#"The updated value"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/identity/users/testuser/info/key1"#
[.tok-p]#}#

.Table 243. Update a user’s info - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the user was found and the info has been updated.

|400 |Indicates the value was missing from the request body.

|404 |Indicates the requested user was not found or the user doesn’t
have info for the given key. Status description contains additional
information about the error.
|===

[[_create_a_new_user_s_info_entry]]
== 13.14.11. Create a new user’s info entry

....
POST identity/users/{userId}/info
....

.Table 244. Create a new user’s info entry - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|userId |Yes |String |The id of the user to create the info for.
|===

*Request Body:*

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-p]#\{# [.tok-nt]#"key"#[.tok-p]#:#[.tok-s2]#"key1"#[.tok-p]#,#
[.tok-nt]#"value"#[.tok-p]#:#[.tok-s2]#"The value"# [.tok-p]#}#

*Response Body:*

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-p]#\{# [.tok-nt]#"key"#[.tok-p]#:#[.tok-s2]#"key1"#[.tok-p]#,#
[.tok-nt]#"value"#[.tok-p]#:#[.tok-s2]#"The value"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/identity/users/testuser/info/key1"#
[.tok-p]#}#

.Table 245. Create a new user’s info entry - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|201 |Indicates the user was found and the info has been created.

|400 |Indicates the key or value was missing from the request body.
Status description contains additional information about the error.

|404 |Indicates the requested user was not found.

|409 |Indicates there is already an info-entry with the given key for
the user, update the resource instance (`PUT`).
|===

[[_delete_a_user_s_info]]
== 13.14.12. Delete a user’s info

....
DELETE identity/users/{userId}/info/{key}
....

.Table 246. Delete a user’s info - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|userId |Yes |String |The id of the user to delete the info for.
|key |Yes |String |The key of the user info to delete.
|===

.Table 247. Delete a user’s info - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|204 |Indicates the user was found and the info for the given key has
been deleted. Response body is left empty intentionally.

|404 |Indicates the requested user was not found or the user doesn’t
have info for the given key. Status description contains additional
information about the error.
|===

[[_groups]]
== 13.15. Groups

[[_get_a_single_group]]
=== 13.15.1. Get a single group

....
GET identity/groups/{groupId}
....

.Table 248. Get a single group - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|groupId |Yes |String |The id of the group to get.
|===

*Success response body:*

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-p]#\{# [.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"testgroup"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/identity/groups/testgroup"#[.tok-p]#,#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"Test group"#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"Test type"# [.tok-p]#}#

.Table 249. Get a single group - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the group exists and is returned.
|404 |Indicates the requested group does not exist.
|===

[[_get_a_list_of_groups]]
== 13.15.2. Get a list of groups

....
GET identity/groups
....

.Table 250. Get a list of groups - URL query parameters
[width="100%",cols="34%,33%,33%",options="header",]
|===
|Parameter |Description |Type
|id |Only return group with the given id |String

|name |Only return groups with the given name |String

|type |Only return groups with the given type |String

|nameLike |Only return groups with a name like the given value. Use `%`
as wildcard-character. |String

|member |Only return groups which have a member with the given username.
|String

|potentialStarter |Only return groups which members are potential
starters for a process-definition with the given id. |String

|sort |Field to sort results on, should be one of `id`, `name` or
`type`. |String
|===

*Success response body:*

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
----

[.tok-p]#\{# [.tok-nt]#"data"#[.tok-p]#:[# [.tok-p]#\{#
[.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"testgroup"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/identity/groups/testgroup"#[.tok-p]#,#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"Test group"#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"Test type"# [.tok-p]#}#
[.tok-p]#],# [.tok-nt]#"total"#[.tok-p]#:#[.tok-mi]#3#[.tok-p]#,#
[.tok-nt]#"start"#[.tok-p]#:#[.tok-mi]#0#[.tok-p]#,#
[.tok-nt]#"sort"#[.tok-p]#:#[.tok-s2]#"id"#[.tok-p]#,#
[.tok-nt]#"order"#[.tok-p]#:#[.tok-s2]#"asc"#[.tok-p]#,#
[.tok-nt]#"size"#[.tok-p]#:#[.tok-mi]#3# [.tok-p]#}#

.Table 251. Get a list of groups - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the requested groups were returned.
|===

[[_update_a_group]]
== 13.15.3. Update a group

....
PUT identity/groups/{groupId}
....

*Body JSON:*

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-p]#\{# [.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"Test
group"#[.tok-p]#,# [.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"Test type"#
[.tok-p]#}#

All request values are optional. For example, you can only include the
_name_ attribute in the request body JSON-object, only updating the name
of the group, leaving all other fields unaffected. When an attribute is
explicitly included and is set to null, the group-value will be updated
to null.

.Table 252. Update a group - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|200 |Indicates the group was updated.
|404 |Indicates the requested group was not found.
|409 |Indicates the requested group was updated simultaneously.
|===

*Success response body:* see response for `identity/groups/{groupId}`.

[[_create_a_group]]
== 13.15.4. Create a group

....
POST identity/groups
....

*Body JSON:*

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-p]#\{# [.tok-nt]#"id"#[.tok-p]#:#[.tok-s2]#"testgroup"#[.tok-p]#,#
[.tok-nt]#"name"#[.tok-p]#:#[.tok-s2]#"Test group"#[.tok-p]#,#
[.tok-nt]#"type"#[.tok-p]#:#[.tok-s2]#"Test type"# [.tok-p]#}#

.Table 253. Create a group - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|201 |Indicates the group was created.
|400 |Indicates the id of the group was missing.
|===

*Success response body:* see response for `identity/groups/{groupId}`.

[[_delete_a_group]]
== 13.15.5. Delete a group

....
DELETE identity/groups/{groupId}
....

.Table 254. Delete a group - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|groupId |Yes |String |The id of the group to delete.
|===

.Table 255. Delete a group - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|204 |Indicates the group was found and has been deleted. Response-body
is intentionally empty.

|404 |Indicates the requested group was not found.
|===

[[_get_members_in_a_group]]
== 13.15.6. Get members in a group

There is no GET allowed on `identity/groups/members`. Use the
`identity/users?memberOfGroup=sales` URL to get all users that are part
of a particular group.

[[_add_a_member_to_a_group]]
== 13.15.7. Add a member to a group

....
POST identity/groups/{groupId}/members
....

.Table 256. Add a member to a group - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|groupId |Yes |String |The id of the group to add a member to.
|===

*Body JSON:*

[source,pygments,highlight]
----
1
2
3
----

[.tok-p]#\{# [.tok-nt]#"userId"#[.tok-p]#:#[.tok-s2]#"kermit"#
[.tok-p]#}#

.Table 257. Add a member to a group - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|201 |Indicates the group was found and the member has been added.
|404 |Indicates the userId was not included in the request body.
|404 |Indicates the requested group was not found.
|409 |Indicates the requested user is already a member of the group.
|===

*Response Body:*

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-p]#\{#
[.tok-nt]#"userId"#[.tok-p]#:#[.tok-s2]#"kermit"#[.tok-p]#,#
[.tok-nt]#"groupId"#[.tok-p]#:#[.tok-s2]#"sales"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/identity/groups/sales/members/kermit"#
[.tok-p]#}#

[[_delete_a_member_from_a_group]]
== 13.15.8. Delete a member from a group

....
DELETE identity/groups/{groupId}/members/{userId}
....

.Table 258. Delete a member from a group - URL parameters
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Parameter |Required |Value |Description
|groupId |Yes |String |The id of the group to remove a member from.
|userId |Yes |String |The id of the user to remove.
|===

.Table 259. Delete a member from a group - Response codes
[width="100%",cols="50%,50%",options="header",]
|===
|Response code |Description
|204 |Indicates the group was found and the member has been deleted. The
response body is left empty intentionally.

|404 |Indicates the requested group was not found or that the user is
not a member of the group. The status description contains additional
information about the error.
|===

*Response Body:*

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-p]#\{#
[.tok-nt]#"userId"#[.tok-p]#:#[.tok-s2]#"kermit"#[.tok-p]#,#
[.tok-nt]#"groupId"#[.tok-p]#:#[.tok-s2]#"sales"#[.tok-p]#,#
[.tok-nt]#"url"#[.tok-p]#:#[.tok-s2]#"http://localhost:8182/identity/groups/sales/members/kermit"#
[.tok-p]#}#

[[cdiintegration]]
== 14. CDI integration

The activiti-cdi modules leverages both the configurability of Activiti
and the extensibility of cdi. The most prominent features of
activiti-cdi are:

* Support for @BusinessProcessScoped beans (Cdi beans the lifecycle of
which is bound to a process instance),
* A custom El-Resolver for resolving Cdi beans (including EJBs) from the
process,
* Declarative control over a process instance using annotations,
* Activiti is hooked-up to the cdi event bus,
* Works with both Java EE and Java SE, works with Spring,
* Support for unit testing.

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<dependency>#
[.tok-nt]##<groupId>##org.activiti[.tok-nt]##</groupId>##
[.tok-nt]##<artifactId>##activiti-cdi[.tok-nt]##</artifactId>##
[.tok-nt]##<version>##5.x[.tok-nt]##</version>##
[.tok-nt]#</dependency>#

[[_setting_up_activiti_cdi]]
== 14.1. Setting up activiti-cdi

Activiti cdi can be setup in different environments. In this section we
briefly walk through the configuration options.

[[_looking_up_a_process_engine]]
=== 14.1.1. Looking up a Process Engine

The cdi extension needs to get access to a ProcessEngine. To achieve
this, an implementation of the interface
`org.activiti.cdi.spi.ProcessEngineLookup` is looked up at runtime. The
cdi module ships with a default implementation named
`org.activiti.cdi.impl.LocalProcessEngineLookup`, which uses the
`ProcessEngines`-Utility class for looking up the ProcessEngine. In the
default configuration `ProcessEngines#NAME_DEFAULT` is used to lookup
the ProcessEngine. This class might be subclassed to set a custom name.
NOTE: needs an `activiti.cfg.xml` configuration on the classpath.

Activiti cdi uses a java.util.ServiceLoader SPI for resolving an
instance of `org.activiti.cdi.spi.ProcessEngineLookup`. In order to
provide a custom implementation of the interface, we need to add a plain
text file named
`META-INF/services/org.activiti.cdi.spi.ProcessEngineLookup` to our
deployment, in which we specify the fully qualified classname of the
implementation.

[width="100%",cols="50%,50%",]
|===
|__ a|
If you do not provide a custom
`org.activiti.cdi.spi.ProcessEngineLookup` implementation, Activiti will
use the default `LocalProcessEngineLookup` implementation. In that case,
all you need to do is providing a activiti.cfg.xml file on the classpath
(see next section).

|===

[[_configuring_the_process_engine]]
=== 14.1.2. Configuring the Process Engine

Configuration depends on the selected ProcessEngineLookup-Strategy (cf.
previous section). Here, we focus on the configuration options available
in combination with the LocalProcessEngineLookup, which requires us to
provide a Spring activiti.cfg.xml file on the classpath.

Activiti offers different ProcessEngineConfiguration implementations
mostly dependent on the underlying transaction management strategy. The
activiti-cdi module is not concerned with transactions, which means that
potentially any transaction management strategy can be used (even the
Spring transaction abstraction). As a convenience, the cdi-module
provides two custom ProcessEngineConfiguration implementations:

* `org.activiti.cdi.CdiJtaProcessEngineConfiguration`: a subclass of the
activiti JtaProcessEngineConfiguration, can be used if JTA-managed
transactions should be used for Activiti
* `org.activiti.cdi.CdiStandaloneProcessEngineConfiguration`: a subclass
of the activiti StandaloneProcessEngineConfiguration, can be used if
plain JDBC transactions should be used for Activiti. The following is an
example activiti.cfg.xml file for JBoss 7:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
----

[.tok-cp]#<?xml version="1.0" encoding="UTF-8"?># [.tok-nt]#<beans#
[.tok-na]#xmlns=#[.tok-s]#"http://www.springframework.org/schema/beans"#
[.tok-na]#xmlns:xsi=#[.tok-s]#"http://www.w3.org/2001/XMLSchema-instance"#
[.tok-na]#xsi:schemaLocation=#[.tok-s]#"http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd"#[.tok-nt]#>#
[.tok-c]#<!-- lookup the JTA-Transaction manager --># [.tok-nt]#<bean#
[.tok-na]#id=#[.tok-s]#"transactionManager"#
[.tok-na]#class=#[.tok-s]#"org.springframework.jndi.JndiObjectFactoryBean"#[.tok-nt]#>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"jndiName"#
[.tok-na]#value=#[.tok-s]#"java:jboss/TransactionManager"#[.tok-nt]#></property>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"resourceRef"#
[.tok-na]#value=#[.tok-s]#"true"# [.tok-nt]#/># [.tok-nt]#</bean>#
[.tok-c]#<!-- process engine configuration --># [.tok-nt]#<bean#
[.tok-na]#id=#[.tok-s]#"processEngineConfiguration"#
[.tok-na]#class=#[.tok-s]#"org.activiti.cdi.CdiJtaProcessEngineConfiguration"#[.tok-nt]#>#
[.tok-c]#<!-- lookup the default Jboss datasource -->#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"dataSourceJndiName"#
[.tok-na]#value=#[.tok-s]#"java:jboss/datasources/ExampleDS"#
[.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"databaseType"# [.tok-na]#value=#[.tok-s]#"h2"#
[.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"transactionManager"#
[.tok-na]#ref=#[.tok-s]#"transactionManager"# [.tok-nt]#/>#
[.tok-c]#<!-- using externally managed transactions -->#
[.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"transactionsExternallyManaged"#
[.tok-na]#value=#[.tok-s]#"true"# [.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"databaseSchemaUpdate"#
[.tok-na]#value=#[.tok-s]#"true"# [.tok-nt]#/># [.tok-nt]#</bean>#
[.tok-nt]#</beans>#

And this is how it would look like for Glassfish 3.1.1 (assuming a
datasource named jdbc/activiti is properly configured):

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
----

[.tok-cp]#<?xml version="1.0" encoding="UTF-8"?># [.tok-nt]#<beans#
[.tok-na]#xmlns=#[.tok-s]#"http://www.springframework.org/schema/beans"#
[.tok-na]#xmlns:xsi=#[.tok-s]#"http://www.w3.org/2001/XMLSchema-instance"#
[.tok-na]#xsi:schemaLocation=#[.tok-s]#"http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd"#[.tok-nt]#>#
[.tok-c]#<!-- lookup the JTA-Transaction manager --># [.tok-nt]#<bean#
[.tok-na]#id=#[.tok-s]#"transactionManager"#
[.tok-na]#class=#[.tok-s]#"org.springframework.jndi.JndiObjectFactoryBean"#[.tok-nt]#>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"jndiName"#
[.tok-na]#value=#[.tok-s]#"java:appserver/TransactionManager"#[.tok-nt]#></property>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"resourceRef"#
[.tok-na]#value=#[.tok-s]#"true"# [.tok-nt]#/># [.tok-nt]#</bean>#
[.tok-c]#<!-- process engine configuration --># [.tok-nt]#<bean#
[.tok-na]#id=#[.tok-s]#"processEngineConfiguration"#
[.tok-na]#class=#[.tok-s]#"org.activiti.cdi.CdiJtaProcessEngineConfiguration"#[.tok-nt]#>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"dataSourceJndiName"#
[.tok-na]#value=#[.tok-s]#"jdbc/activiti"# [.tok-nt]#/>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"transactionManager"#
[.tok-na]#ref=#[.tok-s]#"transactionManager"# [.tok-nt]#/>#
[.tok-c]#<!-- using externally managed transactions -->#
[.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"transactionsExternallyManaged"#
[.tok-na]#value=#[.tok-s]#"true"# [.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"databaseSchemaUpdate"#
[.tok-na]#value=#[.tok-s]#"true"# [.tok-nt]#/># [.tok-nt]#</bean>#
[.tok-nt]#</beans>#

Note that the above configuration requires the "spring-context" module:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<dependency>#
[.tok-nt]##<groupId>##org.springframework[.tok-nt]##</groupId>##
[.tok-nt]##<artifactId>##spring-context[.tok-nt]##</artifactId>##
[.tok-nt]##<version>##3.0.3.RELEASE[.tok-nt]##</version>##
[.tok-nt]#</dependency>#

The configuration in a Java SE environment looks exactly like the
examples provided in section link:#configuration[Creating a
ProcessEngine], substitute "CdiStandaloneProcessEngineConfiguration" for
"StandaloneProcessEngineConfiguration".

[[_deploying_processes]]
== 14.1.3. Deploying Processes

Processes can be deployed using standard activiti-api
(`RepositoryService`). In addition, activiti-cdi offers the possibility
to auto-deploy processes listed in a file named `processes.xml` located
top-level in the classpath. This is an example processes.xml file:

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-cp]#<?xml version="1.0" encoding="utf-8" ?># [.tok-c]#<!-- list
the processes to be deployed --># [.tok-nt]#<processes>#
[.tok-nt]#<process#
[.tok-na]#resource=#[.tok-s]#"diagrams/myProcess.bpmn20.xml"#
[.tok-nt]#/># [.tok-nt]#<process#
[.tok-na]#resource=#[.tok-s]#"diagrams/myOtherProcess.bpmn20.xml"#
[.tok-nt]#/># [.tok-nt]#</processes>#

===Contextual Process Execution with CDI

In this section we briefly look at the contextual process execution
model used by the Activiti cdi extension. A BPMN business process is
typically a long-running interaction, comprised of both user and system
tasks. At runtime, a process is split-up into a set of individual units
of work, performed by users and/or application logic. In activiti-cdi, a
process instance can be associated with a cdi scope, the association
representing a unit of work. This is particularly useful, if a unit of
work is complex, for instance if the implementation of a UserTask is a
complex sequence of different forms and "non-process-scoped" state needs
to be kept during this interaction.

In the default configuration, process instances are associated with the
"broadest" active scope, starting with the conversation and falling back
to the request if the conversation context is not active.

[[_associating_a_conversation_with_a_process_instance]]
== 14.1.4. Associating a Conversation with a Process Instance

When resolving @BusinessProcessScoped beans, or injecting process
variables, we rely on an existing association between an active cdi
scope and a process instance. Activiti-cdi provides the
`org.activiti.cdi.BusinessProcess` bean for controlling the association,
most prominently:

* the _startProcessBy(…​)_ methods, mirroring the respective methods
exposed by the Activiti `RuntimeService` allowing to start and
subsequently associating a business process,
* `resumeProcessById(String processInstanceId)`, allowing to associate
the process instance with the provided id,
* `resumeTaskById(String taskId)`, allowing to associate the task with
the provided id (and by extension, the corresponding process instance),

Once a unit of work (for example a UserTask) is completed, the
`completeTask()` method can be called to disassociate the
conversation/request from the process instance. This signals Activiti
that the current task is completed and makes the process instance
proceed.

Note that the `BusinessProcess`-bean is a `@Named` bean, which means
that the exposed methods can be invoked using expression language, for
example from a JSF page. The following JSF2 snippet begins a new
conversation and associates it with a user task instance, the id of
which is passed as a request parameter (e.g. `pageName.jsf?taskId=XX`):

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-nt]#<f:metadata># [.tok-nt]#<f:viewParam#
[.tok-na]#name=#[.tok-s]#"taskId"# [.tok-nt]#/># [.tok-nt]#<f:event#
[.tok-na]#type=#[.tok-s]#"preRenderView"#
[.tok-na]#listener=#[.tok-s]#"#\{businessProcess.startTask(taskId,
true)}"# [.tok-nt]#/># [.tok-nt]#</f:metadata>#

[[_declaratively_controlling_the_process]]
== 14.1.5. Declaratively controlling the Process

Activiti-cdi allows declaratively starting process instances and
completing tasks using annotations. The
`@org.activiti.cdi.annotation.StartProcess` annotation allows to start a
process instance either by "key" or by "name". Note that the process
instance is started _after_ the annotated method returns. Example:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nd]#@StartProcess#[.tok-o]#(#[.tok-s]#"authorizeBusinessTripRequest"#[.tok-o]#)#
[.tok-kd]#public# [.tok-n]#String#
[.tok-nf]#submitRequest#[.tok-o]#(#[.tok-n]#BusinessTripRequest#
[.tok-n]#request#[.tok-o]#)# [.tok-o]#\{# [.tok-c1]#// do some work#
[.tok-k]#return# [.tok-s]#"success"#[.tok-o]#;# [.tok-o]#}#

Depending on the configuration of Activiti, the code of the annotated
method and the starting of the process instance will be combined in the
same transaction. The
`@org.activiti.cdi.annotation.CompleteTask`-annotation works in the same
way:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nd]#@CompleteTask#[.tok-o]#(#[.tok-n]#endConversation#[.tok-o]#=#[.tok-kc]#false#[.tok-o]#)#
[.tok-kd]#public# [.tok-n]#String#
[.tok-nf]#authorizeBusinessTrip#[.tok-o]#()# [.tok-o]#\{# [.tok-c1]#//
do some work# [.tok-k]#return# [.tok-s]#"success"#[.tok-o]#;#
[.tok-o]#}#

The `@CompleteTask` annotation offers the possibility to end the current
conversation. The default behavior is to end the conversation after the
call to Activiti returns. Ending the conversation can be disabled, as
shown in the example above.

[[_referencing_beans_from_the_process]]
== 14.1.6. Referencing Beans from the Process

Activiti-cdi exposes CDI beans to Activiti El, using a custom resolver.
This makes it possible to reference beans from the process:

[source,pygments,highlight]
----
1
2
----

[.tok-nt]#<userTask# [.tok-na]#id=#[.tok-s]#"authorizeBusinessTrip"#
[.tok-na]#name=#[.tok-s]#"Authorize Business Trip"#
[.tok-na]#activiti:assignee=#[.tok-s]#"#\{authorizingManager.account.username}"#
[.tok-nt]#/>#

Where "authorizingManager" could be a bean provided by a producer
method:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
----

[.tok-nd]#@Inject# [.tok-nd]#@ProcessVariable# [.tok-n]#Object#
[.tok-n]#businessTripRequesterUsername#[.tok-o]#;# [.tok-nd]#@Produces#
[.tok-nd]#@Named# [.tok-kd]#public# [.tok-n]#Employee#
[.tok-nf]#authorizingManager#[.tok-o]#()# [.tok-o]#\{#
[.tok-n]#TypedQuery#[.tok-o]#<#[.tok-n]#Employee#[.tok-o]#>#
[.tok-n]#query# [.tok-o]#=#
[.tok-n]#entityManager#[.tok-o]#.#[.tok-na]#createQuery#[.tok-o]#(#[.tok-s]#"SELECT
e FROM Employee e WHERE e.account.username='"# [.tok-o]#+#
[.tok-n]#businessTripRequesterUsername# [.tok-o]#+#
[.tok-s]#"'"#[.tok-o]#,#
[.tok-n]#Employee#[.tok-o]#.#[.tok-na]#class#[.tok-o]#);#
[.tok-n]#Employee# [.tok-n]#employee# [.tok-o]#=#
[.tok-n]#query#[.tok-o]#.#[.tok-na]#getSingleResult#[.tok-o]#();#
[.tok-k]#return#
[.tok-n]#employee#[.tok-o]#.#[.tok-na]#getManager#[.tok-o]#();#
[.tok-o]#}#

We can use the same feature to call a business method of an EJB in a
service task, using the
`activiti:expression="myEjb.method()"`-extension. Note that this
requires a `@Named`-annotation on the `MyEjb`-class.

[[_working_with_businessprocessscoped_beans]]
== 14.1.7. Working with @BusinessProcessScoped beans

Using activiti-cdi, the lifecycle of a bean can be bound to a process
instance. To this extend, a custom context implementation is provided,
namely the BusinessProcessContext. Instances of BusinessProcessScoped
beans are stored as process variables in the current process instance.
BusinessProcessScoped beans need to be PassivationCapable (for example
Serializable). The following is an example of a process scoped bean:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
----

[.tok-nd]#@Named# [.tok-nd]#@BusinessProcessScoped# [.tok-kd]#public#
[.tok-kd]#class# [.tok-nc]#BusinessTripRequest# [.tok-kd]#implements#
[.tok-n]#Serializable# [.tok-o]#\{# [.tok-kd]#private# [.tok-kd]#static#
[.tok-kd]#final# [.tok-kt]#long# [.tok-n]#serialVersionUID# [.tok-o]#=#
[.tok-mi]#1L#[.tok-o]#;# [.tok-kd]#private# [.tok-n]#String#
[.tok-n]#startDate#[.tok-o]#;# [.tok-kd]#private# [.tok-n]#String#
[.tok-n]#endDate#[.tok-o]#;# [.tok-c1]#// ...# [.tok-o]#}#

Sometimes, we want to work with process scoped beans, in the absence of
an association with a process instance, for example before starting a
process. If no process instance is currently active, instances of
BusinessProcessScoped beans are temporarily stored in a local scope
(I.e. the Conversation or the Request, depending on the context. If this
scope is later associated with a business process instance, the bean
instances are flushed to the process instance.

[[_injecting_process_variables]]
== 14.1.8. Injecting Process Variables

Process variables are available for injection. Activiti-CDI supports

* type-safe injection of `@BusinessProcessScoped` beans using
`@Inject \[additional qualifiers\] Type fieldName`
* unsafe injection of other process variables using the
`@ProcessVariable(name?)` qualifier:

[source,pygments,highlight]
----
1
2
----

[.tok-nd]#@Inject# [.tok-nd]#@ProcessVariable# [.tok-n]#Object#
[.tok-n]#accountNumber#[.tok-o]#;# [.tok-nd]#@Inject#
[.tok-nd]#@ProcessVariable#[.tok-o]#(#[.tok-s]#"accountNumber"#[.tok-o]#)#
[.tok-n]#Object# [.tok-n]#account#

In order to reference process variables using EL, we have similar
options:

* `@Named @BusinessProcessScoped` beans can be referenced directly,
* other process variables can be referenced using the
`ProcessVariables`-bean:

....
#{processVariables['accountNumber']}
....

[[_receiving_process_events]]
== 14.1.9. Receiving Process Events

link:#experimental[[EXPERIMENTAL]]

Activiti can be hooked-up to the CDI event-bus. This allows us to be
notified of process events using standard CDI event mechanisms. In order
to enable CDI event support for Activiti, enable the corresponding parse
listener in the configuration:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"postBpmnParseHandlers"#[.tok-nt]#>#
[.tok-nt]#<list># [.tok-nt]#<bean#
[.tok-na]#class=#[.tok-s]#"org.activiti.cdi.impl.event.CdiEventSupportBpmnParseHandler"#
[.tok-nt]#/># [.tok-nt]#</list># [.tok-nt]#</property>#

Now Activiti is configured for publishing events using the CDI event
bus. The following gives an overview of how process events can be
received in CDI beans. In CDI, we can declaratively specify event
observers using the `@Observes`-annotation. Event notification is
type-safe. The type of process events is
`org.activiti.cdi.BusinessProcessEvent`. The following is an example of
a simple event observer method:

[source,pygments,highlight]
----
1
2
3
----

[.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#onProcessEvent#[.tok-o]#(#[.tok-nd]#@Observes#
[.tok-n]#BusinessProcessEvent# [.tok-n]#businessProcessEvent#[.tok-o]#)#
[.tok-o]#\{# [.tok-c1]#// handle event# [.tok-o]#}#

This observer would be notified of all events. If we want to restrict
the set of events the observer receives, we can add qualifier
annotations:

* `@BusinessProcess`: restricts the set of events to a certain process
definition. Example:
`@Observes @BusinessProcess("billingProcess") BusinessProcessEvent evt`
* `@StartActivity`: restricts the set of events by a certain activity.
For example:
`@Observes @StartActivity("shipGoods") BusinessProcessEvent evt` is
invoke whenever an activity with the id "shipGoods" is entered.
* `@EndActivity`: restricts the set of events by a certain activity. For
example: `@Observes @EndActivity("shipGoods") BusinessProcessEvent evt`
is invoke whenever an activity with the id "shipGoods" is left.
* `@TakeTransition`: restricts the set of events by a certain
transition.
* `@CreateTask`: restricts the set of events by a certain task’s
creation.
* `@DeleteTask`: restricts the set of events by a certain task’s
deletion.
* `@AssignTask`: restricts the set of events by a certain task’s
assignment.
* `@CompleteTask`: restricts the set of events by a certain task’s
completion.

The qualifiers named above can be combined freely. For example, in order
to receive all events generated when leaving the "shipGoods" activity in
the "shipmentProcess", we could write the following observer method:

[source,pygments,highlight]
----
1
2
3
----

[.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#beforeShippingGoods#[.tok-o]#(#[.tok-nd]#@Observes#
[.tok-nd]#@BusinessProcess#[.tok-o]#(#[.tok-s]#"shippingProcess"#[.tok-o]#)#
[.tok-nd]#@EndActivity#[.tok-o]#(#[.tok-s]#"shipGoods"#[.tok-o]#)#
[.tok-n]#BusinessProcessEvent# [.tok-n]#evt#[.tok-o]#)# [.tok-o]#\{#
[.tok-c1]#// handle event# [.tok-o]#}#

In the default configuration, event listeners are invoked synchronously
and in the context of the same transaction. CDI transactional observers
(only available in combination with JavaEE / EJB), allow to control when
the event is handed to the observer method. Using transactional
observers, we can for example assure that an observer is only notified
if the transaction in which the event is fired succeeds:

[source,pygments,highlight]
----
1
2
3
----

[.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#onShipmentSuceeded#[.tok-o]#(#[.tok-nd]#@Observes#[.tok-o]#(#[.tok-n]#during#[.tok-o]#=#[.tok-n]#TransactionPhase#[.tok-o]#.#[.tok-na]#AFTER_SUCCESS#[.tok-o]#)#
[.tok-nd]#@BusinessProcess#[.tok-o]#(#[.tok-s]#"shippingProcess"#[.tok-o]#)#
[.tok-nd]#@EndActivity#[.tok-o]#(#[.tok-s]#"shipGoods"#[.tok-o]#)#
[.tok-n]#BusinessProcessEvent# [.tok-n]#evt#[.tok-o]#)# [.tok-o]#\{#
[.tok-c1]#// send email to customer.# [.tok-o]#}#

[[_additional_features]]
== 14.1.10. Additional Features

* The ProcessEngine as well as the services are available for injection:
`@Inject ProcessEngine, RepositoryService, TaskService`, …​
* The current process instance and task can be injected:
`@Inject ProcessInstance, Task`,
* The current business key can be injected:
`@Inject @BusinessKey String businessKey`,
* The current process instance id be injected:
`@Inject @ProcessInstanceId String pid`,

[[_known_limitations]]
== 14.2. Known Limitations

Although activiti-cdi is implemented against the SPI and designed to be
a "portable-extension" it is only tested using Weld.

[[chapter_ldap]]
== 15. LDAP integration

Companies often already have a user and group store in the form of an
LDAP system. Since version 5.14, Activiti offers an out-of-the-box
solution for easily configuring how Activiti should connect with an LDAP
system.

Before Activiti 5.14, it was already possible to integrate LDAP with
Activiti. However, as of 5.14, the configuration has been simplified a
lot. However, the _old_ way of configuring LDAP still works. More
specifically, the simplified configuration is just a wrapper on top of
the _old_ infrastructure.

[[ldap_usage]]
=== 15.1. Usage

To add the LDAP integration code to your project, simply add the
following dependency to your pom.xml:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<dependency>#
[.tok-nt]##<groupId>##org.activiti[.tok-nt]##</groupId>##
[.tok-nt]##<artifactId>##activiti-ldap[.tok-nt]##</artifactId>##
[.tok-nt]##<version>##latest.version[.tok-nt]##</version>##
[.tok-nt]#</dependency>#

[[ldap_usecases]]
== 15.2. Use cases

The LDAP integration has currently two main use cases:

* Allow for authentication through the IdentityService. This could be
useful when doing everything through the IdentityService.
* Fetching the groups of a user. This is important when for example
querying tasks to see which tasks a certain user can see (i.e. tasks
with a candidate group).

[[ldap_configuration]]
== 15.3. Configuration

Integrating the LDAP system with Activiti is done by injecting an
instance of `org.activiti.ldap.LDAPConfigurator` in the `configurators`
section of the process engine configuration. This class is highly
extensible: methods can be easily overridden and many dependent beans
are pluggable if the default implementation would not fit the use case.

This is an example configuration (note: of course, when creating the
engine programmatically this is completely similar). Don’t worry about
all the properties for now, we’ll look at them in detail in a next
section.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
----

[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"processEngineConfiguration"#
[.tok-na]#class=#[.tok-s]#"...SomeProcessEngineConfigurationClass"#[.tok-nt]#>#
... [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"configurators"#[.tok-nt]#># [.tok-nt]#<list>#
[.tok-nt]#<bean#
[.tok-na]#class=#[.tok-s]#"org.activiti.ldap.LDAPConfigurator"#[.tok-nt]#>#
[.tok-c]#<!-- Server connection params --># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"server"#
[.tok-na]#value=#[.tok-s]#"ldap://localhost"# [.tok-nt]#/>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"port"#
[.tok-na]#value=#[.tok-s]#"33389"# [.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"user"# [.tok-na]#value=#[.tok-s]#"uid=admin,
ou=users, o=activiti"# [.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"password"# [.tok-na]#value=#[.tok-s]#"pass"#
[.tok-nt]#/># [.tok-c]#<!-- Query params --># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"baseDn"#
[.tok-na]#value=#[.tok-s]#"o=activiti"# [.tok-nt]#/>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"queryUserByUserId"#
[.tok-na]#value=#[.tok-s]#"(&(objectClass=inetOrgPerson)(uid=\{0}))"#
[.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"queryUserByFullNameLike"#
[.tok-na]#value=#[.tok-s]#"(&(objectClass=inetOrgPerson)(|(\{0}=*\{1}*)(\{2}=*\{3}*)))"#
[.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"queryGroupsForUser"#
[.tok-na]#value=#[.tok-s]#"(&(objectClass=groupOfUniqueNames)(uniqueMember=\{0}))"#
[.tok-nt]#/># [.tok-c]#<!-- Attribute config --># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"userIdAttribute"#
[.tok-na]#value=#[.tok-s]#"uid"# [.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"userFirstNameAttribute"#
[.tok-na]#value=#[.tok-s]#"cn"# [.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"userLastNameAttribute"#
[.tok-na]#value=#[.tok-s]#"sn"# [.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"userEmailAttribute"#
[.tok-na]#value=#[.tok-s]#"mail"# [.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"groupIdAttribute"#
[.tok-na]#value=#[.tok-s]#"cn"# [.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"groupNameAttribute"#
[.tok-na]#value=#[.tok-s]#"cn"# [.tok-nt]#/># [.tok-nt]#</bean>#
[.tok-nt]#</list># [.tok-nt]#</property># [.tok-nt]#</bean>#

[[ldap_properties]]
== 15.4. Properties

Following properties can be set on `org.activiti.ldap.LDAPConfigurator`:

....
.LDAP configuration properties
....

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Property name |Description |Type |Default value
|server |The server on which the LDAP system can be reached. For example
_ldap://localhost:33389_ |String |

|port |The port on which the LDAP system is running |int |

|user |The user id that is used to connect to the LDAP system |String |

|password |The password that is used to connect to the LDAP system
|String |

|initialContextFactory |The InitialContextFactory name used to connect
to the LDAP system |String |com.sun.jndi.ldap.LdapCtxFactory

|securityAuthentication |The value that is used for the
_java.naming.security.authentication_ property used to connect to the
LDAP system |String |simple

|customConnectionParameters |Allows to set all LDAP connection
parameters which do not have a dedicated setter. See for example
http://docs.oracle.com/javase/tutorial/jndi/ldap/jndi.html for custom
properties. Such properties are for example to configure connection
pooling, specific security settings, etc. All the provided parameters
will be provided when creating a connection to the LDAP system.
|Map<String, String> |

|baseDn |The base _distinguished name_ (DN) from which the searches for
users and groups are started |String |

|userBaseDn |The base _distinguished name_ (DN) from which the searches
for users are started. If not provided, baseDn (see above) will be used
|String |

|groupBaseDn |The base _distinguished name_ (DN) from which the searches
for groups are started. If not provided, baseDn (see above) will be used
|String |

|searchTimeLimit |The timeout that is used when doing a search in LDAP
in milliseconds |long |one hour

|queryUserByUserId |The query that is executed when searching for a user
by userId. For example: (&(objectClass=inetOrgPerson)(uid=\{0})) Here,
all the objects in LDAP with the class _inetOrgPerson_ and who have the
matching _uid_ attribute value will be returned. As shown in the
example, the user id is injected by using \{0}. If setting the query
alone is insufficient for your specific LDAP setup, you can
alternatively plug in a different LDAPQueryBuilder, which allows for
more customization than only the query. |string |

|queryUserByFullNameLike |The query that is executed when searching for
a user by full name. For example: (& (objectClass=inetOrgPerson) (
|(\{0}=**\{1}**)(\{2}=**\{3}**)) ) Here, all the objects in LDAP with
the class _inetOrgPerson_ and who have the matching first name and last
name values will be returned. Note that \{0} injects the
firstNameAttribute (as defined above), \{1} and \{3} the search text and
\{2} the lastNameAttribute. If setting the query alone is insufficient
for your specific LDAP setup, you can alternatively plug in a different
LDAPQueryBuilder, which allows for more customization than only the
query. |string

| |queryGroupsForUser |The query that is executed when searching for the
groups of a specific user. For example:
(&(objectClass=groupOfUniqueNames)(uniqueMember=\{0})) Here, all the
objects in LDAP with the class _groupOfUniqueNames_ and where the
provided DN (matching a DN for a user) is a _uniqueMember_ are returned.
As shown in the example, the user id is injected by using \{0} If
setting the query alone is insufficient for your specific LDAP setup,
you can alternatively plug in a different LDAPQueryBuilder, which allows
for more customization than only the query. |string

| |userIdAttribute |Name of the attribute that matches the user id. This
property is used when looking for a User object and the mapping between
the LDAP object and the Activiti User object is done. |string

| |userFirstNameAttribute |Name of the attribute that matches the user
first name. This property is used when looking for a User object and the
mapping between the LDAP object and the Activiti User object is done.
|string

| |userLastNameAttribute |Name of the attribute that matches the user
last name. This property is used when looking for a User object and the
mapping between the LDAP object and the Activiti User object is done.
|string

| |groupIdAttribute |Name of the attribute that matches the group id.
This property is used when looking for a Group object and the mapping
between the LDAP object and the Activiti Group object is done. |string

| |groupNameAttribute |Name of the attribute that matches the group
name. This property is used when looking for a Group object and the
mapping between the LDAP object and the Activiti Group object is done.
|String

| |groupTypeAttribute |Name of the attribute that matches the group
type. This property is used when looking for a Group object and the
mapping between the LDAP object and the Activiti Group object is done.
|String
|===

Following properties are when one wants to customize default behavior or
introduced group caching:

.Table 260. Advanced properties
[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|Property name |Description |Type |Default value
|ldapUserManagerFactory |Set a custom implementation of the
LDAPUserManagerFactory if the default implementation is not suitable.
|instance of LDAPUserManagerFactory |

|ldapGroupManagerFactory |Set a custom implementation of the
LDAPGroupManagerFactory if the default implementation is not suitable.
|instance of LDAPGroupManagerFactory |

|ldapMemberShipManagerFactory |Set a custom implementation of the
LDAPMembershipManagerFactory if the default implementation is not
suitable. Note that this is very unlikely, as membership are managed in
the LDAP system itself normally. |An instance of
LDAPMembershipManagerFactory |

|ldapQueryBuilder |Set a custom query builder if the default
implementation is not suitable. The LDAPQueryBuilder instance is used
when the LDAPUserManager or LDAPGroupManage} does an actual query
against the LDAP system. The default implementation uses the properties
as set on this instance such as queryGroupsForUser and queryUserById |An
instance of org.activiti.ldap.LDAPQueryBuilder |

|groupCacheSize a|
Allows to set the size of the group cache. This is an LRU cache that
caches groups for users and thus avoids hitting the LDAP system each
time the groups of a user needs to be known.

The cache will not be instantiated if the value is less than zero. By
default set to -1, so no caching is done.

|int |-1

|groupCacheExpirationTime |Sets the expiration time of the group cache
in milliseconds. When groups for a specific user are fetched, and if the
group cache exists, the groups will be stored in this cache for the time
set in this property. I.e. when the groups were fetched at 00:00 and the
expiration time is 30 minutes, any fetch of the groups for that user
after 00:30 will not come from the cache, but do a fetch again from the
LDAP system. Likewise, everything group fetch for that user done between
00:00 - 00:30 will come from the cache. |long |one hour
|===

Note when using Active Directory: people in the Activiti forum have
reported that for Activiti Directory, the _InitialDirContext_ needs to
be set to Context.REFERRAL. This can be passed through the
customConnectionParameters map as described above.

[[_advanced]]
== 16. Advanced

The following sections cover advanced use cases of Activiti, that go
beyond typical execution of BPMN 2.0 processes. As such, a certain
proficiency and experience with Activiti is advised to understand the
topics described here.

[[_async_executor]]
=== 16.1. Async Executor

In Activiti version 5 (starting from version 5.17.0), the Async executor
was added in addition to the existing job executor. The Async Executor
has proved to be more performant than the old job executor by many users
of Activiti and our benchmarks.

In Activiti 6 (and later), the async executor is the only one available.
For version 6, the async executor was completely refactored for optimal
performance and pluggability (while still being compatible with existing
API’s).

[[async_executor_design]]
==== 16.1.1. Async Executor design

Two types of jobs exist: timers (like those belonging to a boundary
event on a user task) and async continuations (belonging to a service
task with the _activiti:async="true"_ attribute).

*Timers* are the easiest to explain: they are persisted in the
ACT_RU_TIMER_JOB table with a certain due date. There is a thread in the
async executor that periodically checks if there are new timers that
fire (i.e. the due date is _before_ the current time). When that
happens, the timer is removed and an async job is created and inserted.

An *async job* is inserted in the database during the execution of
process instance steps (which means _during some API call that was
made_). If the async executor is active for the current Activiti engine,
the async job is actually already _locked_. This means that the job
entry is inserted in the ACT_RU_JOB table and will have a _lock owner_
and a _lock expiration time_ set. A transaction listener that fires on a
successful commit of the API call triggers the async executor of the
same engine to execute the job (so the data is guaranteed to be in the
database). To do this, the async executor has a (configurable) thread
pool from which a thread will execute the job and continue the process
asynchronously. If the Activiti engine does not have the async executor
enabled, the async job is inserted in the ACT_RU_JOB table without being
locked.

Similar to the thread that checks for new timers, the async executor has
a thread that _acquires_ new async jobs. These are jobs that are present
in the table and are not locked. This thread will lock these jobs for
the current Activiti engine and pass it to the async executor.

The thread pool executing the jobs uses an in-memory queue to take jobs
from. When this queue is full (this is configurable), the job will be
unlocked and re-inserted into its table. This way, other async executors
can pick it up instead.

In case an exception happens during job execution, the async job will be
transformed to a timer job with a due date. It will be picked up like a
regular timer job and become an async job again, to be retried soon.
When a job has been retried for a (configurable) number of times and
continues to fail, the job is assumed to be _dead_ and moved to the
ACT_RU_DEADLETTER_JOB. The _deadletter_ concept is widely used in
various other systems. An admin will now need to inspect the exception
for the failed job and decide what the best course of action is.

Process definitions and process instances can be suspended. Suspended
jobs related to these definitions or instances are put in the
ACT_RU_SUSPENDED_JOB table, to make sure the query to acquire jobs has a
few as possible conditions in its where clause.

One thing that is clear from the above, for people familiar with the old
implementations of the job/async executor: the main goal is to allow the
_acquire queries_ to be as simple as possible. In the past (before
version 6), one table was used for all job types/states, which made the
_where_ condition large as it catered for all the use cases. This
problem is now solved and our benchmarks have proved that this new
design delivers better performance and is more scalable.

[[_async_executor_configuration]]
==== 16.1.2. Async executor configuration

The async executor is a highly configurable component. It’s always
recommended to look into the default settings of the async executor and
validate if they match the requirements of your processes.

Alternatively, it’s possible to extend the default implementation or
implement the _org.activiti.engine.impl.asyncexecutor.AsyncExecutor_
interface with your own implementation.

The following properties are available on the process engine
configuration via setters:

.Table 261. Async executor configuration options
[width="100%",cols="34%,33%,33%",options="header",]
|===
|Name |Default value |Description
|asyncExecutorThreadPoolQueueSize |100 |The size of the queue on which
jobs to be executed are placed after being acquired, before they are
actually executed by a thread from the thread pool

|asyncExecutorCorePoolSize |2 |The minimal number of threads that are
kept alive in the thread pool for job execution.

|asyncExecutorMaxPoolSize |10 |The maximum number of threads that are
created in the thread pool for job execution.

|asyncExecutorThreadKeepAliveTime |5000 |The time (in milliseconds) a
thread used for job execution must be kept alive before it is destroyed.
Having a setting > 0 takes resources, but in the case of many job
executions it avoids creating new threads all the time. If 0, threads
will be destroyed after they’ve been used for job execution.

|asyncExecutorNumberOfRetries |3 |The number of times a job will be
retried before it is moved to the _deadletter_ table.

|asyncExecutorMaxTimerJobsPerAcquisition |1 |The number of timer jobs
that are acquired during one acquirement query. Default value is 1, as
this lowers the potential for optimistic locking exceptions. Larger
values can perform better, but the chance of optimistic locking
exceptions occurring between different engines becomes larger too.

|asyncExecutorMaxAsyncJobsDuePerAcquisition |1 |The number of async jobs
that are acquired during one acquirement query. Default value is 1, as
this lowers the potential for optimistic locking exceptions. Larger
values can perform better, but the chance of optimistic locking
exceptions occurring between different engines becomes larger too.

|asyncExecutorDefaultTimerJobAcquireWaitTime |10000 |The time (in
milliseconds) the timer acquisition thread will wait to execute the next
acquirement query. This happens when no new timer jobs were found or
when less timer jobs have been fetched than set in
_asyncExecutorMaxTimerJobsPerAcquisition_.

|asyncExecutorDefaultAsyncJobAcquireWaitTime |10000 |The time (in
milliseconds) the async job acquisition thread will wait to execute the
next acquirement query. This happens when no new async jobs were found
or when less async jobs have been fetched than set in
_asyncExecutorMaxAsyncJobsDuePerAcquisition_.

|asyncExecutorDefaultQueueSizeFullWaitTime |0 |The time (in
milliseconds) the async job (both timer and async continuations)
acquisition thread will wait when the internal job queue is full to
execute the next query. By default set to 0 (for backwards
compatibility). Setting this property to a higher value allows the async
executor to hopefully clear its queue a bit.

|asyncExecutorTimerLockTimeInMillis |5 minutes |The amount of time (in
milliseconds) a timer job is locked when acquired by the async executor.
During this period of time, no other async executor will try to acquire
and lock this job.

|asyncExecutorAsyncJobLockTimeInMillis |5 minutes |The amount of time
(in milliseconds) an async job is locked when acquired by the async
executor. During this period of time, no other async executor will try
to acquire and lock this job.

|asyncExecutorSecondsToWaitOnShutdown |60 |The time (in seconds) that is
waited to gracefully shut down the thread pool used for job execution
when the a shutdown on the executor (or process engine) is requested.

|asyncExecutorResetExpiredJobsInterval |60 seconds |The amount of time
(in milliseconds) that is between two consecutive checks of _expired
jobs_. Expired jobs are jobs that were locked (a lock owner + time was
written by some executor, but the job was never completed). During such
a check, jobs that are expired are made available again, meaning the
lock owner and lock time will be removed. Other executors will now be
able to pick it up. A job is deemed expired if the lock time is before
the current date.

|asyncExecutorResetExpiredJobsPageSize |3 |The amount of jobs that are
fetched at once by the _reset expired_ thread of the async executor.
|===

[[_message_queue_based_async_executor]]
==== 16.1.3. Message Queue based Async Executor

When reading the link:#async_executor_design[async executor design
section], it becomes clear that the architecture is inspired by message
queues. The async executor is designed in such a way that a message
queue can easily be used to take over the job of the thread pool and the
handling of async jobs.

Benchmarks have shown that using a message queue is superior,
throughput-wise, to the thread pool-backed async executor. However, it
does come with an extra architectural component, which of course makes
setup, maintenance and monitoring more complex. For many users, the
performance of the thread pool-backed async executor is more than
sufficient. It is nice to know however, that there is an alternative if
the required performance grows.

Currently, the only option that is supported out-of-the-box is JMS and
Spring. The reason for supporting Spring before anything else is because
Spring has some very nice features that ease a lot of the pain when it
comes to threading and dealing with multiple message consumers. However,
the integration is so simple, that it can easily be ported to any
message queue implementation and/or protocol (Stomp, AMPQ, etc.).
Feedback is appreciated for what should be the next implementation.

When a new async job is created by the engine, a message is put on a
message queue (in a transaction committed transaction listener, so we’re
sure the job entry is in the database) containing the job identifier. A
message consumer then takes this job identifier to fetch the job, and
execute the job. The async executor will not create a thread pool
anymore. It will insert and query for timers from a separate thread.
When a timer fires, it is moved to the async job table, which now means
a message is sent to the message queue too. The _reset expired_ thread
will also unlock jobs as usual, as message queues can fail too. Instead
of _unlocking_ a job, a message will now be resent. The async executor
will not poll for async jobs anymore.

The implementation consists of two classes:

* An implementation of the
_org.activiti.engine.impl.asyncexecutor.JobManager_ interface that puts
a message on a message queue instead of passing it to the thread pool.
* A _javax.jms.MessageListener_ implementation that consumes a message
from the message queue, using the job identifier in the message to fetch
and execute the job.

First of all, add the _activiti-jms-spring-executor_ dependency to your
project:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<dependency>#
[.tok-nt]##<groupId>##org.activiti[.tok-nt]##</groupId>##
[.tok-nt]##<artifactId>##activiti-jms-spring-executor[.tok-nt]##</artifactId>##
[.tok-nt]##<version>##$\{activiti.version}[.tok-nt]#</version>#
[.tok-nt]#</dependency>#

To enable the message queue based async executor, in the process engine
configuration, the following needs to be done:

* _asyncExecutorActivate_ must be set to _true_, as usual
* _asyncExecutorMessageQueueMode_ needs to be set to _true_
* The _org.activiti.spring.executor.jms.MessageBasedJobManager_ must be
injected as _JobManager_

Below is a complete example of a Java based configuration, using
_ActiveMQ_ as message queue broker.

Some things to note:

* The _MessageBasedJobManager_ expects a _JMSTemplate_ to be injected
that is configured with a correct _connectionFactory_.
* We’re using the _MessageListenerContainer_ concept from Spring, as
this simplifies threading and multiple consumers a lot.

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
----

[.tok-nd]#@Configuration# [.tok-kd]#public# [.tok-kd]#class#
[.tok-nc]#SpringJmsConfig# [.tok-o]#\{# [.tok-nd]#@Bean#
[.tok-kd]#public# [.tok-n]#DataSource# [.tok-nf]#dataSource#[.tok-o]#()#
[.tok-o]#\{# [.tok-c1]#// Omitted# [.tok-o]#}#
[.tok-nd]#@Bean#[.tok-o]#(#[.tok-n]#name# [.tok-o]#=#
[.tok-s]#"transactionManager"#[.tok-o]#)# [.tok-kd]#public#
[.tok-n]#PlatformTransactionManager#
[.tok-nf]#transactionManager#[.tok-o]#()# [.tok-o]#\{#
[.tok-n]#DataSourceTransactionManager# [.tok-n]#transactionManager#
[.tok-o]#=# [.tok-k]#new#
[.tok-n]#DataSourceTransactionManager#[.tok-o]#();#
[.tok-n]#transactionManager#[.tok-o]#.#[.tok-na]#setDataSource#[.tok-o]#(#[.tok-n]#dataSource#[.tok-o]#());#
[.tok-k]#return# [.tok-n]#transactionManager#[.tok-o]#;# [.tok-o]#}#
[.tok-nd]#@Bean# [.tok-kd]#public#
[.tok-n]#SpringProcessEngineConfiguration#
[.tok-nf]#processEngineConfiguration#[.tok-o]#()# [.tok-o]#\{#
[.tok-n]#SpringProcessEngineConfiguration# [.tok-n]#configuration#
[.tok-o]#=# [.tok-k]#new#
[.tok-n]#SpringProcessEngineConfiguration#[.tok-o]#();#
[.tok-n]#configuration#[.tok-o]#.#[.tok-na]#setDataSource#[.tok-o]#(#[.tok-n]#dataSource#[.tok-o]#());#
[.tok-n]#configuration#[.tok-o]#.#[.tok-na]#setTransactionManager#[.tok-o]#(#[.tok-n]#transactionManager#[.tok-o]#());#
[.tok-n]#configuration#[.tok-o]#.#[.tok-na]#setDatabaseSchemaUpdate#[.tok-o]#(#[.tok-n]#SpringProcessEngineConfiguration#[.tok-o]#.#[.tok-na]#DB_SCHEMA_UPDATE_TRUE#[.tok-o]#);#
[.tok-n]#configuration#[.tok-o]#.#[.tok-na]#setAsyncExecutorMessageQueueMode#[.tok-o]#(#[.tok-kc]#true#[.tok-o]#);#
[.tok-n]#configuration#[.tok-o]#.#[.tok-na]#setAsyncExecutorActivate#[.tok-o]#(#[.tok-kc]#true#[.tok-o]#);#
[.tok-n]#configuration#[.tok-o]#.#[.tok-na]#setJobManager#[.tok-o]#(#[.tok-n]#jobManager#[.tok-o]#());#
[.tok-k]#return# [.tok-n]#configuration#[.tok-o]#;# [.tok-o]#}#
[.tok-nd]#@Bean# [.tok-kd]#public# [.tok-n]#ProcessEngine#
[.tok-nf]#processEngine#[.tok-o]#()# [.tok-o]#\{# [.tok-k]#return#
[.tok-n]#processEngineConfiguration#[.tok-o]#().#[.tok-na]#buildProcessEngine#[.tok-o]#();#
[.tok-o]#}# [.tok-nd]#@Bean# [.tok-kd]#public#
[.tok-n]#MessageBasedJobManager# [.tok-nf]#jobManager#[.tok-o]#()#
[.tok-o]#\{# [.tok-n]#MessageBasedJobManager# [.tok-n]#jobManager#
[.tok-o]#=# [.tok-k]#new# [.tok-n]#MessageBasedJobManager#[.tok-o]#();#
[.tok-n]#jobManager#[.tok-o]#.#[.tok-na]#setJmsTemplate#[.tok-o]#(#[.tok-n]#jmsTemplate#[.tok-o]#());#
[.tok-k]#return# [.tok-n]#jobManager#[.tok-o]#;# [.tok-o]#}#
[.tok-nd]#@Bean# [.tok-kd]#public# [.tok-n]#ConnectionFactory#
[.tok-nf]#connectionFactory#[.tok-o]#()# [.tok-o]#\{#
[.tok-n]#ActiveMQConnectionFactory# [.tok-n]#activeMQConnectionFactory#
[.tok-o]#=# [.tok-k]#new#
[.tok-n]#ActiveMQConnectionFactory#[.tok-o]#(#[.tok-s]#"tcp://localhost:61616"#[.tok-o]#);#
[.tok-n]#activeMQConnectionFactory#[.tok-o]#.#[.tok-na]#setUseAsyncSend#[.tok-o]#(#[.tok-kc]#true#[.tok-o]#);#
[.tok-n]#activeMQConnectionFactory#[.tok-o]#.#[.tok-na]#setAlwaysSessionAsync#[.tok-o]#(#[.tok-kc]#true#[.tok-o]#);#
[.tok-k]#return# [.tok-k]#new#
[.tok-n]#CachingConnectionFactory#[.tok-o]#(#[.tok-n]#activeMQConnectionFactory#[.tok-o]#);#
[.tok-o]#}# [.tok-nd]#@Bean# [.tok-kd]#public# [.tok-n]#JmsTemplate#
[.tok-nf]#jmsTemplate#[.tok-o]#()# [.tok-o]#\{# [.tok-n]#JmsTemplate#
[.tok-n]#jmsTemplate# [.tok-o]#=# [.tok-k]#new#
[.tok-n]#JmsTemplate#[.tok-o]#();#
[.tok-n]#jmsTemplate#[.tok-o]#.#[.tok-na]#setDefaultDestination#[.tok-o]#(#[.tok-k]#new#
[.tok-n]#ActiveMQQueue#[.tok-o]#(#[.tok-s]#"activiti-jobs"#[.tok-o]#));#
[.tok-n]#jmsTemplate#[.tok-o]#.#[.tok-na]#setConnectionFactory#[.tok-o]#(#[.tok-n]#connectionFactory#[.tok-o]#());#
[.tok-k]#return# [.tok-n]#jmsTemplate#[.tok-o]#;# [.tok-o]#}#
[.tok-nd]#@Bean# [.tok-kd]#public# [.tok-n]#MessageListenerContainer#
[.tok-nf]#messageListenerContainer#[.tok-o]#()# [.tok-o]#\{#
[.tok-n]#DefaultMessageListenerContainer#
[.tok-n]#messageListenerContainer# [.tok-o]#=# [.tok-k]#new#
[.tok-n]#DefaultMessageListenerContainer#[.tok-o]#();#
[.tok-n]#messageListenerContainer#[.tok-o]#.#[.tok-na]#setConnectionFactory#[.tok-o]#(#[.tok-n]#connectionFactory#[.tok-o]#());#
[.tok-n]#messageListenerContainer#[.tok-o]#.#[.tok-na]#setDestinationName#[.tok-o]#(#[.tok-s]#"activiti-jobs"#[.tok-o]#);#
[.tok-n]#messageListenerContainer#[.tok-o]#.#[.tok-na]#setMessageListener#[.tok-o]#(#[.tok-n]#jobMessageListener#[.tok-o]#());#
[.tok-n]#messageListenerContainer#[.tok-o]#.#[.tok-na]#setConcurrentConsumers#[.tok-o]#(#[.tok-mi]#2#[.tok-o]#);#
[.tok-n]#messageListenerContainer#[.tok-o]#.#[.tok-na]#start#[.tok-o]#();#
[.tok-k]#return# [.tok-n]#messageListenerContainer#[.tok-o]#;#
[.tok-o]#}# [.tok-nd]#@Bean# [.tok-kd]#public#
[.tok-n]#JobMessageListener# [.tok-nf]#jobMessageListener#[.tok-o]#()#
[.tok-o]#\{# [.tok-n]#JobMessageListener# [.tok-n]#jobMessageListener#
[.tok-o]#=# [.tok-k]#new# [.tok-n]#JobMessageListener#[.tok-o]#();#
[.tok-n]#jobMessageListener#[.tok-o]#.#[.tok-na]#setProcessEngineConfiguration#[.tok-o]#(#[.tok-n]#processEngineConfiguration#[.tok-o]#());#
[.tok-k]#return# [.tok-n]#jobMessageListener#[.tok-o]#;# [.tok-o]#}#
[.tok-o]#}#

In the code above, the _JobMessageListener_ and _MessageBasedJobManager_
are the only classes from the _activiti-jms-spring-executor_ module. All
the other code is from Spring. As such, when wanting to port this to
other queues/protocols, these classes must be ported.

[[advanced_parseHandlers]]
== 16.2. Hooking into process parsing

A BPMN 2.0 xml needs to be parsed to the Activiti internal model to be
executed on the Activiti engine. This parsing happens during a
deployment of the process or when a process is not found in memory, and
the xml is fetched from the database.

For each of these processes, the `BpmnParser` class creates a new
`BpmnParse` instance. This instance will be used as container for all
things that are done during parsing. The parsing on itself is very
simple: for each BPMN 2.0 element, there is a matching instance of the
`org.activiti.engine.parse.BpmnParseHandler` available in the engine. As
such, the parser has a map which basically maps a BPMN 2.0 element class
to an instance of `BpmnParseHandler`. By default, Activiti has
`BpmnParseHandler` instances to handle all supported elements and also
uses it to attach execution listeners to steps of the process for
creating the history.

It is possible to add custom instances of
`org.activiti.engine.parse.BpmnParseHandler` to the Activiti engine. An
often seen use case is for example to add execution listeners to certain
steps that fire events to some queue for event processing. The history
handling is done in such a way internally in Activiti. To add such
custom handlers, the Activiti configuration needs to be tweaked:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
----

[.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"preBpmnParseHandlers"#[.tok-nt]#>#
[.tok-nt]#<list># [.tok-nt]#<bean#
[.tok-na]#class=#[.tok-s]#"org.activiti.parsing.MyFirstBpmnParseHandler"#
[.tok-nt]#/># [.tok-nt]#</list># [.tok-nt]#</property>#
[.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"postBpmnParseHandlers"#[.tok-nt]#>#
[.tok-nt]#<list># [.tok-nt]#<bean#
[.tok-na]#class=#[.tok-s]#"org.activiti.parsing.MySecondBpmnParseHandler"#
[.tok-nt]#/># [.tok-nt]#<bean#
[.tok-na]#class=#[.tok-s]#"org.activiti.parsing.MyThirdBpmnParseHandler"#
[.tok-nt]#/># [.tok-nt]#</list># [.tok-nt]#</property>#

The list of `BpmnParseHandler` instances that is configured in the
`preBpmnParseHandlers` property are added before any of the default
handlers. Likewise, the `postBpmnParseHandlers` are added after those.
This can be important if the order of things matter for the logic
contained in the custom parse handlers.

`org.activiti.engine.parse.BpmnParseHandler` is a simple interface:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

[.tok-kd]#public# [.tok-kd]#interface# [.tok-nc]#BpmnParseHandler#
[.tok-o]#\{# [.tok-n]#Collection#[.tok-o]#<#[.tok-n]#Class#[.tok-o]#>?#
[.tok-kd]#extends# [.tok-n]#BaseElement#[.tok-o]#>>#
[.tok-nf]#getHandledTypes#[.tok-o]#();# [.tok-kt]#void#
[.tok-nf]#parse#[.tok-o]#(#[.tok-n]#BpmnParse#
[.tok-n]#bpmnParse#[.tok-o]#,# [.tok-n]#BaseElement#
[.tok-n]#element#[.tok-o]#);# [.tok-o]#}#

The `getHandledTypes()` method returns a collection of all the types
handled by this parser. The possible types are a subclass of
`BaseElement`, as directed by the generic type of the collection. You
can also extend the `AbstractBpmnParseHandler` class and override the
`getHandledType()` method, which only returns one Class and not a
collection. This class contains also some helper methods shared by many
of the default parse handlers. The `BpmnParseHandler` instance will be
called when the parser encounters any of the returned types by this
method. In the following example, whenever a process contained in a BPMN
2.0 xml is encountered, it will execute the logic in the `executeParse`
method (which is a typecasted method that replaces the regular `parse`
method on the `BpmnParseHandler` interface).

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
----

[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#TestBPMNParseHandler#
[.tok-kd]#extends#
[.tok-n]#AbstractBpmnParseHandler#[.tok-o]#<#[.tok-n]#Process#[.tok-o]#>#
[.tok-o]#\{# [.tok-kd]#protected# [.tok-n]#Class#[.tok-o]#<?#
[.tok-kd]#extends# [.tok-n]#BaseElement#[.tok-o]#>#
[.tok-nf]#getHandledType#[.tok-o]#()# [.tok-o]#\{# [.tok-k]#return#
[.tok-n]#Process#[.tok-o]#.#[.tok-na]#class#[.tok-o]#;# [.tok-o]#}#
[.tok-kd]#protected# [.tok-kt]#void#
[.tok-nf]#executeParse#[.tok-o]#(#[.tok-n]#BpmnParse#
[.tok-n]#bpmnParse#[.tok-o]#,# [.tok-n]#Process#
[.tok-n]#element#[.tok-o]#)# [.tok-o]#\{# [.tok-o]#..# [.tok-o]#}#
[.tok-o]#}#

*Important note:* when writing custom parse handler, do not use any of
the internal classes that are used to parse the BPMN 2.0 constructs.
This will cause difficult to find bugs. The safe way to implement a
custom handler is to implement the _BpmnParseHandler_ interface or
extends the internal abstract class
_org.activiti.engine.impl.bpmn.parser.handler.AbstractBpmnParseHandler_.

It is possible (but less common) to replace the default
`BpmnParseHandler` instances that are responsible for the parsing of the
BPMN 2.0 elements to the internal Activiti model. This can be done by
following snippet of logic:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"customDefaultBpmnParseHandlers"#[.tok-nt]#>#
[.tok-nt]#<list># ... [.tok-nt]#</list># [.tok-nt]#</property>#

A simple example could for example be to force all of the service tasks
to be asynchronous:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
----

[.tok-kd]#public# [.tok-kd]#class#
[.tok-nc]#CustomUserTaskBpmnParseHandler# [.tok-kd]#extends#
[.tok-n]#ServiceTaskParseHandler# [.tok-o]#\{# [.tok-kd]#protected#
[.tok-kt]#void# [.tok-nf]#executeParse#[.tok-o]#(#[.tok-n]#BpmnParse#
[.tok-n]#bpmnParse#[.tok-o]#,# [.tok-n]#ServiceTask#
[.tok-n]#serviceTask#[.tok-o]#)# [.tok-o]#\{# [.tok-c1]#// Do the
regular stuff#
[.tok-kd]#super#[.tok-o]#.#[.tok-na]#executeParse#[.tok-o]#(#[.tok-n]#bpmnParse#[.tok-o]#,#
[.tok-n]#serviceTask#[.tok-o]#);# [.tok-c1]#// Make always async#
[.tok-n]#ActivityImpl# [.tok-n]#activity# [.tok-o]#=#
[.tok-n]#findActivity#[.tok-o]#(#[.tok-n]#bpmnParse#[.tok-o]#,#
[.tok-n]#serviceTask#[.tok-o]#.#[.tok-na]#getId#[.tok-o]#());#
[.tok-n]#activity#[.tok-o]#.#[.tok-na]#setAsync#[.tok-o]#(#[.tok-kc]#true#[.tok-o]#);#
[.tok-o]#}# [.tok-o]#}#

[[advanced.uuid.generator]]
== 16.3. UUID id generator for high concurrency

In some (very) high concurrency load cases, the default id generator may
cause exceptions due to not being able to fetch new id blocks quickly
enough. Every process engine has one id generator. The default id
generator reserves a block of ids in the database, such that no other
engine will be able to use id’s from the same block. During engine
operations, when the default id generator notices that the id block is
used up, a new transaction is started to fetch a new block. In (very)
limited use cases this can cause problems when there is a real high
load. For most use cases the default id generator is more than
sufficient. The default `org.activiti.engine.impl.db.DbIdGenerator` also
has a property `idBlockSize` which can be configured to set the size of
the reserved block of ids and to tweak the behavior of the id fetching.

The alternative to the default id generator is the
`org.activiti.engine.impl.persistence.StrongUuidGenerator`, which
generates a unique
http://en.wikipedia.org/wiki/Universally_unique_identifier[UUID] locally
and uses that as identifier for all entities. Since the UUID is
generated without the need for database access, it copes better with
very high concurrency use cases. Do note that performance may differ
from the default id generator (both positive and negative) depending on
the machine.

The UUID generator can be configured in the activiti configuration as
follows:

[source,pygments,highlight]
----
1
2
3
----

[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"idGenerator"#[.tok-nt]#>#
[.tok-nt]#<bean#
[.tok-na]#class=#[.tok-s]#"org.activiti.engine.impl.persistence.StrongUuidGenerator"#
[.tok-nt]#/># [.tok-nt]#</property>#

The use of the UUID id generator depends on the following extra
dependency:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<dependency>#
[.tok-nt]##<groupId>##com.fasterxml.uuid[.tok-nt]##</groupId>##
[.tok-nt]##<artifactId>##java-uuid-generator[.tok-nt]##</artifactId>##
[.tok-nt]##<version>##3.1.3[.tok-nt]##</version>##
[.tok-nt]#</dependency>#

[[advanced.tenancy]]
== 16.4. Multitenancy

Multitenancy in general is a concept where the software is capable of
serving multiple different organizations. Key is that the data is
partitioned and no organization can see the data of other ones. In this
context, such an organization (or a department, or a team or …​) is
called a _tenant_.

Note that this is fundamentally different from a multi-instance setup,
where an Activiti Process Engine instance is running for each
organization separately (and with a different database schema). Although
Activiti is lightweight, and running a Process Engine instance doesn’t
take much resources, it does add complexity and more maintenance. But,
for some use cases it might be the right solution.

Multitenancy in Activiti is mainly implemented around partitioning the
data. It is important to note that _Activiti does not enforce multi
tenancy rules_. This means it will not verify when querying and using
data whether the user doing the operation is belonging to the correct
tenant. This should be done in the layer calling the Activiti engine.
Activiti does make sure that tenant information can be stored and used
when retrieving process data.

When deploying process definition to the Activiti Process Engine it is
possible to pass a _tenant identifier_. This is a string (e.g. a UUID,
department id, etc.), limited to 256 characters which is uniquely
identifies the tenant:

[source,pygments,highlight]
----
1
2
3
4
----

[.tok-n]#repositoryService#[.tok-o]#.#[.tok-na]#createDeployment#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#addClassPathResource#[.tok-o]#(...)#
[.tok-o]#.#[.tok-na]#tenantId#[.tok-o]#(#[.tok-s]#"myTenantId"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#deploy#[.tok-o]#();#

Passing a tenant id during a deployment has following implications:

* All the process definitions contained in the deployment inherit the
tenant identifier from this deployment.
* All process instances started from those process definitions inherit
this tenant identifier from the process definition.
* All tasks created at runtime when executing the process instance
inherit this tenant identifier from the process instance. Standalone
tasks can have a tenant identifier too.
* All executions created during process instance execution inherit this
tenant identifier from the process instance.
* Firing a signal throw event (in the process itself or through the API)
can be done whilst providing a tenant identifier. The signal will only
be executed in the tenant context: i.e. if there are multiple signal
catch events with the same name, only the one with the correct tenant
identifier will actually be called.
* All jobs (timers and async continuations) inherit the tenant
identifier from either the process definition (e.g. timer start event)
or the process instance (when a job is created at runtime, e.g. an async
continuation). This could potentially be used for giving priority to
some tenants in a custom job executor.
* All the historic entities (historic process instance, task and
activities) inherit the tenant identifier from their runtime
counterparts.
* As a side note, models can have a tenant identifier too (models are
used e.g. by the Activiti Modeler to store BPMN 2.0 models).

To actually make use of the tenant identifier on the process data, all
the query API’s have the capability to filter on tenant. For example
(and can be replaced by the relevant query implementation of the other
entities):

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-n]#runtimeService#[.tok-o]#.#[.tok-na]#createProcessInstanceQuery#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#processInstanceTenantId#[.tok-o]#(#[.tok-s]#"myTenantId"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#processDefinitionKey#[.tok-o]#(#[.tok-s]#"myProcessDefinitionKey"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#variableValueEquals#[.tok-o]#(#[.tok-s]#"myVar"#[.tok-o]#,#
[.tok-s]#"someValue"#[.tok-o]#)# [.tok-o]#.#[.tok-na]#list#[.tok-o]#()#

The query API’s also allow to filter on the tenant identifier with
_like_ semantics and also to filter out entities without tenant id.

*Important implementation detail:* due to database quirks (more
specifically: null handling in unique constraints) the _default_ tenant
identifier value indicating _no tenant_ is the *empty string*. The
combination of (process definition key, process definition version,
tenant identifier) needs to be unique (and there is a database
constraint checking this). Also note that the tenant identifier
shouldn’t be set to null, as this will affect the queries since certain
databases (Oracle) treat empty string as a null value (that’s why the
query _.withoutTenantId_ does a check against the empty string or null).
This means that the same process definition (with same process
definition key) can be deployed for multiple tenants, each with their
own versioning. This does not affect the usage when tenancy is not used.

*Do note that all of the above does not conflict with running multiple
Activiti instances in a cluster.*

[Experimental] It is possible to change the tenant identifier by calling
the _changeDeploymentTenantId(String deploymentId, String newTenantId)_
method on the _repositoryService_. This will change the tenant
identifier everywhere it was inherited before. This can be useful when
going from a non-multitenant setup to a multitenant configuration. See
the Javadoc on the method for more detailed information.

[[advanced.custom.sql.queries]]
== 16.5. Execute custom SQL

The Activiti API allows for interacting with the database using a high
level API. For example, for retrieving data the Query API and the Native
Query API are powerful in its usage. However, for some use cases they
might not be flexible enough. The following section describes how a
completely custom SQL statement (select, insert, update and delete are
possible) can be executed against the Activiti data store, but
completely within the configured Process Engine (and thus levering the
transaction setup for example).

To define custom SQL statements, the Activiti engine leverages the
capabilities of its underlying framework, MyBatis. More info can be read
http://mybatis.github.io/mybatis-3/java-api.html[in the MyBatis user
guide].

[[_annotation_based_mapped_statements]]
=== 16.5.1. Annotation based Mapped Statements

The first thing to do when using Annotation based Mapped Statements, is
to create a MyBatis mapper class. For example, suppose that for some use
case not the whole task data is needed, but only a small subset of it. A
Mapper that could do this, looks as follows:

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-kd]#public# [.tok-kd]#interface# [.tok-nc]#MyTestMapper#
[.tok-o]#\{# [.tok-nd]#@Select#[.tok-o]#(#[.tok-s]#"SELECT ID_ as id,
NAME_ as name, CREATE_TIME_ as createTime FROM ACT_RU_TASK"#[.tok-o]#)#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#>># [.tok-nf]#selectTasks#[.tok-o]#();#
[.tok-o]#}#

This mapper must be provided to the Process Engine configuration as
follows:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

... [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"customMybatisMappers"#[.tok-nt]#>#
[.tok-nt]#<set>#
[.tok-nt]##<value>##org.activiti.standalone.cfg.MyTestMapper[.tok-nt]##</value>##
[.tok-nt]#</set># [.tok-nt]#</property># ...

Notice that this is an interface. The underlying MyBatis framework will
make an instance of it that can be used at runtime. Also notice that the
return value of the method is not typed, but a list of maps (which
corresponds to the list of rows with column values). Typing is possible
with the MyBatis mappers if wanted.

To execute the query above, the _managementService.executeCustomSql_
method must be used. This method takes in a _CustomSqlExecution_
instance. This is a wrapper that hides the internal bits of the engine
otherwise needed to make it work.

Unfortunately, Java generics make it a bit less readable than it could
have been. The two generic types below are the mapper class and the
return type class. However, the actual logic is simply to call the
mapper method and return its results (if applicable).

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
----

[.tok-n]#CustomSqlExecution#[.tok-o]#<#[.tok-n]#MyTestMapper#[.tok-o]#,#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#>>># [.tok-n]#customSqlExecution# [.tok-o]#=#
[.tok-k]#new#
[.tok-n]#AbstractCustomSqlExecution#[.tok-o]#<#[.tok-n]#MyTestMapper#[.tok-o]#,#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#>>>(#[.tok-n]#MyTestMapper#[.tok-o]#.#[.tok-na]#class#[.tok-o]#)#
[.tok-o]#\{# [.tok-kd]#public#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#>>#
[.tok-nf]#execute#[.tok-o]#(#[.tok-n]#MyTestMapper#
[.tok-n]#customMapper#[.tok-o]#)# [.tok-o]#\{# [.tok-k]#return#
[.tok-n]#customMapper#[.tok-o]#.#[.tok-na]#selectTasks#[.tok-o]#();#
[.tok-o]#}# [.tok-o]#};#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#>># [.tok-n]#results# [.tok-o]#=#
[.tok-n]#managementService#[.tok-o]#.#[.tok-na]#executeCustomSql#[.tok-o]#(#[.tok-n]#customSqlExecution#[.tok-o]#);#

The Map entries in the list above will only contain _id, name and create
time_ in this case and not the full task object.

Any SQL is possible when using the approach above. Another more complex
example:

[source,pygments,highlight]
----
1
2
3
4
5
6
----

[.tok-nd]#@Select#[.tok-o]#(\{# [.tok-s]#"SELECT task.ID_ as taskId,
variable.LONG_ as variableValue FROM ACT_RU_VARIABLE
variable"#[.tok-o]#,# [.tok-s]#"inner join ACT_RU_TASK task on
variable.TASK_ID_ = task.ID_"#[.tok-o]#,# [.tok-s]#"where variable.NAME_
= #\{variableName}"# [.tok-o]#})#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#Map#[.tok-o]#<#[.tok-n]#String#[.tok-o]#,#
[.tok-n]#Object#[.tok-o]#>>#
[.tok-nf]#selectTaskWithSpecificVariable#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#variableName#[.tok-o]#);#

Using this method, the task table will be joined with the variables
table. Only where the variable has a certain name is retained, and the
task id and the corresponding numerical value is returned.

For a working example on using Annotation based Mapped Statements check
the unit test _org.activiti.standalone.cfg.CustomMybatisMapperTest_ and
other classes and resources in folders
src/test/java/org/activiti/standalone/cfg/ and
src/test/resources/org/activiti/standalone/cfg/

[[_xml_based_mapped_statements]]
== 16.5.2. XML based Mapped Statements

When using XML based Mapped Statements, statements are defined in XML
files. For the use case where not the whole task data is needed, but
only a small subset of it. The XML file can look as follows:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
----

[.tok-nt]#<mapper#
[.tok-na]#namespace=#[.tok-s]#"org.activiti.standalone.cfg.TaskMapper"#[.tok-nt]#>#
[.tok-nt]#<resultMap# [.tok-na]#id=#[.tok-s]#"customTaskResultMap"#
[.tok-na]#type=#[.tok-s]#"org.activiti.standalone.cfg.CustomTask"#[.tok-nt]#>#
[.tok-nt]#<id# [.tok-na]#property=#[.tok-s]#"id"#
[.tok-na]#column=#[.tok-s]#"ID_"#
[.tok-na]#jdbcType=#[.tok-s]#"VARCHAR"#[.tok-nt]#/># [.tok-nt]#<result#
[.tok-na]#property=#[.tok-s]#"name"# [.tok-na]#column=#[.tok-s]#"NAME_"#
[.tok-na]#jdbcType=#[.tok-s]#"VARCHAR"#[.tok-nt]#/># [.tok-nt]#<result#
[.tok-na]#property=#[.tok-s]#"createTime"#
[.tok-na]#column=#[.tok-s]#"CREATE_TIME_"#
[.tok-na]#jdbcType=#[.tok-s]#"TIMESTAMP"# [.tok-nt]#/>#
[.tok-nt]#</resultMap># [.tok-nt]#<select#
[.tok-na]#id=#[.tok-s]#"selectCustomTaskList"#
[.tok-na]#resultMap=#[.tok-s]#"customTaskResultMap"#[.tok-nt]#># select
RES.ID_, RES.NAME_, RES.CREATE_TIME_ from ACT_RU_TASK RES
[.tok-nt]#</select># [.tok-nt]#</mapper>#

Results are mapped to instances of
_org.activiti.standalone.cfg.CustomTask_ class which can look as
follows:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
----

[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#CustomTask# [.tok-o]#\{#
[.tok-kd]#protected# [.tok-n]#String# [.tok-n]#id#[.tok-o]#;#
[.tok-kd]#protected# [.tok-n]#String# [.tok-n]#name#[.tok-o]#;#
[.tok-kd]#protected# [.tok-n]#Date# [.tok-n]#createTime#[.tok-o]#;#
[.tok-kd]#public# [.tok-n]#String# [.tok-nf]#getId#[.tok-o]#()#
[.tok-o]#\{# [.tok-k]#return# [.tok-n]#id#[.tok-o]#;# [.tok-o]#}#
[.tok-kd]#public# [.tok-n]#String# [.tok-nf]#getName#[.tok-o]#()#
[.tok-o]#\{# [.tok-k]#return# [.tok-n]#name#[.tok-o]#;# [.tok-o]#}#
[.tok-kd]#public# [.tok-n]#Date# [.tok-nf]#getCreateTime#[.tok-o]#()#
[.tok-o]#\{# [.tok-k]#return# [.tok-n]#createTime#[.tok-o]#;#
[.tok-o]#}# [.tok-o]#}#

Mapper XML files must be provided to the Process Engine configuration as
follows:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
----

... [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"customMybatisXMLMappers"#[.tok-nt]#>#
[.tok-nt]#<set>#
[.tok-nt]##<value>##org/activiti/standalone/cfg/custom-mappers/CustomTaskMapper.xml[.tok-nt]##</value>##
[.tok-nt]#</set># [.tok-nt]#</property># ...

The statement can be executed as follows:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
----

[.tok-n]#List#[.tok-o]#<#[.tok-n]#CustomTask#[.tok-o]#># [.tok-n]#tasks#
[.tok-o]#=#
[.tok-n]#managementService#[.tok-o]#.#[.tok-na]#executeCommand#[.tok-o]#(#[.tok-k]#new#
[.tok-n]#Command#[.tok-o]#<#[.tok-n]#List#[.tok-o]#<#[.tok-n]#CustomTask#[.tok-o]#>>()#
[.tok-o]#\{#
[.tok-nd]#@SuppressWarnings#[.tok-o]#(#[.tok-s]#"unchecked"#[.tok-o]#)#
[.tok-nd]#@Override# [.tok-kd]#public#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#CustomTask#[.tok-o]#>#
[.tok-nf]#execute#[.tok-o]#(#[.tok-n]#CommandContext#
[.tok-n]#commandContext#[.tok-o]#)# [.tok-o]#\{# [.tok-k]#return#
[.tok-o]#(#[.tok-n]#List#[.tok-o]#<#[.tok-n]#CustomTask#[.tok-o]#>)#
[.tok-n]#commandContext#[.tok-o]#.#[.tok-na]#getDbSqlSession#[.tok-o]#().#[.tok-na]#selectList#[.tok-o]#(#[.tok-s]#"selectCustomTaskList"#[.tok-o]#);#
[.tok-o]#}# [.tok-o]#});#

For uses cases that require more complicated statements, XML Mapped
Statements can be helpful. Since Activiti uses XML Mapped Statements
internally, it’s possible to make use of the underlying capabilities.

Suppose that for some use case the ability to query attachments data is
required based on id, name, type, userId, etc! To fulfill the use case a
query class _AttachmentQuery_ that extends
_org.activiti.engine.impl.AbstractQuery_ can be created as follows:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
----

[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#AttachmentQuery#
[.tok-kd]#extends#
[.tok-n]#AbstractQuery#[.tok-o]#<#[.tok-n]#AttachmentQuery#[.tok-o]#,#
[.tok-n]#Attachment#[.tok-o]#># [.tok-o]#\{# [.tok-kd]#protected#
[.tok-n]#String# [.tok-n]#attachmentId#[.tok-o]#;# [.tok-kd]#protected#
[.tok-n]#String# [.tok-n]#attachmentName#[.tok-o]#;#
[.tok-kd]#protected# [.tok-n]#String#
[.tok-n]#attachmentType#[.tok-o]#;# [.tok-kd]#protected#
[.tok-n]#String# [.tok-n]#userId#[.tok-o]#;# [.tok-kd]#public#
[.tok-nf]#AttachmentQuery#[.tok-o]#(#[.tok-n]#ManagementService#
[.tok-n]#managementService#[.tok-o]#)# [.tok-o]#\{#
[.tok-kd]#super#[.tok-o]#(#[.tok-n]#managementService#[.tok-o]#);#
[.tok-o]#}# [.tok-kd]#public# [.tok-n]#AttachmentQuery#
[.tok-nf]#attachmentId#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#attachmentId#[.tok-o]#)\{#
[.tok-k]#this#[.tok-o]#.#[.tok-na]#attachmentId# [.tok-o]#=#
[.tok-n]#attachmentId#[.tok-o]#;# [.tok-k]#return#
[.tok-k]#this#[.tok-o]#;# [.tok-o]#}# [.tok-kd]#public#
[.tok-n]#AttachmentQuery#
[.tok-nf]#attachmentName#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#attachmentName#[.tok-o]#)\{#
[.tok-k]#this#[.tok-o]#.#[.tok-na]#attachmentName# [.tok-o]#=#
[.tok-n]#attachmentName#[.tok-o]#;# [.tok-k]#return#
[.tok-k]#this#[.tok-o]#;# [.tok-o]#}# [.tok-kd]#public#
[.tok-n]#AttachmentQuery#
[.tok-nf]#attachmentType#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#attachmentType#[.tok-o]#)\{#
[.tok-k]#this#[.tok-o]#.#[.tok-na]#attachmentType# [.tok-o]#=#
[.tok-n]#attachmentType#[.tok-o]#;# [.tok-k]#return#
[.tok-k]#this#[.tok-o]#;# [.tok-o]#}# [.tok-kd]#public#
[.tok-n]#AttachmentQuery# [.tok-nf]#userId#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#userId#[.tok-o]#)\{# [.tok-k]#this#[.tok-o]#.#[.tok-na]#userId#
[.tok-o]#=# [.tok-n]#userId#[.tok-o]#;# [.tok-k]#return#
[.tok-k]#this#[.tok-o]#;# [.tok-o]#}# [.tok-nd]#@Override#
[.tok-kd]#public# [.tok-kt]#long#
[.tok-nf]#executeCount#[.tok-o]#(#[.tok-n]#CommandContext#
[.tok-n]#commandContext#[.tok-o]#)# [.tok-o]#\{# [.tok-k]#return#
[.tok-o]#(#[.tok-n]#Long#[.tok-o]#)#
[.tok-n]#commandContext#[.tok-o]#.#[.tok-na]#getDbSqlSession#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#selectOne#[.tok-o]#(#[.tok-s]#"selectAttachmentCountByQueryCriteria"#[.tok-o]#,#
[.tok-k]#this#[.tok-o]#);# [.tok-o]#}# [.tok-nd]#@Override#
[.tok-kd]#public#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#Attachment#[.tok-o]#>#
[.tok-nf]#executeList#[.tok-o]#(#[.tok-n]#CommandContext#
[.tok-n]#commandContext#[.tok-o]#,# [.tok-n]#Page#
[.tok-n]#page#[.tok-o]#)# [.tok-o]#\{# [.tok-k]#return#
[.tok-n]#commandContext#[.tok-o]#.#[.tok-na]#getDbSqlSession#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#selectList#[.tok-o]#(#[.tok-s]#"selectAttachmentByQueryCriteria"#[.tok-o]#,#
[.tok-k]#this#[.tok-o]#);# [.tok-o]#}#

Note that when extending _AbstractQuery_ extended classes should pass an
instance of _ManagementService_ to super constructor and methods
_executeCount_ and _executeList_ need to be implemented to call the
mapped statements.

The XML file containing the mapped statements can look as follows:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
----

[.tok-nt]#<mapper#
[.tok-na]#namespace=#[.tok-s]#"org.activiti.standalone.cfg.AttachmentMapper"#[.tok-nt]#>#
[.tok-nt]#<select#
[.tok-na]#id=#[.tok-s]#"selectAttachmentCountByQueryCriteria"#
[.tok-na]#parameterType=#[.tok-s]#"org.activiti.standalone.cfg.AttachmentQuery"#
[.tok-na]#resultType=#[.tok-s]#"long"#[.tok-nt]#># select count(distinct
RES.ID_) [.tok-nt]#<include#
[.tok-na]#refid=#[.tok-s]#"selectAttachmentByQueryCriteriaSql"#[.tok-nt]#/>#
[.tok-nt]#</select># [.tok-nt]#<select#
[.tok-na]#id=#[.tok-s]#"selectAttachmentByQueryCriteria"#
[.tok-na]#parameterType=#[.tok-s]#"org.activiti.standalone.cfg.AttachmentQuery"#
[.tok-na]#resultMap=#[.tok-s]#"org.activiti.engine.impl.persistence.entity.AttachmentEntity.attachmentResultMap"#[.tok-nt]#>#
$\{limitBefore} select distinct RES.* $\{limitBetween}
[.tok-nt]#<include#
[.tok-na]#refid=#[.tok-s]#"selectAttachmentByQueryCriteriaSql"#[.tok-nt]#/>#
$\{orderBy} $\{limitAfter} [.tok-nt]#</select># [.tok-nt]#<sql#
[.tok-na]#id=#[.tok-s]#"selectAttachmentByQueryCriteriaSql"#[.tok-nt]#>#
from $\{prefix}ACT_HI_ATTACHMENT RES [.tok-nt]#<where># [.tok-nt]#<if#
[.tok-na]#test=#[.tok-s]#"attachmentId != null"#[.tok-nt]#># RES.ID_ =
#\{attachmentId} [.tok-nt]#</if># [.tok-nt]#<if#
[.tok-na]#test=#[.tok-s]#"attachmentName != null"#[.tok-nt]#># and
RES.NAME_ = #\{attachmentName} [.tok-nt]#</if># [.tok-nt]#<if#
[.tok-na]#test=#[.tok-s]#"attachmentType != null"#[.tok-nt]#># and
RES.TYPE_ = #\{attachmentType} [.tok-nt]#</if># [.tok-nt]#<if#
[.tok-na]#test=#[.tok-s]#"userId != null"#[.tok-nt]#># and RES.USER_ID_
= #\{userId} [.tok-nt]#</if># [.tok-nt]#</where># [.tok-nt]#</sql>#
[.tok-nt]#</mapper>#

Capabilities such as pagination, ordering, table name prefixing are
available and can be used in the statements (since the parameterType is
a subclass of _AbstractQuery_). Note that to map results the predefined
_org.activiti.engine.impl.persistence.entity.AttachmentEntity.attachmentResultMap_
resultMap can be used.

Finally, the _AttachmentQuery_ can be used as follows:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
----

[.tok-o]#....# [.tok-c1]#// Get the total number of attachments#
[.tok-kt]#long# [.tok-n]#count# [.tok-o]#=# [.tok-k]#new#
[.tok-n]#AttachmentQuery#[.tok-o]#(#[.tok-n]#managementService#[.tok-o]#).#[.tok-na]#count#[.tok-o]#();#
[.tok-c1]#// Get attachment with id 10025# [.tok-n]#Attachment#
[.tok-n]#attachment# [.tok-o]#=# [.tok-k]#new#
[.tok-n]#AttachmentQuery#[.tok-o]#(#[.tok-n]#managementService#[.tok-o]#).#[.tok-na]#attachmentId#[.tok-o]#(#[.tok-s]#"10025"#[.tok-o]#).#[.tok-na]#singleResult#[.tok-o]#();#
[.tok-c1]#// Get first 10 attachments#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#Attachment#[.tok-o]#>#
[.tok-n]#attachments# [.tok-o]#=# [.tok-k]#new#
[.tok-n]#AttachmentQuery#[.tok-o]#(#[.tok-n]#managementService#[.tok-o]#).#[.tok-na]#listPage#[.tok-o]#(#[.tok-mi]#0#[.tok-o]#,#
[.tok-mi]#10#[.tok-o]#);# [.tok-c1]#// Get all attachments uploaded by
user kermit# [.tok-n]#attachments# [.tok-o]#=# [.tok-k]#new#
[.tok-n]#AttachmentQuery#[.tok-o]#(#[.tok-n]#managementService#[.tok-o]#).#[.tok-na]#userId#[.tok-o]#(#[.tok-s]#"kermit"#[.tok-o]#).#[.tok-na]#list#[.tok-o]#();#
[.tok-o]#....#

For working examples on using XML Mapped Statements check the unit test
_org.activiti.standalone.cfg.CustomMybatisXMLMapperTest_ and other
classes and resources in folders
src/test/java/org/activiti/standalone/cfg/ and
src/test/resources/org/activiti/standalone/cfg/

[[advanced.process.engine.configurators]]
== 16.6. Advanced Process Engine configuration with a ProcessEngineConfigurator

An advanced way of hooking into the process engine configuration is
through the use of a _ProcessEngineConfigurator_. The idea is that an
implementation of the
_org.activiti.engine.cfg.ProcessEngineConfigurator_ interface is created
and injected into the process engine configuration:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
----

[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"processEngineConfiguration"#
[.tok-na]#class=#[.tok-s]#"...SomeProcessEngineConfigurationClass"#[.tok-nt]#>#
... [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"configurators"#[.tok-nt]#># [.tok-nt]#<list>#
[.tok-nt]#<bean#
[.tok-na]#class=#[.tok-s]#"com.mycompany.MyConfigurator"#[.tok-nt]#>#
... [.tok-nt]#</bean># [.tok-nt]#</list># [.tok-nt]#</property># ...
[.tok-nt]#</bean>#

There are two methods required to implement this interface. The
_configure_ method, which gets a _ProcessEngineConfiguration_ instance
as parameter. The custom configuration can be added this way, and this
method will guaranteed be called *before the process engine is created,
but after all default configuration has been done*. The other method is
the _getPriority_ method, which allows for ordering the configurators in
the case where some configurators are dependent on each other.

An example of such a configurator is the link:#chapter_ldap[LDAP
integration], where the configurator is used to replace the default user
and group manager classes with one that is capable of handling an LDAP
user store. So basically a configurator allows to change or tweak the
process engine quite heavily and is meant for very advanced use cases.
Another example is to swap the process definition cache with a
customized version:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
----

[.tok-kd]#public# [.tok-kd]#class#
[.tok-nc]#ProcessDefinitionCacheConfigurator# [.tok-kd]#extends#
[.tok-n]#AbstractProcessEngineConfigurator# [.tok-o]#\{#
[.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#configure#[.tok-o]#(#[.tok-n]#ProcessEngineConfigurationImpl#
[.tok-n]#processEngineConfiguration#[.tok-o]#)# [.tok-o]#\{#
[.tok-n]#MyCache# [.tok-n]#myCache# [.tok-o]#=# [.tok-k]#new#
[.tok-n]#MyCache#[.tok-o]#();#
[.tok-n]#processEngineConfiguration#[.tok-o]#.#[.tok-na]#setProcessDefinitionCache#[.tok-o]#(#[.tok-n]#enterpriseProcessDefinitionCache#[.tok-o]#);#
[.tok-o]#}# [.tok-o]#}#

Process Engine configurators can also be auto discovered from the
classpath using the
http://docs.oracle.com/javase/7/docs/api/java/util/ServiceLoader.html[ServiceLoader]
approach. This means that a jar with the configurator implementation
must be put on the classpath, containing a file in the
_META-INF/services_ folder in the jar called
*org.activiti.engine.cfg.ProcessEngineConfigurator*. The content of the
file needs to be the fully qualified classname of the custom
implementation. When the process engine is booted, the logging will show
that these configurators are found:

....
INFO  org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl  - Found 1 auto-discoverable Process Engine Configurators
INFO  org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl  - Found 1 Process Engine Configurators in total:
INFO  org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl  - class org.activiti.MyCustomConfigurator
....

Note that this ServiceLoader approach might not work in certain
environments. It can be explicitly disabled using the
_enableConfiguratorServiceLoader_ property of the
ProcessEngineConfiguration (true by default).

[[advanced.task.query.switching]]
== 16.7. Advanced query API: seamless switching between runtime and historic task querying

One core component of any BPM user interface is the task list.
Typically, end users work on open, runtime tasks, filtering their inbox
with various setting. Often also the historic tasks need to be displayed
in those lists, with similar filtering. To make that code-wise easier,
the _TaskQuery_ and _HistoricTaskInstanceQuery_ both have a shared
parent interface, which contains all common operations (and most of the
operations are common).

This common interface is the _org.activiti.engine.task.TaskInfoQuery_
class. Both _org.activiti.engine.task.Task_ and
_org.activiti.engine.task.HistoricTaskInstance_ have a common superclass
_org.activiti.engine.task.TaskInfo_ (with common properties) which is
returned from e.g. the _list()_ method. However, Java generics are
sometimes more harming than helping: if you want to use the
_TaskInfoQuery_ type directly, it would look like this:

[source,pygments,highlight]
----
1
----

[.tok-n]#TaskInfoQuery#[.tok-o]#<?# [.tok-kd]#extends#
[.tok-n]#TaskInfoQuery#[.tok-o]#<?,?>,# [.tok-o]#?# [.tok-kd]#extends#
[.tok-n]#TaskInfo#[.tok-o]#># [.tok-n]#taskInfoQuery#

Ugh, Right. To _solve_ this, a
_org.activiti.engine.task.TaskInfoQueryWrapper_ class that can be used
to avoid the generics (the following code could come from REST code that
returns a task list where the user can switch between open and completed
tasks):

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
----

[.tok-n]#TaskInfoQueryWrapper# [.tok-n]#taskInfoQueryWrapper#
[.tok-o]#=# [.tok-kc]#null#[.tok-o]#;# [.tok-k]#if#
[.tok-o]#(#[.tok-n]#runtimeQuery#[.tok-o]#)# [.tok-o]#\{#
[.tok-n]#taskInfoQueryWrapper# [.tok-o]#=# [.tok-k]#new#
[.tok-n]#TaskInfoQueryWrapper#[.tok-o]#(#[.tok-n]#taskService#[.tok-o]#.#[.tok-na]#createTaskQuery#[.tok-o]#());#
[.tok-o]#}# [.tok-k]#else# [.tok-o]#\{# [.tok-n]#taskInfoQueryWrapper#
[.tok-o]#=# [.tok-k]#new#
[.tok-n]#TaskInfoQueryWrapper#[.tok-o]#(#[.tok-n]#historyService#[.tok-o]#.#[.tok-na]#createHistoricTaskInstanceQuery#[.tok-o]#());#
[.tok-o]#}# [.tok-n]#List#[.tok-o]#<?# [.tok-kd]#extends#
[.tok-n]#TaskInfo#[.tok-o]#># [.tok-n]#taskInfos# [.tok-o]#=#
[.tok-n]#taskInfoQueryWrapper#[.tok-o]#.#[.tok-na]#getTaskInfoQuery#[.tok-o]#().#[.tok-na]#or#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#taskNameLike#[.tok-o]#(#[.tok-s]#"%k1%"#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#taskDueAfter#[.tok-o]#(#[.tok-k]#new#
[.tok-n]#Date#[.tok-o]#(#[.tok-n]#now#[.tok-o]#.#[.tok-na]#getTime#[.tok-o]#()#
[.tok-o]#+# [.tok-o]#(#[.tok-mi]#3# [.tok-o]#*# [.tok-mi]#24L#
[.tok-o]#*# [.tok-mi]#60L# [.tok-o]#*# [.tok-mi]#60L# [.tok-o]#*#
[.tok-mi]#1000L#[.tok-o]#)))# [.tok-o]#.#[.tok-na]#endOr#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#list#[.tok-o]#();#

[[advanced.custom.session.manager]]
== 16.8. Custom identity management by overriding standard SessionFactory

If you do not want to use a full _ProcessEngineConfigurator_
implementation like in the link:#chapter_ldap[LDAP integration], but
still want to plug in your custom identity management framework, then
you can also override the _SessionFactory_ classes directly in the
_ProcessEngineConfiguration_. In Spring this can be easily done by
adding the following to the _ProcessEngineConfiguration_ bean
definition:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
----

[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"processEngineConfiguration"#
[.tok-na]#class=#[.tok-s]#"...SomeProcessEngineConfigurationClass"#[.tok-nt]#>#
... [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"customSessionFactories"#[.tok-nt]#>#
[.tok-nt]#<list># [.tok-nt]#<bean#
[.tok-na]#class=#[.tok-s]#"com.mycompany.MyGroupManagerFactory"#[.tok-nt]#/>#
[.tok-nt]#<bean#
[.tok-na]#class=#[.tok-s]#"com.mycompany.MyUserManagerFactory"#[.tok-nt]#/>#
[.tok-nt]#</list># [.tok-nt]#</property># ... [.tok-nt]#</bean>#

The _MyGroupManagerFactory_ and _MyUserManagerFactory_ need to implement
the _org.activiti.engine.impl.interceptor.SessionFactory_ interface. The
call to _openSession()_ returns the custom class implementation that
does the actual identity management. For groups this is a class that
inherits from
_org.activiti.engine.impl.persistence.entity.GroupEntityManager_ and for
managing users it must inherit from
_org.activiti.engine.impl.persistence.entity.UserEntityManager_. The
following code sample contains a custom manager factory for groups:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
----

[.tok-kn]#package# [.tok-nn]#com.mycompany#[.tok-o]#;# [.tok-kn]#import#
[.tok-nn]#org.activiti.engine.impl.interceptor.Session#[.tok-o]#;#
[.tok-kn]#import#
[.tok-nn]#org.activiti.engine.impl.interceptor.SessionFactory#[.tok-o]#;#
[.tok-kn]#import#
[.tok-nn]#org.activiti.engine.impl.persistence.entity.GroupIdentityManager#[.tok-o]#;#
[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#MyGroupManagerFactory#
[.tok-kd]#implements# [.tok-n]#SessionFactory# [.tok-o]#\{#
[.tok-nd]#@Override# [.tok-kd]#public# [.tok-n]#Class#[.tok-o]#<?>#
[.tok-n]#getSessionType#[.tok-o]#()# [.tok-o]#\{# [.tok-k]#return#
[.tok-n]#GroupIdentityManager#[.tok-o]#.#[.tok-na]#class#[.tok-o]#;#
[.tok-o]#}# [.tok-nd]#@Override# [.tok-kd]#public# [.tok-n]#Session#
[.tok-nf]#openSession#[.tok-o]#()# [.tok-o]#\{# [.tok-k]#return#
[.tok-k]#new# [.tok-n]#MyCompanyGroupManager#[.tok-o]#();# [.tok-o]#}#
[.tok-o]#}#

The _MyCompanyGroupManager_ created by the factory is doing the actual
work. You do not need to override all members of _GroupEntityManager_
though, just the ones required for your use case. The following sample
provides an indication of how this may look like (only a selection of
members are shown):

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
----

[.tok-kd]#public# [.tok-kd]#class# [.tok-nc]#MyCompanyGroupManager#
[.tok-kd]#extends# [.tok-n]#GroupEntityManager# [.tok-o]#\{#
[.tok-kd]#private# [.tok-kd]#static# [.tok-n]#Logger# [.tok-n]#log#
[.tok-o]#=#
[.tok-n]#LoggerFactory#[.tok-o]#.#[.tok-na]#getLogger#[.tok-o]#(#[.tok-n]#MyCompanyGroupManager#[.tok-o]#.#[.tok-na]#class#[.tok-o]#);#
[.tok-nd]#@Override# [.tok-kd]#public#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#Group#[.tok-o]#>#
[.tok-nf]#findGroupsByUser#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#userId#[.tok-o]#)# [.tok-o]#\{#
[.tok-n]#log#[.tok-o]#.#[.tok-na]#debug#[.tok-o]#(#[.tok-s]#"findGroupByUser
called with userId: "# [.tok-o]#+# [.tok-n]#userId#[.tok-o]#);#
[.tok-k]#return#
[.tok-kd]#super#[.tok-o]#.#[.tok-na]#findGroupsByUser#[.tok-o]#(#[.tok-n]#userId#[.tok-o]#);#
[.tok-o]#}# [.tok-nd]#@Override# [.tok-kd]#public#
[.tok-n]#List#[.tok-o]#<#[.tok-n]#Group#[.tok-o]#>#
[.tok-nf]#findGroupByQueryCriteria#[.tok-o]#(#[.tok-n]#GroupQueryImpl#
[.tok-n]#query#[.tok-o]#,# [.tok-n]#Page# [.tok-n]#page#[.tok-o]#)#
[.tok-o]#\{#
[.tok-n]#log#[.tok-o]#.#[.tok-na]#debug#[.tok-o]#(#[.tok-s]#"findGroupByQueryCriteria
called, query: "# [.tok-o]#+# [.tok-n]#query# [.tok-o]#+# [.tok-s]#"
page: "# [.tok-o]#+# [.tok-n]#page#[.tok-o]#);# [.tok-k]#return#
[.tok-kd]#super#[.tok-o]#.#[.tok-na]#findGroupByQueryCriteria#[.tok-o]#(#[.tok-n]#query#[.tok-o]#,#
[.tok-n]#page#[.tok-o]#);# [.tok-o]#}# [.tok-nd]#@Override#
[.tok-kd]#public# [.tok-kt]#long#
[.tok-nf]#findGroupCountByQueryCriteria#[.tok-o]#(#[.tok-n]#GroupQueryImpl#
[.tok-n]#query#[.tok-o]#)# [.tok-o]#\{#
[.tok-n]#log#[.tok-o]#.#[.tok-na]#debug#[.tok-o]#(#[.tok-s]#"findGroupCountByQueryCriteria
called, query: "# [.tok-o]#+# [.tok-n]#query#[.tok-o]#);#
[.tok-k]#return#
[.tok-kd]#super#[.tok-o]#.#[.tok-na]#findGroupCountByQueryCriteria#[.tok-o]#(#[.tok-n]#query#[.tok-o]#);#
[.tok-o]#}# [.tok-nd]#@Override# [.tok-kd]#public# [.tok-n]#Group#
[.tok-nf]#createNewGroup#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#groupId#[.tok-o]#)# [.tok-o]#\{# [.tok-k]#throw# [.tok-k]#new#
[.tok-n]#UnsupportedOperationException#[.tok-o]#();# [.tok-o]#}#
[.tok-nd]#@Override# [.tok-kd]#public# [.tok-kt]#void#
[.tok-nf]#deleteGroup#[.tok-o]#(#[.tok-n]#String#
[.tok-n]#groupId#[.tok-o]#)# [.tok-o]#\{# [.tok-k]#throw# [.tok-k]#new#
[.tok-n]#UnsupportedOperationException#[.tok-o]#();# [.tok-o]#}#
[.tok-o]#}#

Add your own implementation in the appropriate methods to plugin your
own identity management solution. You have to figure out which member of
the base class must be overridden. For example the following call:

[source,pygments,highlight]
----
1
----

[.tok-kt]#long# [.tok-n]#potentialOwners# [.tok-o]#=#
[.tok-n]#identityService#[.tok-o]#.#[.tok-na]#createUserQuery#[.tok-o]#().#[.tok-na]#memberOfGroup#[.tok-o]#(#[.tok-s]#"management"#[.tok-o]#).#[.tok-na]#count#[.tok-o]#();#

leads to a call on the following member of the _UserIdentityManager_
interface:

[source,pygments,highlight]
----
1
----

[.tok-n]#List#[.tok-o]#<#[.tok-n]#User#[.tok-o]#>#
[.tok-nf]#findUserByQueryCriteria#[.tok-o]#(#[.tok-n]#UserQueryImpl#
[.tok-n]#query#[.tok-o]#,# [.tok-n]#Page# [.tok-n]#page#[.tok-o]#);#

The code for the link:#chapter_ldap[LDAP integration] contains full
examples of how to implement this. Check out the code on Github,
specifically the following classes
https://github.com/Activiti/Activiti/blob/master/modules/activiti-ldap/src/main/java/org/activiti/ldap/LDAPGroupManager.java[LDAPGroupManager]
and
https://github.com/Activiti/Activiti/blob/master/modules/activiti-ldap/src/main/java/org/activiti/ldap/LDAPUserManager.java[LDAPUserManager].

[[advanced.safe.bpmn.xml]]
== 16.9. Enable safe BPMN 2.0 xml

In most cases the BPMN 2.0 processes that are being deployed to the
Activiti engine are under tight control of e.g. the development team.
However, in some use cases it might be desirable to upload arbitrary
BPMN 2.0 xml to the engine. In that case, take into consideration that a
user with bad intentions can bring the server down as described
http://www.jorambarrez.be/blog/2013/02/19/uploading-a-funny-xml-can-bring-down-your-server/[here].

To avoid the attacks described in the link above, a property
_enableSafeBpmnXml_ can be set on the process engine configuration:

[source,pygments,highlight]
----
1
----

[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"enableSafeBpmnXml"#
[.tok-na]#value=#[.tok-s]#"true"#[.tok-nt]#/>#

*By default this feature is disabled!* The reason for this is that it
relies on the availability of the
http://download.java.net/jdk7/archive/b123/docs/api/javax/xml/transform/stax/StAXSource.html[StaxSource]
class. Unfortunately, on some platforms (e.g. JDK 6, JBoss, etc.) this
class is unavailable (due to older xml parser implementation) and thus
the safe BPMN 2.0 xml feature cannot be enabled.

If the platform on which Activiti runs does support it, do enable this
feature.

[[advanced.event.logging]]
== 16.10. Event logging (Experimental)

As of Activiti version 5.16, an (experimental) event logging mechanism
has been introduced. The logging mechanism builds upon the
general-purpose link:#eventDispatcher[event mechanism of the Activiti
engine] and is disabled by default. The idea is that the events
originating from the engine are caught, and a map containing all the
event data (and some more) is created and provided to an
_org.activiti.engine.impl.event.logger.EventFlusher_ which will flush
this data to somewhere else. By default, simple database-backed event
handlers/flusher is used, which serializes the said map to JSON using
Jackson and stores it in the database as an _EventLogEntryEntity_
instance. The table required for this database logging is created by
default (called _ACT_EVT_LOG_). This table can be deleted if the event
logging is not used.

To enable the database logger:

[source,pygments,highlight]
----
1
----

[.tok-n]#processEngineConfiguration#[.tok-o]#.#[.tok-na]#setEnableDatabaseEventLogging#[.tok-o]#(#[.tok-kc]#true#[.tok-o]#);#

or at runtime:

[source,pygments,highlight]
----
1
2
----

databaseEventLogger = new
EventLogger(processEngineConfiguration.getClock());
runtimeService.addEventListener(databaseEventLogger);

The EventLogger class can be subclassed. In particular, the
_createEventFlusher()_ method needs to return an instance of the
_org.activiti.engine.impl.event.logger.EventFlusher_ interface if the
default database logging is not wanted. The
_managementService.getEventLogEntries(startLogNr, size);_ can be used to
retrieve the _EventLogEntryEntity_ instances through Activiti.

It is easy to see how this table data can now be used to feed the JSON
into a big data NoSQL store such as MongoDB, Elastic Search, etc. It is
also easy to see that the classes used here
(org.activiti.engine.impl.event.logger.EventLogger/EventFlusher and many
EventHandler classes) are pluggable and can be tweaked to your own use
case (eg not storing the JSON in the database, but firing it straight
onto a queue or big data store).

Note that this event logging mechanism is additional to the
_traditional_ history manager of Activiti. Although all the data is in
the database tables, it is not optimized for querying nor for easy
retrieval. The real use case is audit trailing and feeding it into a big
data store.

[[_disabling_bulk_inserts]]
== 16.11. Disabling bulk inserts

By default, the engine will group multiple insert statements for the
same database table together in a _bulk insert_, thus improving
performance. This has been tested and implemented for all supported
databases.

However, it could be a specific version of a supported and tested
database does not allow bulk inserts (we have for example a report for
DB2 on z/OS, although DB2 in general works), the bulk insert can be
disabled on the process engine configuration:

[source,pygments,highlight]
----
1
----

[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"bulkInsertEnabled"#
[.tok-na]#value=#[.tok-s]#"false"# [.tok-nt]#/>#

[[advancedSecureScripting]]
== 16.12. Secure Scripting

*Experimental*: the secure scripting feature has been added as part of
the Activiti 5.21 release.

By default, when using a link:#bpmnScriptTask[script task], the script
that is executed has similar capabilities as a Java delegate. It has
full access to the JVM, can run forever (due to infinite loops) or use
up a lot of memory. However, Java delegates need to be written and put
on the classpath in a jar and they have a different lifecyle from a
process definitions. End-users generally will not write Java delegates,
as this is a typical the job of a developer.

Scripts on the other hand are part of the process definition and its
lifecycle is the same. Script tasks don’t need the extra step of a jar
deployment, but can be executed from the moment the process definition
is deployed. Sometimes, scripts for script tasks are not written by
developers. Yet, this poses a problem as stated above: a script has full
access to the JVM and it is possible to block many system resources when
executing the script. Allowing scripts from just about anyone is thus
not a good idea.

To solve this problem, the _secure scripting_ feature can be enabled.
Currently, this feature is implemented for _javascript_ scripting only.
To enable it, add the _activiti-secure-javascript_ dependency to your
project. When using maven:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<dependency>#
[.tok-nt]##<groupId>##org.activiti[.tok-nt]##</groupId>##
[.tok-nt]##<artifactId>##activiti-secure-javascript[.tok-nt]##</artifactId>##
[.tok-nt]##<version>##$\{activiti.version}[.tok-nt]#</version>#
[.tok-nt]#</dependency>#

Adding this dependency will transitively bring in the Rhino dependency
(see
$https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino$$[]https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino).
Rhino is a javascript engine for the JDK. It used to be included in JDK
version 6 and 7 and was superseded by the Nashorn engine. However, the
Rhino project continued development after it was included in the JDK.
Many features (including the ones Activiti uses to implement the secure
scripting) were added afterwards. At the time of writing, the Nashorn
engine *does not* have the features that are needed to implement the
secure scripting feature.

This does mean that there could be (typically small) differences between
scripts (for example, _importPackage_ works on Rhino, but _load()_ has
to be used on Nashorn). The changes would be similar to switching from
JDK 7 to 8 scripts.

Configuring the secure scripting is done through a dedicated
_Configurator_ object that is passed to the process engine configuration
before the process engine is instantiated:

[source,pygments,highlight]
----
1
2
3
4
5
6
7
8
----

[.tok-n]#SecureJavascriptConfigurator# [.tok-n]#configurator#
[.tok-o]#=# [.tok-k]#new#
[.tok-n]#SecureJavascriptConfigurator#[.tok-o]#()#
[.tok-o]#.#[.tok-na]#setWhiteListedClasses#[.tok-o]#(#[.tok-k]#new#
[.tok-n]#HashSet#[.tok-o]#<#[.tok-n]#String#[.tok-o]#>(#[.tok-n]#Arrays#[.tok-o]#.#[.tok-na]#asList#[.tok-o]#(#[.tok-s]#"java.util.ArrayList"#[.tok-o]#)))#
[.tok-o]#.#[.tok-na]#setMaxStackDepth#[.tok-o]#(#[.tok-mi]#10#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#setMaxScriptExecutionTime#[.tok-o]#(#[.tok-mi]#3000L#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#setMaxMemoryUsed#[.tok-o]#(#[.tok-mi]#3145728L#[.tok-o]#)#
[.tok-o]#.#[.tok-na]#setNrOfInstructionsBeforeStateCheckCallback#[.tok-o]#(#[.tok-mi]#10#[.tok-o]#);#
[.tok-n]#processEngineConfig#[.tok-o]#.#[.tok-na]#addConfigurator#[.tok-o]#(#[.tok-n]#configurator#[.tok-o]#);#

Following settings are possible:

* *enableClassWhiteListing*: When true, all classes will be blacklisted
and all classes that want to be used will need to be whitelisted
individually. This gives tight control over what is exposed to scripts.
By default _false_.
* *whiteListedClasses*: a Set of Strings corresponding with fully
qualified classnames of the classes that are allowed to be used in the
script. For example, to expose the _execution_ object in a script, the
_org.activiti.engine.impl.persistence.entity.ExecutionEntityImpl_ String
needs to be added to this Set. By default _empty_.
* *maxStackDepth*: Limits the stack depth while calling functions within
a script. This can be used to avoid stackoverflow exceptions that occur
when recursively calling a method defined in the script. By default _-1_
(disabled).
* *maxScriptExecutionTime*: The maximum time a script is allowed to run.
By default _-1_ (disabled).
* *maxMemoryUsed*: The maximum memory, in bytes, that the script is
allowed to use. Note that the script engine itself takes a a certain
amount of memory that is counted here too. By default _-1_ (disabled).
* *nrOfInstructionsBeforeStateCheckCallback*: The maximum script
execution time and memory usage is implemented using a callback that is
called every x instructions of the script. Note that these are not
script instructions, but java byte code instructions (which means one
script line could be hundreds of byte code instructions). By default
100.

_Note:_ the _maxMemoryUsed_ setting can only be used by a JVM that
supports the com.sun.management.ThreadMXBean#getThreadAllocatedBytes()
method. The Oracle JDK has this.

There is also a secure variant of the ScriptExecutionListener and
ScriptTaskListener:
_org.activiti.scripting.secure.listener.SecureJavascriptExecutionListener_
and
_org.activiti.scripting.secure.listener.SecureJavascriptTaskListener_.

It’s used as follows:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
----

[.tok-nt]#<activiti:executionListener#
[.tok-na]#event=#[.tok-s]#"start"#
[.tok-na]#class=#[.tok-s]#"org.activiti.scripting.secure.listener.SecureJavascriptExecutionListener"#[.tok-nt]#>#
[.tok-nt]#<activiti:field#
[.tok-na]#name=#[.tok-s]#"script"#[.tok-nt]#>#
[.tok-nt]#<activiti:string># [.tok-cp]#<![CDATA[# [.tok-cp]#
execution.setVariable('test');# [.tok-cp]# ]]>#
[.tok-nt]#</activiti:string># [.tok-nt]#</activiti:field>#
[.tok-nt]#<activiti:field# [.tok-na]#name=#[.tok-s]#"language"#
[.tok-na]#stringValue=#[.tok-s]#"javascript"# [.tok-nt]#/>#
[.tok-nt]#</activiti:executionListener>#

For examples that demonstrate unsecure scripts and how they are made
secure by the _secure scripting_ feature, please check the
https://github.com/Activiti/Activiti/tree/master/modules/activiti-secure-javascript/src/test/resources[unit
tests on Github]

[[Tooling]]
== 17. Tooling

[[JMX]]
=== 17.1. JMX

[[jmxIntroduction]]
==== 17.1.1. Introduction

It is possible to connect to Activiti engine using standard Java
Management Extensions (JMX) technology in order to get information or to
change its behavior. Any standard JMX client can be used for that
purpose. Enabling and disabling Job Executor, deploy new process
definition files and deleting them are just samples of what could be
done using JMX without writing a single line of code.

[[jmxQuickStart]]
==== 17.1.2. Quick Start

By default JMX is not enabled. To enable JMX in its default
configuration, it is enough to add the activiti-jmx jar file to your
classpath, using Maven or by any other means. In case you are using
Maven, you can add proper dependency by adding the following lines in
your pom.xml:

[source,pygments,highlight]
----
1
2
3
4
5
----

[.tok-nt]#<dependency>#
[.tok-nt]##<groupId>##org.activiti[.tok-nt]##</groupId>##
[.tok-nt]##<artifactId>##activiti-jmx[.tok-nt]##</artifactId>##
[.tok-nt]##<version>##latest.version[.tok-nt]##</version>##
[.tok-nt]#</dependency>#

After adding the dependency and building process engine, the JMX
connection is ready to be used. Just run jconsole available in a
standard JDK distribution. In the list of local processes, you will see
the JVM containing Activiti. If for any reason the proper JVM is not
listed in "local processes" section, try connecting to it using this URL
in "Remote Process" section:

....
service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi/activiti
....

You can find the exact local URL in your log files. After connecting,
you can see the standard JVM statistics and MBeans. You can view
Activiti specific MBeans by selecting MBeans tab and select
"org.activiti.jmx.Mbeans" on the right panel. By selecting any MBean,
you can query information or change configuration. This snapshot shows
how the jconsole looks like:

Any JMX client not limited to jconsole can be used to access MBeans.
Most of data center monitoring tools have some connectors which enables
them to connect to JMX MBeans.

[[_attributes_and_operations]]
== 17.1.3. Attributes and operations

Here is a list available attributes and operations at this moment. This
list may extend in future releases based on needs.

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|MBean |Type |Name |Description
|ProcessDefinitionsMBean |Attribute |processDefinitions |`Id`, `Name`,
`Version`, `IsSuspended` properties of deployed process definitions as a
list of list of Strings

| |Attribute |deployments |`Id`, `Name`, `TenantId` properties of
current deployments

| |method |getProcessDefinitionById(String id) |`Id`, `Name`, `Version`
and `IsSuspended` properties of the process definition with given id

| |method |deleteDeployment(String id) |Deletes deployment with the
given `Id`

| |method |suspendProcessDefinitionById(String id) |Suspends the process
definition with the given `Id`

| |method |activatedProcessDefinitionById(String id) |Activates the
process definition with the given `Id`

| |method |suspendProcessDefinitionByKey(String id) |Suspends the
process definition with the given `key`

| |method |activatedProcessDefinitionByKey(String id) |Activates the
process definition with the given `key`

| |method |deployProcessDefinition(String resourceName, String
processDefinitionFile) |Deploys the process definition file

|JobExecutorMBean |attribute |isJobExecutorActivated |Returns true if
job executor is activated, false otherwise

| |method |setJobExecutorActivate(Boolean active) |Activates and
Deactivates Job executor based on the given boolean
|===

[[_configuration_3]]
== 17.1.4. Configuration

JMX uses default configuration to make it easy to deploy with the most
used configuration. However it is easy to change the default
configuration. You can do it programmatically or via configuration file.
The following code excerpt shows how this could be done in the
configuration file:

[source,pygments,highlight]
----
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
----

[.tok-nt]#<bean# [.tok-na]#id=#[.tok-s]#"processEngineConfiguration"#
[.tok-na]#class=#[.tok-s]#"...SomeProcessEngineConfigurationClass"#[.tok-nt]#>#
... [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"configurators"#[.tok-nt]#># [.tok-nt]#<list>#
[.tok-nt]#<bean#
[.tok-na]#class=#[.tok-s]#"org.activiti.management.jmx.JMXConfigurator"#[.tok-nt]#>#
[.tok-nt]#<property# [.tok-na]#name=#[.tok-s]#"connectorPort"#
[.tok-na]#value=#[.tok-s]#"1912"# [.tok-nt]#/># [.tok-nt]#<property#
[.tok-na]#name=#[.tok-s]#"serviceUrlPath"#
[.tok-na]#value=#[.tok-s]#"/jmxrmi/activiti"# [.tok-nt]#/># ...
[.tok-nt]#</bean># [.tok-nt]#</list># [.tok-nt]#</property>#
[.tok-nt]#</bean>#

This table shows what parameters you can configure along with their
default values:

[width="100%",cols="34%,33%,33%",options="header",]
|===
|Name |Default value |Description
|disabled |false |if set, JMX will not be started even in presence of
the dependency

|domain |org.activiti.jmx.Mbeans |Domain of MBean

|createConnector |true |if true, creates a connector for the started
MbeanServer

|MBeanDomain |DefaultDomain |domain of MBean server

|registryPort |1099 |appears in the service URL as registry port

|serviceUrlPath |/jmxrmi/activiti |appears in the service URL

|connectorPort |-1 |if greater than zero, will appear in service URL as
connector port
|===

[[_jmx_service_url]]
== 17.1.5. JMX Service URL

The JMX service URL has the following format:

....
service:jmx:rmi://<hostName>:<connectorPort>/jndi/rmi://<hostName>:<registryPort>/<serviceUrlPath>
....

`hostName` will be automatically set to the network name of the machine.
`connectorPort`, `registryPort` and `serviceUrlPath` can be configured.

If `connectionPort` is less than zero, the corresponding part of service
URL will be dropped and it will be simplified to:

....
service:jmx:rmi:///jndi/rmi://:<hostname>:<registryPort>/<serviceUrlPath>
....

[[mavenArchetypes]]
== 17.2. Maven archetypes

[[_create_test_case]]
=== 17.2.1. Create Test Case

During development, sometimes it is helpful to create a small test case
to test an idea or a feature, before implementing it in the real
application. This helps to isolate the subject under test. JUnit test
cases are also the preferred tools for communicating bug reports and
feature requests. Having a test case attached to a bug report or feature
request jira issue, considerably reduces its fixing time.

To facilitate creation of a test case, a maven archetype is available.
By use of this archetype, one can rapidly create a standard test case.
The archetype should be already available in the standard repository. If
not, you can easily install it in your local maven repository folder by
just typing *mvn install* in *tooling/archtypes* folder.

The following command creates the unit test project:

[source,pygments,highlight]
----
mvn archetype:generate \
-DarchetypeGroupId=org.activiti \
-DarchetypeArtifactId=activiti-archetype-unittest \
-DarchetypeVersion=<current version> \
-DgroupId=org.myGroup \
-DartifactId=myArtifact
----

The effect of each parameter is explained in the following table:

.Table 262. Unittest Generation archetype parameters
[width="100%",cols="4%,27%,69%",options="header",]
|===
|Row |Parameter |Explanation
|1 |archetypeGroupId |Group id of the archetype. should be
*org.activiti*

|2 |archetypeArtifactId |Artifact if of the archetype. should be
*activiti-archetype-unittest*

|3 |archetypeVersion |Activiti version used in the generated test
project

|4 |groupId |Group id of the generated test project

|5 |artifactId |Artifact id of the generated test project
|===

The directory structure of the generated project would be like this:

....
.
├── pom.xml
└── src
    └── test
        ├── java
        │   └── org
        │       └── myGroup
        │           └── MyUnitTest.java
        └── resources
            ├── activiti.cfg.xml
            ├── log4j.properties
            └── org
                └── myGroup
                    └── my-process.bpmn20.xml
....

You can modify java unit test case and its corresponding process model,
or add new test cases and process models. If you are using the project
to articulate a bug or a feature, test case should fail initially. It
should then pass after the desired bug is fixed or the desired feature
is implemented. Please make sure to clean the project by typing *mvn
clean* before sending it.

[[footer]]
[[footer-text]]
Last updated 2017-05-25 10:52:43 EDT
